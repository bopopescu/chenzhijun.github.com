<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>饺子</title>
  
  <subtitle>优于别人，并不高贵，真正的高贵应该是优于过去的自己</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="http://chenzhijun.me/"/>
  <updated>2019-04-08T15:02:04.806Z</updated>
  <id>http://chenzhijun.me/</id>
  
  <author>
    <name>陈志军</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx从docker容器的环境变量中获取值</title>
    <link href="http://chenzhijun.me/2019/04/08/nginx-conf-get-env-from-docker-contaniner-enviroment/"/>
    <id>http://chenzhijun.me/2019/04/08/nginx-conf-get-env-from-docker-contaniner-enviroment/</id>
    <published>2019-04-08T14:56:33.000Z</published>
    <updated>2019-04-08T15:02:04.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx从docker容器的环境变量中获取值"><a href="#nginx从docker容器的环境变量中获取值" class="headerlink" title="nginx从docker容器的环境变量中获取值"></a>nginx从docker容器的环境变量中获取值</h1><p>这篇接上一篇<a href="http://chenzhijun.me/2019/04/08/vuejs-starter/">vuejs 从拷项目到开发上线</a></p><h2 id="Docker-部署"><a href="#Docker-部署" class="headerlink" title="Docker 部署"></a>Docker 部署</h2><p>另外一个问题就是如何制作成镜像了？可以看到我们在nginx.conf中有api服务的地址，这个地址可能在不同的环境(di,sit,prd)都不一样，那能否通过容器的env来改变nginx.conf中的值呢？</p><p>不查不知道，一查发现，我擦，还真有，nginx镜像本身就已经具备了。不过是李template的方式，来生成conf文件话不多说，直接上代码，先创建一个<code>nginx.conf.template</code>的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root         /app/html;</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /m-web/ &#123;</span><br><span class="line">        root /app/html/dist;</span><br><span class="line">    &#125;</span><br><span class="line">    location /m-web/m-api/ &#123;</span><br><span class="line">        proxy_pass http://$&#123;M_API_SITE&#125;/m-api/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后准备Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> nginx:latest</span><br><span class="line"><span class="keyword">RUN</span> rm -rf /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/nginx.conf</span><br><span class="line">ENV M_API_SITE 192.168.1.19:8089</span><br><span class="line">ADD nginx.conf.template /etc/nginx/conf.d/nginx.conf.template</span><br><span class="line">ADD dist /app/html/dist</span><br><span class="line">CMD ["/bin/bash", "-c", "envsubst &lt; /etc/nginx/conf.d/nginx.conf.template &gt; /etc/nginx/conf.d/nginx.conf &amp;&amp; exec nginx -g 'daemon off;'"]</span><br></pre></td></tr></table></figure><p>之后<code>docker build -t xxx:latest .</code>，之后我们就可以通过<code>-e M_API_SITE=192.168.123.1:8080</code>设置容器的环境变量来设置不同的api地址了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nginx从docker容器的环境变量中获取值&quot;&gt;&lt;a href=&quot;#nginx从docker容器的环境变量中获取值&quot; class=&quot;headerlink&quot; title=&quot;nginx从docker容器的环境变量中获取值&quot;&gt;&lt;/a&gt;nginx从docker容器的环境
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vuejs 从拷项目到开发上线</title>
    <link href="http://chenzhijun.me/2019/04/08/vuejs-starter/"/>
    <id>http://chenzhijun.me/2019/04/08/vuejs-starter/</id>
    <published>2019-04-08T13:56:22.000Z</published>
    <updated>2019-04-08T15:02:04.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vuejs-从拷项目到开发上线"><a href="#vuejs-从拷项目到开发上线" class="headerlink" title="vuejs 从拷项目到开发上线"></a>vuejs 从拷项目到开发上线</h1><p>最近组里缺人手，我们都是一堆后端，却没有一个前端。所以你看到了一堆的后台接口，但就是没有一个页面。囧~<br>本着求人不如求己，活人不能被尿憋死不是~所以准备自己开始干。</p><h2 id="前端选型"><a href="#前端选型" class="headerlink" title="前端选型"></a>前端选型</h2><p>首先想了一下，我们应该怎么开发前端了？使用thymeleaf这种貌似是最合适的，毕竟类似于以前用jsp，对不对~当然有点不一样。<br>但后来想想，都前后端分离了，以后我们要真的做牛逼了。要是给我们分配个前端，那我们不又要改死啊。<br>然后觉得前后端不分离，逼格不够，也不好维护。那好咯，那就定好方向前端分离。</p><p>前后端分离的方向定好，那就先想想是自己完全自己弄一个，还是直接用模板套一个？一致觉得，自己从头写，费时费力，一群后端去弄不太现实，毕竟还是有很多要调的，适配啊，排版啊。所以投票决定，选模板。选了模板，那就好弄了，github上找了前十个优秀的模板。有一些是基于bootstrap，然后每个页面都是html，所以这种就相当于用jQuery或者javascript用ajax这种吧。想想就被以前写dom支配的恐惧。后来了解到有个vue，人家都说好用，其实公司还有很多都是vue，我们想了想，要是用bootstrap那种估计就是靠我们自己了。要是vue，要是我们实际搞不定，在公司也好请外援。想了想，那就找vue的模板吧。找来找去，找了个最简单实用的。毕竟我们需求很简单，列表显示，表格添加，搜索框就好了，后管管理页面是真的好搞啊。找了个最简单的功能又全的，感谢github，感谢可爱的爱分享的工程师们。</p><h2 id="vue-使用"><a href="#vue-使用" class="headerlink" title="vue 使用"></a>vue 使用</h2><p>模板选好了，这下来到重头戏了。大家都不会啊，以前都是听说，我们前端用vue，特么到底怎么用啊。不过既然选好了方案，选好了模板，其实就很明确了，不会那就学啊。vue官网一翻，一遍浏览。大概的使用方式也是了解了。</p><h3 id="vue-数据绑定"><a href="#vue-数据绑定" class="headerlink" title="vue 数据绑定"></a>vue 数据绑定</h3><p>vue的模式感觉跟以前的不一样，看整个项目发现其实就一个html页面，也就是index.html，然后就是在里面有个APP.vue，通过不同的xx.vue来选择相应的页面，其实就是他们口中的单页式应用。就是一个html页面，然后根据不同的path来显示不同的内容。另外需要转换一个观点，vue不像传统的面向页面来编程，因为它的数据绑定感觉太好用了。如果是在html标签中只需要用<code></code>就可以使用在js中定义的key的值。有几个好用的标签：</p><p>感觉吧，说的不太全，还是要实际用起来才有那种感觉。<a href="https://github.com/chenzhijun/vue-manage-system" target="_blank" rel="noopener">模板地址</a></p><h2 id="使用中遇到的问题"><a href="#使用中遇到的问题" class="headerlink" title="使用中遇到的问题"></a>使用中遇到的问题</h2><p>在实际使用中遇到一些问题，一开始有点懵逼，不过到后来都解决了。</p><h3 id="本地开发-跨域问题"><a href="#本地开发-跨域问题" class="headerlink" title="本地开发-跨域问题"></a>本地开发-跨域问题</h3><p>这个一开始的时候有点蒙圈，本地是使用<code>npm run dev</code>启动的，启动后发现，跨域了。这个该怎么搞哦。后来在vue.config.js中发现一个文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    baseUrl: <span class="string">'./'</span>,</span><br><span class="line">    productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/m-paas'</span>:&#123;</span><br><span class="line">                target: <span class="string">'http://localhost:8080/m-paas'</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite:&#123;</span><br><span class="line">                    <span class="string">'/m-paas'</span>: <span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实可以看到只要打开changeOrigin 就可以了。其它的都不需要改动。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>开发完了，代码也写好了。重点来了，怎么部署到服务器？来跟我三步走</p><ol><li>step1，构建应用</li></ol><p>使用<code>npm run build</code>先进行构建，完成后会在根路径下生成一个dist文件夹。</p><ol start="2"><li>step2，准备nginx服务器</li></ol><p>下载一个nginx，现在都是使用nginx来做前端的服务器。将刚刚的dist文件夹的内容copy到服务器某个路径。<br>比如<code>/app/html</code>，或者就是nginx目录下的html。随自己开心就好</p><ol start="3"><li>step3，修改nginx配置</li></ol><p>目录确定后，我们就需要修改nginx的配置了。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">       listen       127.0.0.1:6000;</span><br><span class="line">       #server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location /m-web/ &#123;</span><br><span class="line">          root   /app/html/dist;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line">       location /m-api &#123;</span><br><span class="line">           proxy_pass http://localhost:8080/m-api;</span><br><span class="line">           #proxy_pass http://api-m.chenzhijun.me/m-api;</span><br><span class="line">       &#125;</span><br><span class="line">       #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">       # redirect server error pages to the static page /50x.html</span><br><span class="line">       #</span><br><span class="line">       error_page   500 502 503 504  /50x.html;</span><br><span class="line">       location = /50x.html &#123;</span><br><span class="line">           root   html;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>然后启动 nginx 就好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vuejs-从拷项目到开发上线&quot;&gt;&lt;a href=&quot;#vuejs-从拷项目到开发上线&quot; class=&quot;headerlink&quot; title=&quot;vuejs 从拷项目到开发上线&quot;&gt;&lt;/a&gt;vuejs 从拷项目到开发上线&lt;/h1&gt;&lt;p&gt;最近组里缺人手，我们都是一堆后端，却
      
    
    </summary>
    
      <category term="vuejs" scheme="http://chenzhijun.me/categories/vuejs/"/>
    
    
      <category term="vuejs" scheme="http://chenzhijun.me/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 第一天</title>
    <link href="http://chenzhijun.me/2019/04/03/kubernetes-day1/"/>
    <id>http://chenzhijun.me/2019/04/03/kubernetes-day1/</id>
    <published>2019-04-03T13:10:22.000Z</published>
    <updated>2019-04-08T15:02:04.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-day1"><a href="#Kubernetes-day1" class="headerlink" title="Kubernetes day1"></a>Kubernetes day1</h1><h2 id="Kubernetes是什么？"><a href="#Kubernetes是什么？" class="headerlink" title="Kubernetes是什么？"></a>Kubernetes是什么？</h2><p>Kubernetes简称k8s。最直观的解释它是用将资源进行整合，将应用与底层隔离。因此，搞业务开发的，专心搞好业务逻辑。搞底层机器，网络资源的安心搞好底层网络资源。而k8s就是这中间的一层，承上启下。也就是传说中的PaaS。现在可以说没有那个Paas或者Caas不是基于k8s搞的。不过我觉得理解的不深，k8s的作用其实还有很多，如果你用过docker或者直接开发业务就会有比较深的感知。</p><h2 id="Kubernetes-关键组件"><a href="#Kubernetes-关键组件" class="headerlink" title="Kubernetes 关键组件"></a>Kubernetes 关键组件</h2><p>安装一个K8S集群需要哪些组件了？一个完整的小集群里面，需要有一个master，一个node，两台机器。master和node上分别有哪些组件了？master上有kube-apiserver,kube-scheduler,kube-controller-manager; node上有kubelet,kube-proxy,docker;另外需要在master上安装一个etcd数据库。如果是非二进制安装，master和node上都需要有kubeadm。安装完这些之后需要在master节点上使用’kubectl apply -f [kubelet-network].yaml’也就是如果你使用flannel网络，就可能需要安装flannel的网络插件。这个插件是已pod的方式创建的。</p><h2 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h2><h3 id="Etcd"><a href="#Etcd" class="headerlink" title="Etcd"></a>Etcd</h3><p>键值数据库，这个没有什么特别好说的。要在安装k8s集群前先启动，保存k8s所有资源对象数据</p><h3 id="kube-apiserver"><a href="#kube-apiserver" class="headerlink" title="kube-apiserver"></a>kube-apiserver</h3><p>集群控制的入口进程，提供HTTP Rest接口的关键服务进程，是k8s里面所有资源操作的唯一入口。</p><h3 id="kube-controller-manager"><a href="#kube-controller-manager" class="headerlink" title="kube-controller-manager"></a>kube-controller-manager</h3><p>k8s所有资源对象的自动化控制中心</p><h3 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h3><p>k8s的资源调度进程</p><h3 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h3><p>负责pod对应的容器的创建，启停等任务，同时与Maser节点密切协作，实现集群管理的基本功能</p><h3 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h3><p>实现kubernetes Service的通信与负载均衡机制的重要组件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kubernetes-day1&quot;&gt;&lt;a href=&quot;#Kubernetes-day1&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes day1&quot;&gt;&lt;/a&gt;Kubernetes day1&lt;/h1&gt;&lt;h2 id=&quot;Kubernetes是什么
      
    
    </summary>
    
      <category term="Kubernetes" scheme="http://chenzhijun.me/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://chenzhijun.me/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Java 大数据中的敏感词汇处理</title>
    <link href="http://chenzhijun.me/2019/03/31/java-big-data-sensitive-word/"/>
    <id>http://chenzhijun.me/2019/03/31/java-big-data-sensitive-word/</id>
    <published>2019-03-31T14:39:06.000Z</published>
    <updated>2019-04-08T15:02:04.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-大数据中的敏感词汇处理"><a href="#Java-大数据中的敏感词汇处理" class="headerlink" title="Java 大数据中的敏感词汇处理"></a>Java 大数据中的敏感词汇处理</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-大数据中的敏感词汇处理&quot;&gt;&lt;a href=&quot;#Java-大数据中的敏感词汇处理&quot; class=&quot;headerlink&quot; title=&quot;Java 大数据中的敏感词汇处理&quot;&gt;&lt;/a&gt;Java 大数据中的敏感词汇处理&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://chenzhijun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>golang 包项目结构</title>
    <link href="http://chenzhijun.me/2019/03/31/golang-package-struct/"/>
    <id>http://chenzhijun.me/2019/03/31/golang-package-struct/</id>
    <published>2019-03-31T14:02:15.000Z</published>
    <updated>2019-04-08T15:02:04.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang-包项目结构"><a href="#golang-包项目结构" class="headerlink" title="golang 包项目结构"></a>golang 包项目结构</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;golang-包项目结构&quot;&gt;&lt;a href=&quot;#golang-包项目结构&quot; class=&quot;headerlink&quot; title=&quot;golang 包项目结构&quot;&gt;&lt;/a&gt;golang 包项目结构&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Golang" scheme="http://chenzhijun.me/categories/Golang/"/>
    
    
      <category term="golang" scheme="http://chenzhijun.me/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Java 开发遇到的两个问题</title>
    <link href="http://chenzhijun.me/2019/03/31/java-develop-normal-error/"/>
    <id>http://chenzhijun.me/2019/03/31/java-develop-normal-error/</id>
    <published>2019-03-31T13:56:43.000Z</published>
    <updated>2019-04-08T15:02:04.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java开发遇到的两个问题"><a href="#Java开发遇到的两个问题" class="headerlink" title="Java开发遇到的两个问题"></a>Java开发遇到的两个问题</h1><h2 id="Object-反序列化失败"><a href="#Object-反序列化失败" class="headerlink" title="Object 反序列化失败"></a>Object 反序列化失败</h2><p>使用<code>@ReponseBody</code>返回一个json串，返回的类型是<code>Object</code>，我们知道如果是<code>@RestController</code>，都会已restful返回，也就是返回json格式的数据，但是如果你是使用Object返回值，然后Object只是一个null或者仅仅只是<code>new Object()</code>，那么就会返回下面的异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.lang.Object and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[1])</span><br></pre></td></tr></table></figure><h2 id="RestTemplate使用中path有-问题"><a href="#RestTemplate使用中path有-问题" class="headerlink" title="RestTemplate使用中path有{}问题"></a>RestTemplate使用中path有{}问题</h2><p>RestTemplate 默认就是将path中的<code>{}</code>作为一个赋值表达式的，它会认为你需要替换<code>{}</code>中的内容。所以在path中最好特别注意下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java开发遇到的两个问题&quot;&gt;&lt;a href=&quot;#Java开发遇到的两个问题&quot; class=&quot;headerlink&quot; title=&quot;Java开发遇到的两个问题&quot;&gt;&lt;/a&gt;Java开发遇到的两个问题&lt;/h1&gt;&lt;h2 id=&quot;Object-反序列化失败&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://chenzhijun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>怎样将shell中命令执行的结果赋值给变量</title>
    <link href="http://chenzhijun.me/2019/03/31/how-to-transfer-linux-command-result-to-variable-in-shell/"/>
    <id>http://chenzhijun.me/2019/03/31/how-to-transfer-linux-command-result-to-variable-in-shell/</id>
    <published>2019-03-31T13:51:57.000Z</published>
    <updated>2019-04-08T15:02:04.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="怎样将shell中命令执行的结果赋值给变量"><a href="#怎样将shell中命令执行的结果赋值给变量" class="headerlink" title="怎样将shell中命令执行的结果赋值给变量"></a>怎样将shell中命令执行的结果赋值给变量</h1><p>其实这个比较简单。只需要将命令使用反单引号起来就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">srvname=`docker inspect 1swd3|grep "name"|awk -F "," '&#123;print $1&#125;'|awk '&#123;print $NF&#125;'`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;怎样将shell中命令执行的结果赋值给变量&quot;&gt;&lt;a href=&quot;#怎样将shell中命令执行的结果赋值给变量&quot; class=&quot;headerlink&quot; title=&quot;怎样将shell中命令执行的结果赋值给变量&quot;&gt;&lt;/a&gt;怎样将shell中命令执行的结果赋值给变量&lt;/
      
    
    </summary>
    
      <category term="Linux" scheme="http://chenzhijun.me/categories/Linux/"/>
    
    
      <category term="shell" scheme="http://chenzhijun.me/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>byte 在golang和Java中的区别</title>
    <link href="http://chenzhijun.me/2019/03/31/java-byte-golang-byte/"/>
    <id>http://chenzhijun.me/2019/03/31/java-byte-golang-byte/</id>
    <published>2019-03-31T13:45:50.000Z</published>
    <updated>2019-04-08T15:02:04.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="byte-在golang和Java中的区别"><a href="#byte-在golang和Java中的区别" class="headerlink" title="byte 在golang和Java中的区别"></a>byte 在golang和Java中的区别</h1><p>最近做一个项目，想用到md5，做一次数据的校验。因为是两个系统，一个golang开发，一个java开发。首先用Java生成md5值，然后传给golang，发现原始数据一致，但是生成的md5值却不一致。</p><p>深究其原因，最终发现是golang和java中对于byte的定义一个是无符号的，一个是有符号的，所以两者最后生成的md5值不一致。现在我发现有的时候真的需要注意到一些比较基础的东西，不然就会成为面向api的工程师。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;byte-在golang和Java中的区别&quot;&gt;&lt;a href=&quot;#byte-在golang和Java中的区别&quot; class=&quot;headerlink&quot; title=&quot;byte 在golang和Java中的区别&quot;&gt;&lt;/a&gt;byte 在golang和Java中的区别&lt;/
      
    
    </summary>
    
      <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
      <category term="byte" scheme="http://chenzhijun.me/tags/byte/"/>
    
  </entry>
  
  <entry>
    <title>golang编译成Linux环境下的二进制文件</title>
    <link href="http://chenzhijun.me/2019/03/31/windows-compile-golang-to-linux-running-script/"/>
    <id>http://chenzhijun.me/2019/03/31/windows-compile-golang-to-linux-running-script/</id>
    <published>2019-03-31T13:38:08.000Z</published>
    <updated>2019-04-08T15:02:04.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang编译成Linux环境下的二进制文件"><a href="#golang编译成Linux环境下的二进制文件" class="headerlink" title="golang编译成Linux环境下的二进制文件"></a>golang编译成Linux环境下的二进制文件</h1><p>最近需要将golang项目编译成Linux下可执行的脚本，手中只有windows笔记本，服务器上又各种网络限制。<br>于是干脆就再本地打成Linux二进制文件，然后传到服务器直接启动。</p><p>在本地上（win10）打开控制台，然后进入到项目根路径。之后设置当前几个值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=linux </span><br><span class="line">SET GOARCH=amd64</span><br></pre></td></tr></table></figure><p>最后使用<code>go build .</code>就可以了。 也算是异常简单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;golang编译成Linux环境下的二进制文件&quot;&gt;&lt;a href=&quot;#golang编译成Linux环境下的二进制文件&quot; class=&quot;headerlink&quot; title=&quot;golang编译成Linux环境下的二进制文件&quot;&gt;&lt;/a&gt;golang编译成Linux环境下
      
    
    </summary>
    
      <category term="golang" scheme="http://chenzhijun.me/categories/golang/"/>
    
    
      <category term="golang" scheme="http://chenzhijun.me/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>dev-ops</title>
    <link href="http://chenzhijun.me/2019/03/31/dev-ops/"/>
    <id>http://chenzhijun.me/2019/03/31/dev-ops/</id>
    <published>2019-03-31T13:27:31.000Z</published>
    <updated>2019-04-08T15:02:04.802Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Alertmanager 配置邮件模板</title>
    <link href="http://chenzhijun.me/2019/01/08/alertmanager-email/"/>
    <id>http://chenzhijun.me/2019/01/08/alertmanager-email/</id>
    <published>2019-01-08T15:46:39.000Z</published>
    <updated>2019-04-08T15:02:04.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Alertmanager-配置邮件模板"><a href="#Alertmanager-配置邮件模板" class="headerlink" title="Alertmanager 配置邮件模板"></a>Alertmanager 配置邮件模板</h1><h2 id="Alertmanager-配置"><a href="#Alertmanager-配置" class="headerlink" title="Alertmanager 配置"></a>Alertmanager 配置</h2><p>alertmanager 的配置主要是要配置邮箱（通知方式）和模板地址；文档地址：<a href="https://prometheusAio/docs/alerting/configuration/#email_config" target="_blank" rel="noopener">Alertmanager 地址</a>，配置完之后就只需要在模板中定义就好了。</p><a id="more"></a><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">....</span></span><br><span class="line"><span class="comment"># Whether or not to notify about resolved alerts.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">send_resolved:</span> <span class="string">&lt;boolean&gt;</span> <span class="string">| default = false ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># The email address to send notifications to.</span></span><br><span class="line"><span class="string"></span><span class="attr">to:</span> <span class="string">&lt;tmpl_string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The sender address.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">from:</span> <span class="string">&lt;tmpl_string&gt;</span> <span class="string">| default = global.smtp_from ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># The SMTP host through which emails are sent.</span></span><br><span class="line"><span class="string">[ smarthost: &lt;string&gt; | default = global.smtp_smarthost ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># The hostname to identify to the SMTP server.</span></span><br><span class="line"><span class="string">[ hello: &lt;string&gt; | default = global.smtp_hello ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># SMTP authentication information.</span></span><br><span class="line"><span class="string">[ auth_username: &lt;string&gt; | default = global.smtp_auth_username ]</span></span><br><span class="line"><span class="string">[ auth_password: &lt;secret&gt; | default = global.smtp_auth_password ]</span></span><br><span class="line"><span class="string">[ auth_secret: &lt;secret&gt; | default = global.smtp_auth_secret ]</span></span><br><span class="line"><span class="string">[ auth_identity: &lt;string&gt; | default = global.smtp_auth_identity ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">templates:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">'/etc/alertmanager/templates/xxx.tmpl'</span></span><br></pre></td></tr></table></figure><h2 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h2><p>下面给出一份模板配置的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;&#123; define &quot;email.common.html&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;this is test....&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &#123;&#123; .Alerts | len &#125;&#125; alert&#123;&#123; if gt (len .Alerts) 1 &#125;&#125;s&#123;&#123; end &#125;&#125; for &#123;&#123; range .GroupLabels.SortedPairs &#125;&#125;</span><br><span class="line">                &#123;&#123; .Name &#125;&#125;=&#123;&#123; .Value &#125;&#125;</span><br><span class="line">              &#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在Alertmanager中查看 ：&lt;a href=&quot;&#123;&#123; template &quot;__alertmanagerURL&quot; . &#125;&#125;&quot;&gt;View in &#123;&#123; template &quot;__alertmanager&quot; . &#125;&#125;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#123;&#123; if gt (len .Alerts.Firing) 0 &#125;&#125;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;strong&gt;[&#123;&#123; .Alerts.Firing | len &#125;&#125;] Firing&lt;/strong&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                 &#123;&#123; range .Alerts.Firing &#125;&#125;</span><br><span class="line">                &lt;tr style=&quot;font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;&quot;&gt;</span><br><span class="line">                  &lt;td style=&quot;font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;&quot; valign=&quot;top&quot;&gt;</span><br><span class="line">                    &lt;strong&gt;Labels&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">                    &#123;&#123; range .Labels.SortedPairs &#125;&#125;&#123;&#123; .Name &#125;&#125; = &#123;&#123; .Value &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">                    &#123;&#123; if gt (len .Annotations) 0 &#125;&#125;</span><br><span class="line">                        &lt;strong&gt;Annotations&lt;/strong&gt;</span><br><span class="line">                        &lt;br&gt;</span><br><span class="line">                    &#123;&#123; end &#125;&#125;</span><br><span class="line">                    </span><br><span class="line">                    &#123;&#123; range .Annotations.SortedPairs &#125;&#125;</span><br><span class="line">                        &#123;&#123; .Name &#125;&#125; = &#123;&#123; .Value &#125;&#125;</span><br><span class="line">                    &#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">                    &lt;a href=&quot;&#123;&#123; .GeneratorURL &#125;&#125;&quot; style=&quot;font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #348eda; text-decoration: underline; margin: 0;&quot;&gt;</span><br><span class="line">                        Source</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                        </span><br><span class="line">                    &lt;br style=&quot;font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;&quot; /&gt;</span><br><span class="line">                  &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#123;&#123; if gt (len .Alerts.Resolved) 0 &#125;&#125;</span><br><span class="line">                  &#123;&#123; if gt (len .Alerts.Firing) 0 &#125;&#125;</span><br><span class="line">                  &#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">                  &lt;td&gt;</span><br><span class="line">                    &lt;strong&gt;[&#123;&#123; .Alerts.Resolved | len &#125;&#125;] Resolved&lt;/strong&gt;</span><br><span class="line">                  &lt;/td&gt;</span><br><span class="line">                &#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#123;&#123; range .Alerts.Resolved &#125;&#125;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                  &lt;td&gt;</span><br><span class="line">                    &lt;strong&gt;Labels&lt;/strong&gt;</span><br><span class="line">                    &lt;br/&gt;</span><br><span class="line">                    &#123;&#123; range .Labels.SortedPairs &#125;&#125;</span><br><span class="line">                        &#123;&#123; .Name &#125;&#125; = &#123;&#123; .Value &#125;&#125;</span><br><span class="line">                    &#123;&#123; end &#125;&#125;</span><br><span class="line">                    </span><br><span class="line">                    &#123;&#123; if gt (len .Annotations) 0 &#125;&#125;</span><br><span class="line">                        &lt;strong&gt;Annotations&lt;/strong&gt;</span><br><span class="line">                    &#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">                    &#123;&#123; range .Annotations.SortedPairs &#125;&#125;</span><br><span class="line">                        &#123;&#123; .Name &#125;&#125; = &#123;&#123; .Value &#125;&#125;</span><br><span class="line">                    &#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">                    &lt;a href=&quot;&#123;&#123; .GeneratorURL &#125;&#125;&quot; style=&quot;font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #348eda; text-decoration: underline; margin: 0;&quot;&gt;</span><br><span class="line">                        Source</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                    &lt;br style=&quot;font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;&quot; /&gt;</span><br><span class="line">                  &lt;/td&gt;</span><br><span class="line">                &#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><p>这里要注意的是第一行:<code>define &quot;email.common.html&quot;</code>记住结尾一定要有 <code>end</code> 与之对应，因为 golang 的 template 模板限制。<br>其实这个 tmpl 文件就是 golang 的 template 模板。以前看到还有点懵，用过一次 golang 中 template 功能之后，会有很多明白的地方。</p><p>在一个文件中也是可以定义多个模板的只需要有多个<code>define &quot;xxx&quot;</code>即可。记住在 alertmanager 的配置文件<code>alertmanager.yml</code>中一定要有</p><pre><code class="yaml"><span class="attr">html:</span>  <span class="string">{{template "email.common.html" }}</span> <span class="string">.</span></code></pre><p>这里的<code>email.common.html</code>要与tmpl文件中定义的相同。</p><p>源码中有示例: <a href="https://github.com/prometheus/alertmanager/blob/master/template/default.tmpl" target="_blank" rel="noopener">alertmanager template</a></p><p>而tmpl文件里面的内容都在这个go文件中 <a href="https://github.com/prometheus/alertmanager/blob/master/template/template.go" target="_blank" rel="noopener">template.go</a> 可以看到里面有个<code>Data</code>struct。这里就是它的详细信息了。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p><a href="https://godoc.org/text/template" target="_blank" rel="noopener">package text/template</a></p><p><a href="https://golang.org/pkg/html/template/" target="_blank" rel="noopener">package html/template</a></p><p><a href="https://astaxie.gitbooks.io/build-web-application-with-golang/zh/07.4.html" target="_blank" rel="noopener">模板处理</a></p><p><a href="https://www.kancloud.cn/cserli/golang/531904" target="_blank" rel="noopener">golang 模板(template)的常用基本语法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Alertmanager-配置邮件模板&quot;&gt;&lt;a href=&quot;#Alertmanager-配置邮件模板&quot; class=&quot;headerlink&quot; title=&quot;Alertmanager 配置邮件模板&quot;&gt;&lt;/a&gt;Alertmanager 配置邮件模板&lt;/h1&gt;&lt;h2 id=&quot;Alertmanager-配置&quot;&gt;&lt;a href=&quot;#Alertmanager-配置&quot; class=&quot;headerlink&quot; title=&quot;Alertmanager 配置&quot;&gt;&lt;/a&gt;Alertmanager 配置&lt;/h2&gt;&lt;p&gt;alertmanager 的配置主要是要配置邮箱（通知方式）和模板地址；文档地址：&lt;a href=&quot;https://prometheusAio/docs/alerting/configuration/#email_config&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alertmanager 地址&lt;/a&gt;，配置完之后就只需要在模板中定义就好了。&lt;/p&gt;
    
    </summary>
    
      <category term="Alertmanager" scheme="http://chenzhijun.me/categories/Alertmanager/"/>
    
    
      <category term="Alertmanager" scheme="http://chenzhijun.me/tags/Alertmanager/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 用户与权限设置</title>
    <link href="http://chenzhijun.me/2018/12/17/mysql-grant/"/>
    <id>http://chenzhijun.me/2018/12/17/mysql-grant/</id>
    <published>2018-12-17T09:00:27.000Z</published>
    <updated>2019-04-08T15:02:04.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL-用户与权限设置"><a href="#MySQL-用户与权限设置" class="headerlink" title="MySQL 用户与权限设置"></a>MySQL 用户与权限设置</h1><p>这几天开发完发现dba对于权限控制的比较严，通常是没有root权限的，在正式上线前，还是希望能再通过一个普通用户的权限来做一次预发布。这样可以看看到底会有哪些坑，提前踩一下可能比较好。后来发现，其实你只要准备需求提给dba就ok了，人家会帮你处理的非常好~~~。总之在这过程中遇到的问题，先记录一下吧。<br><a id="more"></a></p><h2 id="MySQL创建用户"><a href="#MySQL创建用户" class="headerlink" title="MySQL创建用户"></a>MySQL创建用户</h2><p>第一个就是创建一个普通用户。使用root登陆后，创建一个用户：<code>CREATE USER &#39;username&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;paasword&#39;;</code>其中<code>username</code>,<code>paasword</code>按需修改。一般来说这里需要注意的就是<code>localhost</code>，为什么？因为这个字段稍不注意就会才坑，这里的<code>localhost</code>和<code>%</code>，其实指代的是只允许本地登录和允许所有地方登陆。如果你的应用部署在同一台机器上，那么你用localhost没问题，但是如果应用和数据库是分开机器部署的，那么这里要写成<code>%</code>，不然就会出现远程无法连接。当然还有很多其他的设置，比如什么过期时间啊，证书登录啊，具体的可以看下官方文档:<a href="https://dev.mysql.com/doc/refman/8.0/en/create-user.html" target="_blank" rel="noopener">Create User</a>。</p><h2 id="给MySQL用户赋权限"><a href="#给MySQL用户赋权限" class="headerlink" title="给MySQL用户赋权限"></a>给MySQL用户赋权限</h2><p>如果做开发的话，你就会发现，你的jdbc或者其他语言连接数据库，都需要选择选择一个库。也就是你必须先在数据库里面建立一个database，但是如果你用root建立一个database，比如：<code>create database DB_USER;</code>这个时候上一步创建的用户是无法访问这个库的。如果你切换到刚刚的用户，那么你也是没有权限建立数据库的。但我们通常开发都会写上库名，那这个时候怎么操作了？嗯，就是先用root建库，然后将权限库的权限赋值给新用户。具体操作如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> db_user;</span><br><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">ON</span> db_user.* <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure><p>这里一定要注意<code>%</code>,<code>localhost</code>，如果这里不同，那就是两个用户。</p><p>当然，如果你觉得只给查的权限就足够了，那么只需要<code>GRANT SELECT ON db_user.* TO &#39;test&#39;@&#39;%&#39;;</code>。那么有没有更详细的了了？当然有，文档始终是最详细的，我只是记录我使用的过程。文档地址：<a href="https://dev.mysql.com/doc/refman/8.0/en/grant.html#grant-overview" target="_blank" rel="noopener">grant</a></p><p>一些比较使用的使用方式：</p><ol><li><p>查看当前用户：<code>select CURRENT_USER();</code></p></li><li><p>查看当前用户权限：<code>show grants;</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL-用户与权限设置&quot;&gt;&lt;a href=&quot;#MySQL-用户与权限设置&quot; class=&quot;headerlink&quot; title=&quot;MySQL 用户与权限设置&quot;&gt;&lt;/a&gt;MySQL 用户与权限设置&lt;/h1&gt;&lt;p&gt;这几天开发完发现dba对于权限控制的比较严，通常是没有root权限的，在正式上线前，还是希望能再通过一个普通用户的权限来做一次预发布。这样可以看看到底会有哪些坑，提前踩一下可能比较好。后来发现，其实你只要准备需求提给dba就ok了，人家会帮你处理的非常好~~~。总之在这过程中遇到的问题，先记录一下吧。&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://chenzhijun.me/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://chenzhijun.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Docker 快速搭建 MySQL 和 Redis</title>
    <link href="http://chenzhijun.me/2018/12/16/docker-mysql-and-redis/"/>
    <id>http://chenzhijun.me/2018/12/16/docker-mysql-and-redis/</id>
    <published>2018-12-16T12:04:12.000Z</published>
    <updated>2019-04-08T15:02:04.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-快速搭建-MySQL-和-Redis"><a href="#Docker-快速搭建-MySQL-和-Redis" class="headerlink" title="Docker 快速搭建 MySQL 和 Redis"></a>Docker 快速搭建 MySQL 和 Redis</h1><h2 id="MySQL-环境搭建"><a href="#MySQL-环境搭建" class="headerlink" title="MySQL 环境搭建"></a>MySQL 环境搭建</h2><p>最近做开发的时候遇到一个比较有意思的事情，如何搭建一个数据库，还有相关的redis等。因为没有外网，不可能说直接yum安装，又不想到每个官网去找相应的安装包。自然的，就想到了用Docker。一开始用到docker安装一个mysql的时候确实也是非常方便，比如一个<code>docker run</code>命令就启动了一个mysql，但是开发到一部分的时候，发现。我去！怎么又乱码？？ 咦，怎么市区也不对了？GG，发现还有很多小问题。今天有空一并总结下，下次如果有这种事就可以直接用了。</p><h3 id="使用Docker启动启动Mysql容器"><a href="#使用Docker启动启动Mysql容器" class="headerlink" title="使用Docker启动启动Mysql容器"></a>使用Docker启动启动Mysql容器</h3><p>如果需要一个mysql数据库，直接使用docker来运行一个容器：<code>docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root123456 mysql:5.7</code></p><p>这样你就可以在本地ip+3306端口来访问一个mysql数据库了，root密码是：<code>root123456</code>。第一次使用docker的时候就是因为这个原因被吸引了。想想如果本地安装需要做多少配置，而是用docker一条命令就帮你把那些复杂的操作都隐藏了。这种便利性，我想谁都不会说不想要。</p><p>不过虽然便利是便利了，但是还是需要注意一些问题：</p><a id="more"></a><h4 id="字符问题"><a href="#字符问题" class="headerlink" title="字符问题"></a>字符问题</h4><p>mysql默认其实是latin的字符集，docker 启动mysql的时候其实也是使用的默认字符。而我们做开发一般都是使用UTF-8的字符集，那出现这种情况该如何更改配置了？可以在启动的时候加上两个变量：<code>docker run -d -e MYSQL_ROOT_PASSWORD=root123456 mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code></p><h4 id="数据磁盘问题"><a href="#数据磁盘问题" class="headerlink" title="数据磁盘问题"></a>数据磁盘问题</h4><p>一个容器，如果那天不小心删除了，然后你重建就会发现之前的数据没有了，这种情况当然是不行啦。那么怎么将数据盘挂载出来：加上 <code>-v</code>，让存储在容器里面的数据存储到本地自定义的盘中：<code>-v /data/mysql:/var/lib/mysql</code>。</p><h4 id="默认数据库，以及时区修改"><a href="#默认数据库，以及时区修改" class="headerlink" title="默认数据库，以及时区修改"></a>默认数据库，以及时区修改</h4><p>有的时候我们会需要导入一些表或者一些数据，这个时候该怎么操作? 其实也有一个环境变量：<code>MYSQL_DATABASE</code>;然后将数据库的初始化脚本放到<code>/docker-entrypoint-initdb.d/</code>目录下也就是将sql挂载到该目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mysql -p 13306:3306 -e MYSQL_ROOT_PASSWORD=root123456 -e MYSQL_DATABASE=DB_USER -e TZ=Asia/Shanghai -v $PWD/sql-scripts/:/docker-entrypoint-initdb.d/ -v /data/mysql:/var/lib/mysql mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><p>将数据库的sql放到当前目录的<code>sql-scripts/</code>目录下。</p><!--- docker run -d --name test -p 13306:3306 -e MYSQL_ROOT_PASSWORD=root123456 -e MYSQL_DATABASE=DB_USER -e TZ=Asia/Shanghai -v $PWD/sql-scripts/:/docker-entrypoint-initdb.d/ -v /data/mysql:/var/lib/mysql -v /etc/localtime:/etc/localtime:ro mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_cidocker run -d --name test -p 13306:3306 -e MYSQL_ROOT_PASSWORD=root123456 -e MYSQL_DATABASE=DB_USER -e TZ=Asia/Shanghai -v /etc/localtime:/etc/localtime:ro -v $PWD/sql-scripts/:/docker-entrypoint-initdb.d/ -v /data/mysql:/var/lib/mysql -v /etc/localtime:/etc/localtime:ro mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci---><h2 id="Redis-环境搭建"><a href="#Redis-环境搭建" class="headerlink" title="Redis 环境搭建"></a>Redis 环境搭建</h2><p>redis的搭建其实要比mysql要简单些，毕竟redis我们一般都只是用来当作缓存，而不会将数据持久化，所以只需要将一个容器run起来就可以了。不过我们一般会有redis的密码需要，所以完整的命令如下：</p><p><code>docker run -d --name redis -p 6379:6379 redis:latest --requirepass &quot;123456&quot;</code></p><p>这样redis就启动了，如果需要开机启动，加上<code>--restart=always</code>。</p><p>好了，今天一篇搭建mysql和redis的过程就到这里了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-快速搭建-MySQL-和-Redis&quot;&gt;&lt;a href=&quot;#Docker-快速搭建-MySQL-和-Redis&quot; class=&quot;headerlink&quot; title=&quot;Docker 快速搭建 MySQL 和 Redis&quot;&gt;&lt;/a&gt;Docker 快速搭建 MySQL 和 Redis&lt;/h1&gt;&lt;h2 id=&quot;MySQL-环境搭建&quot;&gt;&lt;a href=&quot;#MySQL-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;MySQL 环境搭建&quot;&gt;&lt;/a&gt;MySQL 环境搭建&lt;/h2&gt;&lt;p&gt;最近做开发的时候遇到一个比较有意思的事情，如何搭建一个数据库，还有相关的redis等。因为没有外网，不可能说直接yum安装，又不想到每个官网去找相应的安装包。自然的，就想到了用Docker。一开始用到docker安装一个mysql的时候确实也是非常方便，比如一个&lt;code&gt;docker run&lt;/code&gt;命令就启动了一个mysql，但是开发到一部分的时候，发现。我去！怎么又乱码？？ 咦，怎么市区也不对了？GG，发现还有很多小问题。今天有空一并总结下，下次如果有这种事就可以直接用了。&lt;/p&gt;
&lt;h3 id=&quot;使用Docker启动启动Mysql容器&quot;&gt;&lt;a href=&quot;#使用Docker启动启动Mysql容器&quot; class=&quot;headerlink&quot; title=&quot;使用Docker启动启动Mysql容器&quot;&gt;&lt;/a&gt;使用Docker启动启动Mysql容器&lt;/h3&gt;&lt;p&gt;如果需要一个mysql数据库，直接使用docker来运行一个容器：&lt;code&gt;docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root123456 mysql:5.7&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样你就可以在本地ip+3306端口来访问一个mysql数据库了，root密码是：&lt;code&gt;root123456&lt;/code&gt;。第一次使用docker的时候就是因为这个原因被吸引了。想想如果本地安装需要做多少配置，而是用docker一条命令就帮你把那些复杂的操作都隐藏了。这种便利性，我想谁都不会说不想要。&lt;/p&gt;
&lt;p&gt;不过虽然便利是便利了，但是还是需要注意一些问题：&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://chenzhijun.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chenzhijun.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>重启Linux主机后自动运行任务或者脚本</title>
    <link href="http://chenzhijun.me/2018/10/30/linux-auto-excute-shell-script-after-rebooting/"/>
    <id>http://chenzhijun.me/2018/10/30/linux-auto-excute-shell-script-after-rebooting/</id>
    <published>2018-10-30T13:13:40.000Z</published>
    <updated>2019-04-08T15:02:04.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重启Linux主机后自动运行任务或者脚本"><a href="#重启Linux主机后自动运行任务或者脚本" class="headerlink" title="重启Linux主机后自动运行任务或者脚本"></a>重启Linux主机后自动运行任务或者脚本</h1><p>有时候我们在主机上做了一些agent应用，这些应用平常都是主机启动，agent就需要启动。相当于“伴生”。尽管第一次或者第二次我们能依靠记忆或者自我约束来启动这些agent，但是有时候还是会免不了忘记。那么有没有办法让这种agent做成开机启动呢？下面提供两种Linux设置开机启动应用的方法。</p><a id="more"></a><h2 id="1-crontab-实现脚本-应用-开机启动"><a href="#1-crontab-实现脚本-应用-开机启动" class="headerlink" title="1. crontab 实现脚本(应用)开机启动"></a>1. crontab 实现脚本(应用)开机启动</h2><p>crontab的介绍在我的另一个博客里面<a href="http://chenzhijun.me/2018/10/29/linux-crontab-clean-ndays-log/">crontab使用linux crontab定时清理n天前的日志文件</a>，这里我们介绍一个使用它来实现开机启动的用法。</p><p>使用<code>crontab -e</code>，在crontab的编辑页面增加下面的内容:<code>@reboot sleep 10 &amp;&amp; bash /root/test.sh</code>，sleep 10 是指在开机10秒后启动，启动的脚本是<code>/root/test.sh</code>。里面的内容，可以自己根据需要编写。最后要记住 <strong>将test.sh脚本设置为可执行权限 744 或者 777 或者 a+x</strong>。这样一个简单的开启启动任务就完成了。</p><h2 id="2-systemd-服务实现脚本-应用-开机启动"><a href="#2-systemd-服务实现脚本-应用-开机启动" class="headerlink" title="2. systemd 服务实现脚本(应用)开机启动"></a>2. systemd 服务实现脚本(应用)开机启动</h2><p>systemd 是linux机器的一个daemon服务。主要是创建一个<code>.service</code>文件，然后进行开机启动。下面来看一下实际使用过程。</p><p><code>vi /etc/systemd/system/auto_exe.service</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=auto exec after reboot</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/usr/local/bin/auto.sh</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>一个systemd的<code>service</code>由三部分构成:Unit,Service,Install。详细的内容或者介绍可以使用man，或者google。</p><p>我这里表示的是在机器启动后，执行<code>/usr/local/bin/auto.sh</code>。</p><p>auto.sh，记得将权限赋值为<code>a+x</code>，777，或者744<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">echo "hello" &gt;&gt; /home/auto_exe.log</span><br></pre></td></tr></table></figure></p><p>之后使用<code>systemctl daemon-reload</code>刷新service，我们可以使用<code>systemctl start auto_exe</code> 进行调试，看脚本是否执行。<br>使用<code>systemctl status auto_exe</code>查看服务状态。如果成功，那么就可以加入确保启动执行脚本，使用<code>systemctl enable auto_exe</code>，这样就设置好了。</p><p>简单的linux应用开机启动就设置好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;重启Linux主机后自动运行任务或者脚本&quot;&gt;&lt;a href=&quot;#重启Linux主机后自动运行任务或者脚本&quot; class=&quot;headerlink&quot; title=&quot;重启Linux主机后自动运行任务或者脚本&quot;&gt;&lt;/a&gt;重启Linux主机后自动运行任务或者脚本&lt;/h1&gt;&lt;p&gt;有时候我们在主机上做了一些agent应用，这些应用平常都是主机启动，agent就需要启动。相当于“伴生”。尽管第一次或者第二次我们能依靠记忆或者自我约束来启动这些agent，但是有时候还是会免不了忘记。那么有没有办法让这种agent做成开机启动呢？下面提供两种Linux设置开机启动应用的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://chenzhijun.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://chenzhijun.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux cron clean log files older than N days</title>
    <link href="http://chenzhijun.me/2018/10/29/linux-crontab-clean-ndays-log/"/>
    <id>http://chenzhijun.me/2018/10/29/linux-crontab-clean-ndays-log/</id>
    <published>2018-10-29T14:14:21.000Z</published>
    <updated>2019-04-08T15:02:04.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用linux-crontab定时清理n天前的日志文件"><a href="#使用linux-crontab定时清理n天前的日志文件" class="headerlink" title="使用linux crontab定时清理n天前的日志文件"></a>使用linux crontab定时清理n天前的日志文件</h1><p>最近有个需求，需要在linux机器上定时执行清理n天前的日志文件。其实我开始做了个更有意思的清理工具，根据alertmanager做webhook，然后在每个Linux机器上开启一个agent，收到请求再执行清理。不过使用crontab也是一个非常有用的工具。</p><p>crontab是Linux的一个守护进程，定时执行的工具。详细的内容可以使用<code>man crontab</code>查看。废话不多说，直接来看怎么使用它。只有用起来，才是属于自己的。<br><a id="more"></a></p><h2 id="查看当前有哪些定时任务"><a href="#查看当前有哪些定时任务" class="headerlink" title="查看当前有哪些定时任务"></a>查看当前有哪些定时任务</h2><p><code>crontab -l</code> 查看当前已经存在的定时任务。</p><p><img src="/images/qiniu/2018-10-29-22-26-45.png" alt="2018-10-29-22-26-45"></p><p>可以看到，你需要的就是准备一个shell脚本（任务指令），一个定时时间（执行频率），一条触发指令（程序入口）。<br>准备好这三个东西就可以。</p><p>下面我们以一个简单的需求来演示。</p><p>需要删除 <em>/data</em> 目录下文件名存在的带 <em>log</em> 的文件，修改这些文件的大小为0。</p><h2 id="设置一个新的定时任务"><a href="#设置一个新的定时任务" class="headerlink" title="设置一个新的定时任务"></a>设置一个新的定时任务</h2><p><code>crontab -e</code> 可以进入crontab编辑页面。将带‘*’的那行复制成新的行，如下：</p><p><img src="/images/qiniu/2018-10-29-22-33-33.png" alt="2018-10-29-22-33-33"></p><p>可能会问，前面的‘*’的时间怎么设置。可以使用<code>cat /etc/crontab</code>查看解释：</p><p><img src="/images/qiniu/2018-10-29-22-35-12.png" alt="2018-10-29-22-35-12"></p><p>之前的需求，我将<code>clean3dayslog.sh</code>文件放到<code>/root</code>目录下，然后执行文件，clear3dayslogs.sh的内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">find /data -mtime +3 -name "*.log*"|grep rtlog|xargs -i truncate -s 0 &#123;&#125;</span><br></pre></td></tr></table></figure><p>这个demo比较简单，不过用处确实很大，一般清除的都在开发环境上，日志输出。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用linux-crontab定时清理n天前的日志文件&quot;&gt;&lt;a href=&quot;#使用linux-crontab定时清理n天前的日志文件&quot; class=&quot;headerlink&quot; title=&quot;使用linux crontab定时清理n天前的日志文件&quot;&gt;&lt;/a&gt;使用linux crontab定时清理n天前的日志文件&lt;/h1&gt;&lt;p&gt;最近有个需求，需要在linux机器上定时执行清理n天前的日志文件。其实我开始做了个更有意思的清理工具，根据alertmanager做webhook，然后在每个Linux机器上开启一个agent，收到请求再执行清理。不过使用crontab也是一个非常有用的工具。&lt;/p&gt;
&lt;p&gt;crontab是Linux的一个守护进程，定时执行的工具。详细的内容可以使用&lt;code&gt;man crontab&lt;/code&gt;查看。废话不多说，直接来看怎么使用它。只有用起来，才是属于自己的。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://chenzhijun.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://chenzhijun.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>conclusion-201809</title>
    <link href="http://chenzhijun.me/2018/09/08/conclusion-201809/"/>
    <id>http://chenzhijun.me/2018/09/08/conclusion-201809/</id>
    <published>2018-09-08T06:53:15.000Z</published>
    <updated>2019-04-08T15:02:04.802Z</updated>
    
    <content type="html"><![CDATA[<p>#</p><p>1: linux命令行替换文本中的字符串。<code>sed -i &quot;s/100.69.224.18:10099/100.69.224.27:9999/g&quot; /file.xml</code></p><p>2: rancher平台的相关监控。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql:</span><br><span class="line"></span><br><span class="line">获取mysql用户是否可以远程登陆</span><br><span class="line">CREATE USER &apos;exporter&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;exporter&apos;;</span><br><span class="line">GRANT PROCESS, REPLICATION CLIENT ON *.* TO &apos;exporter&apos;@&apos;localhost&apos;;</span><br><span class="line">GRANT SELECT ON cattle.* TO &apos;exporter&apos;@&apos;%&apos; with MAX_USER_CONNECTIONS 3;</span><br><span class="line">help flush;</span><br><span class="line">show grants for &apos;exporter&apos;@&apos;localhost&apos;;</span><br><span class="line">flush PRIVILEGES;</span><br><span class="line"></span><br><span class="line">docker run -d -p 9104:9104 -e DATA_SOURCE_NAME=&quot;exporter:exporter@(127.0.0.1:3306)/&quot; prom/mysqld-exporter:latest</span><br><span class="line"></span><br><span class="line">haproxy:</span><br><span class="line"></span><br><span class="line">docker run -d -p 9101:9101 prom/haproxy-exporter:latest --haproxy.scrape-uri=&quot;http://www.haproxy.com/haproxy?stats;csv&quot;</span><br></pre></td></tr></table></figure><p>3: sort 根据低三列排序</p><p>docker stats -a –no-stream |awk ‘{print $1,$8,$3,$4}’|sort -k 2,4n</p><p>sort -k a,bn<br>a为第几列，b为几个字符，n为数字比较，1234，1222，从第一个字符开始，到第四个字符都会比较</p><p>4: 给基础镜像安装常用工具：ping,curl,wget,netstat。一般源里面就已经包含了，ping的源为：<code>apt install inetutils-ping或者apt install net-tools</code></p><p>5：某次给rancher平台扩容，直接将主机加上之后，将原来的应用直接*2启动，平台爆掉了。server不到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#&lt;/p&gt;
&lt;p&gt;1: linux命令行替换文本中的字符串。&lt;code&gt;sed -i &amp;quot;s/100.69.224.18:10099/100.69.224.27:9999/g&amp;quot; /file.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2: rancher平台的相关
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux 挂载磁盘</title>
    <link href="http://chenzhijun.me/2018/07/26/linux-mount-disk/"/>
    <id>http://chenzhijun.me/2018/07/26/linux-mount-disk/</id>
    <published>2018-07-26T05:18:45.000Z</published>
    <updated>2019-04-08T15:02:04.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux-挂载磁盘"><a href="#linux-挂载磁盘" class="headerlink" title="linux 挂载磁盘"></a>linux 挂载磁盘</h1><p>最近需要挂载磁盘，记录一下。</p><p>一个500G的磁盘。使用<code>fdisk</code>查看，如果没有就使用<code>lsblk</code>可以查看到现在有哪个磁盘没有挂载。</p><p>之后就是挂载操作了。切换成root用户,查看磁盘使用的卷类型：ext4 , xfs<br><a id="more"></a><br><img src="/images/qiniu/2018-07-26-13-23-23.png" alt="2018-07-26-13-23-23"></p><p>1: 然后使用<code>mkfs -t xfs（或ext4） /dev/vdb</code>  </p><p>xfs,ext4 ：是指格式化成什么磁盘类型</p><p>/dev/vdb ：是指要挂载的磁盘</p><p>2: 挂载点 <code>mkdir /data</code> ，建立一个挂载点</p><p>3：挂载磁盘<code>mount /dev/vdb /data</code> 将刚刚格式化的磁盘挂载到<code>/data</code>目录</p><p>4：修改<code>/etc/fstab</code>文件，复制一行然后修改就可以了，将最后一个数字改为2。</p><p><img src="/images/qiniu/2018-07-26-13-33-04.png" alt="2018-07-26-13-33-04"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux-挂载磁盘&quot;&gt;&lt;a href=&quot;#linux-挂载磁盘&quot; class=&quot;headerlink&quot; title=&quot;linux 挂载磁盘&quot;&gt;&lt;/a&gt;linux 挂载磁盘&lt;/h1&gt;&lt;p&gt;最近需要挂载磁盘，记录一下。&lt;/p&gt;
&lt;p&gt;一个500G的磁盘。使用&lt;code&gt;fdisk&lt;/code&gt;查看，如果没有就使用&lt;code&gt;lsblk&lt;/code&gt;可以查看到现在有哪个磁盘没有挂载。&lt;/p&gt;
&lt;p&gt;之后就是挂载操作了。切换成root用户,查看磁盘使用的卷类型：ext4 , xfs&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://chenzhijun.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://chenzhijun.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows使用sshkey连接GitHub</title>
    <link href="http://chenzhijun.me/2018/07/17/windows-connect-github-with-sshkey/"/>
    <id>http://chenzhijun.me/2018/07/17/windows-connect-github-with-sshkey/</id>
    <published>2018-07-17T01:27:38.000Z</published>
    <updated>2019-04-08T15:02:04.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows使用sshkey连接GitHub"><a href="#Windows使用sshkey连接GitHub" class="headerlink" title="Windows使用sshkey连接GitHub"></a>Windows使用sshkey连接GitHub</h1><p>经常连接github上传东西，经常push的时候需要输入用户名和密码。下面是使用ssh-key免密的方式访问自己的github仓库。</p><p>首先在本地生成ssh-key:</p><p>进入到<code>~/</code>,用户根目录，查看<code>.ssh</code>文件夹是否有相关的公钥私钥<br>如果没有新生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@yy.com&quot;</span><br></pre></td></tr></table></figure><p>之后再打开<code>~/.ssh/id_rsa.pub</code>拿到公钥内容，复制所有内容；</p><p>在github找到设置，add-sshkey，新建一个ssh-key。将内容粘贴进去。</p><p>之后再本地的git仓库下使用：</p><p><code>ssh -T git@github.com</code></p><p>进行验证。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Windows使用sshkey连接GitHub&quot;&gt;&lt;a href=&quot;#Windows使用sshkey连接GitHub&quot; class=&quot;headerlink&quot; title=&quot;Windows使用sshkey连接GitHub&quot;&gt;&lt;/a&gt;Windows使用sshkey连接
      
    
    </summary>
    
      <category term="ssh" scheme="http://chenzhijun.me/categories/ssh/"/>
    
    
      <category term="github" scheme="http://chenzhijun.me/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>使用Ansible批量操作服务器</title>
    <link href="http://chenzhijun.me/2018/07/16/how-to-use-ansible-to-do-something/"/>
    <id>http://chenzhijun.me/2018/07/16/how-to-use-ansible-to-do-something/</id>
    <published>2018-07-16T14:23:51.000Z</published>
    <updated>2019-04-08T15:02:04.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Ansible批量操作服务器"><a href="#使用Ansible批量操作服务器" class="headerlink" title="使用Ansible批量操作服务器"></a>使用Ansible批量操作服务器</h1><p>Anbible 是干嘛的？对于一个非专业运维人士（我）来说，它就是我批量操作服务器的一个神器。试想一个场景：公司内部DNS还未搭建好，业务系统使用了域名做请求，这个时候需要你将域名制定到某台机器上，你这个时候就只能修改hosts文件了。嗯，如果是一两台服务器就算了，大不了手动ssh上去改一改，但是如果是10台了？10台不够，100台了？这个时候怎么办？你可能说我召集了一帮兄弟，大家一人改几个。OK，好不容易你改完了，这个时候业务跟你说，嗯，那台服务器挂了，不稳定，暂时换到另一台服务器上另一个IP地址。兄弟，听说醉经淘宝刀打折，买一把吧。哈哈</p><p>但是如果这个时候我们使用ansible，这个时候你就可以早点干完，早点回家陪老婆孩子了。接下来我们看看怎么使用ansible，请注意，我只是说怎么使用，是的，怎么使用，没有任何理论，不会讲解任何深的东西，只是用而已。<br><a id="more"></a><br>1：批量操作服务器。</p><p>ansible的一个简单目录结构：<br><img src="/images/qiniu/2018-07-16-22-34-50.png" alt="2018-07-16-22-34-50"></p><p><code>install.yml</code>文件内容：</p><p><img src="/images/qiniu/2018-07-16-22-36-22.png" alt="2018-07-16-22-36-22"></p><!--><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: all </span><br><span class="line">  remote_user: rhlog</span><br><span class="line">  gather_facts: no</span><br><span class="line">  roles:</span><br><span class="line">    - role: oam</span><br><span class="line">      become: yes</span><br><span class="line">      become_method: su</span><br><span class="line">      become_user: root</span><br></pre></td></tr></table></figure><p><--><p></p><p><code>hosts</code> 文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10.0.80.34 ansible_become=true ansible_become_method=su ansible_user=ssh_user ansible_ssh_pass=&quot;password&quot; ansible_become_pass=&quot;ax=n@#*!EM&quot; ansible_become_user=root</span><br><span class="line">10.07.80.37 ansible_become=true ansible_become_method=su ansible_user=ssh_user ansible_ssh_pass=&quot;W)PIukAa&quot; ansible_become_pass=&quot;r.*o)Hg!z&quot; ansible_become_user=root</span><br></pre></td></tr></table></figure><p>这两个是ansible的根目录里面比较重要的文件。install.yml里面remote_user是指登录到服务器的用户，通常大家不会让root用户远程登录的。roles是指在roles文件里面有哪些角色，你要用使用哪个角色。hosts文件一般保存的账号密码。按照这个模式登录就好了。之后我会提供这个安装包，大家可以自己照着改。哈哈。</p><p>oam角色里文件内容为：<br><img src="/images/qiniu/2018-07-16-22-41-50.png" alt="2018-07-16-22-41-50"><br>主要看tasks目录里面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"># tasks file for oam</span><br><span class="line">- name: upload file</span><br><span class="line">  copy: src=/app/installation/resource/moving/test/roles/oam/files/data.sh dest=/home/data.sh mode=755</span><br><span class="line">- name: excute </span><br><span class="line">  shell:  bash /home/data.sh</span><br><span class="line">- name: find file </span><br><span class="line">  find:</span><br><span class="line">    paths: /home/</span><br><span class="line">    patterns: &quot;*.log&quot;</span><br><span class="line">    recurse: no</span><br><span class="line">  register: file_2_fetch</span><br><span class="line">- name: fetch</span><br><span class="line">  fetch:</span><br><span class="line">    src: &quot;&#123;&#123; item.path &#125;&#125;&quot;</span><br><span class="line">    dest: /home/diskdata/</span><br><span class="line">    flat: yes</span><br><span class="line">  with_items: &quot;&#123;&#123; file_2_fetch.files &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><!--><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># !/bin/bash</span><br><span class="line">name=$(hostname -i)</span><br><span class="line">file=$&#123;name%% *&#125;</span><br><span class="line">df -h &gt;/home/rhlog/$file.log</span><br></pre></td></tr></table></figure><p><--><br>在ansible根目录我怎么使用了？<code>ansible-playbook -i hosts install.yml</code> 我的这个程序就是将files目录下的data.sh上传到hosts里面的所有主机中，然后执行data.sh，将<code>df -h</code>的内容输出到<code>ip.log</code>文件中，然后将文件下载到本地<code>/home/diskdata</code>中。这样就相当于批量操作了所有的机器。<p></p><p>另外一个使用方式，不使用上面那种方式，而是直接使用命令行的方式：</p><p>1： 判断所有机器是否可以访问某个地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -i hosts -m get_url -a &quot;url=http://192.168.11.32:8088/srv/releaseService?wsdl dest=./&quot;</span><br></pre></td></tr></table></figure><p>2: 判断所有机器是否可以ping通某个地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -i hosts -m shell -a &quot;ping -c 3 10.7.18.3&quot;</span><br></pre></td></tr></table></figure><p>3: 查找所有机器上某个应用是否启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -i hosts -m shell -a &quot;ps -ef | grep haproxy | grep -v grep&quot;</span><br></pre></td></tr></table></figure><p>4: 判断所有机器能否连通某个端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -i hosts -m shell -a &quot;telnet 192.167.180.3 25&quot;</span><br></pre></td></tr></table></figure><p>5: 批量修改某个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -i ./hosts -s -m shell -a &quot;echo \&quot;127.0.0.1 test.local.com\&quot; &gt;&gt; /etc/hosts&quot;</span><br></pre></td></tr></table></figure><p>ps:</p><p><code>-s</code>,是指使用root账户</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Ansible批量操作服务器&quot;&gt;&lt;a href=&quot;#使用Ansible批量操作服务器&quot; class=&quot;headerlink&quot; title=&quot;使用Ansible批量操作服务器&quot;&gt;&lt;/a&gt;使用Ansible批量操作服务器&lt;/h1&gt;&lt;p&gt;Anbible 是干嘛的？对于一个非专业运维人士（我）来说，它就是我批量操作服务器的一个神器。试想一个场景：公司内部DNS还未搭建好，业务系统使用了域名做请求，这个时候需要你将域名制定到某台机器上，你这个时候就只能修改hosts文件了。嗯，如果是一两台服务器就算了，大不了手动ssh上去改一改，但是如果是10台了？10台不够，100台了？这个时候怎么办？你可能说我召集了一帮兄弟，大家一人改几个。OK，好不容易你改完了，这个时候业务跟你说，嗯，那台服务器挂了，不稳定，暂时换到另一台服务器上另一个IP地址。兄弟，听说醉经淘宝刀打折，买一把吧。哈哈&lt;/p&gt;
&lt;p&gt;但是如果这个时候我们使用ansible，这个时候你就可以早点干完，早点回家陪老婆孩子了。接下来我们看看怎么使用ansible，请注意，我只是说怎么使用，是的，怎么使用，没有任何理论，不会讲解任何深的东西，只是用而已。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://chenzhijun.me/categories/Linux/"/>
    
    
      <category term="Ansible" scheme="http://chenzhijun.me/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>2018-06月至07月的一些总结</title>
    <link href="http://chenzhijun.me/2018/07/16/2018-06and07-conclusion/"/>
    <id>http://chenzhijun.me/2018/07/16/2018-06and07-conclusion/</id>
    <published>2018-07-16T09:57:00.000Z</published>
    <updated>2019-04-08T15:02:04.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018-06月至07月的一些总结"><a href="#2018-06月至07月的一些总结" class="headerlink" title="2018-06月至07月的一些总结"></a>2018-06月至07月的一些总结</h1><p>最近好久都没有写博客了。其实最近做的事情都比较单调，就是迁移环境，不过再迁移环境中，我还是收获了很多我缺少的。单从非技术方面，我缺少勉才的那股韧劲（问题不会过夜），缺少华哥那种细致（仔细的做过一遍，还会仔细的检查一遍，不是那种大致检查，是那种一条一条的比对），当然我也看到有些同事的缺点也是我的缺点，有则改之。</p><p>在搬迁中，华哥是我们部的总负责人，他对所有的事情都会有把控，搞不定的事情都会找他。而且他总能找到合适的方法解决。最重要的是，我犯错他却从来没有指责过，只是说怎样弥补，然后跟我们说正确的方法，而后我觉得挺对不住他的。总会想着把事情再做好点。勉才是小组的执行人，执行人真的超级强，问题基本没过夜，总是在12点的时候或者第二天一早问他，他就说问题解决了。。简直了。</p><p>这次搬迁我们是轮值的，也就是一开始将所有任务分配好，然后各自自己实验一次，写下步骤，下一轮再给另一个人按照写的步骤实行一次，这样来回3轮。最后基本上，步骤文档就没啥问题了。任何人都可以按照文档完整的搭出系统。<br><a id="more"></a><br>这个过程会遇到一些问题，有些已经遗忘，有些所幸有所备份。</p><p>Q: Docker 新镜像里面脚本无权限<br>A: 这个问题是脚本在windows传递到linux系统里面可能会出现，如果看ls，那么X的权限都没有了。这个时候解决拌饭就是<code>chmod a+x xxx.sh</code></p><p>Q: Docker 导入导出镜像<br>A：镜像保存：<code>docker save -o image-name.tar image-name:latest</code>，镜像导入：<code>docker load &lt; image-name.tar</code></p><p>Q: Docker 运行一个容器，执行完之后就退出<br>A: <code>docker run --rm image:latest bash/sh</code></p><p>Q: 从运行中的容器拷贝文件/文件夹到宿主机<br>A: docker cp container-id:/path/to/file /path/to/file</p><p>Q: 修改Docker的docker.service<br>A：<code>sudo cat /lib/systemd/system/docker.service</code>,可以使用<code>find / -name docker.service</code>来找到相应文件。修改这个文件之后需要重启daemon。<code>systemctl daemon-reload</code>。在这个文件里面可以增加docker的http,https的代理。</p><p>Q: 遇到Docker push镜像的时候出现https的问题<br>A: 在/etc/docker/daemon.json文件中增加：[“insecure-registries”:[“registry.cmrh.com:5000”]</p><p>Q: “can’t create unix socket /var/run/docker.sock: is a directory”<br>A: rm -fr  /var/run/docker.sock/</p><p>Q: 容器内部无法访问外网：<br>A:  1：检查容器内部的dns，cat /etc/resolv.conf<br>    2：检查宿主机的dns，</p><p>Q: ubuntu18 重启无法进入桌面<br>A: 选择联网，让其然后下载显卡厂商的驱动。</p><p>Q: Linux统计一个文件夹下某类文件的数量<br>A: ls ./* | wc -l</p><p>Q: 查找当前目录使用情况：<br>A: du -h</p><p>Q: 查看磁盘使用情况：<br>A: df -h</p><p>Q: 修改文件所有者<br>A: chown -R user:group xxFile/xxDir</p><p>Q: shell 文件分割字符串<br>A:如下面的代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> !/bin/bash</span><br><span class="line">name=$(hostname -i)</span><br><span class="line">file=$&#123;name%% *&#125; //分割空格</span><br><span class="line">df -h &gt;/home/rhlog/$file.log</span><br></pre></td></tr></table></figure><p>Q: find 使用</p><p>Q: AWK 使用，grep 使用</p><p>Q: haproxy 使用</p><p>Q: Ansible 直接使用命令</p><p>Q: Dockerfile 制作镜像</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2018-06月至07月的一些总结&quot;&gt;&lt;a href=&quot;#2018-06月至07月的一些总结&quot; class=&quot;headerlink&quot; title=&quot;2018-06月至07月的一些总结&quot;&gt;&lt;/a&gt;2018-06月至07月的一些总结&lt;/h1&gt;&lt;p&gt;最近好久都没有写博客了。其实最近做的事情都比较单调，就是迁移环境，不过再迁移环境中，我还是收获了很多我缺少的。单从非技术方面，我缺少勉才的那股韧劲（问题不会过夜），缺少华哥那种细致（仔细的做过一遍，还会仔细的检查一遍，不是那种大致检查，是那种一条一条的比对），当然我也看到有些同事的缺点也是我的缺点，有则改之。&lt;/p&gt;
&lt;p&gt;在搬迁中，华哥是我们部的总负责人，他对所有的事情都会有把控，搞不定的事情都会找他。而且他总能找到合适的方法解决。最重要的是，我犯错他却从来没有指责过，只是说怎样弥补，然后跟我们说正确的方法，而后我觉得挺对不住他的。总会想着把事情再做好点。勉才是小组的执行人，执行人真的超级强，问题基本没过夜，总是在12点的时候或者第二天一早问他，他就说问题解决了。。简直了。&lt;/p&gt;
&lt;p&gt;这次搬迁我们是轮值的，也就是一开始将所有任务分配好，然后各自自己实验一次，写下步骤，下一轮再给另一个人按照写的步骤实行一次，这样来回3轮。最后基本上，步骤文档就没啥问题了。任何人都可以按照文档完整的搭出系统。&lt;br&gt;
    
    </summary>
    
      <category term="总结" scheme="http://chenzhijun.me/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="http://chenzhijun.me/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
