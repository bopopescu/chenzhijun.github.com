<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>饺子</title>
  
  <subtitle>优于别人，并不高贵，真正的高贵应该是优于过去的自己</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="http://chenzhijun.me/"/>
  <updated>2019-12-03T12:27:49.748Z</updated>
  <id>http://chenzhijun.me/</id>
  
  <author>
    <name>陈志军</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ops 操作手册</title>
    <link href="http://chenzhijun.me/2019/12/01/kubernetes-tips/"/>
    <id>http://chenzhijun.me/2019/12/01/kubernetes-tips/</id>
    <published>2019-12-01T10:09:17.000Z</published>
    <updated>2019-12-03T12:27:49.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="给命令行增加快捷操作提示符"><a href="#给命令行增加快捷操作提示符" class="headerlink" title="给命令行增加快捷操作提示符"></a>给命令行增加快捷操作提示符</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source &lt;(kubectl completion bash) # setup autocomplete in bash into the current shell, bash-completion package should be installed first.echo "source &lt;(kubectl completion bash)" &gt;&gt; ~/.bashrc # add autocomplete permanently to your bash shell.</span><br><span class="line">alias k=kubectl</span><br><span class="line">complete -F __start_kubectl k</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="快速删除kubernetes资源"><a href="#快速删除kubernetes资源" class="headerlink" title="快速删除kubernetes资源"></a>快速删除kubernetes资源</h2><p>删除Terminating的pods</p><p><code>kubectl get pods --all-namespaces|grep Termi|awk &#39;{print &quot;kubectl -n &quot;$1&quot; delete pods &quot;$2&quot; --force --grace-period=0&quot;}&#39;|xargs -i echo {} &gt;delete.sh</code></p><p>缩容：</p><p><code>kcc scale --current-replicas=3 --replicas=0 deployment/orche</code></p><p>禁止主机调度：</p><p><code>kubectl uncordon NODE_NAME</code></p><p>显示节点ip：</p><p><code>kubectl get nodes -o wide --show-labels|awk &#39;{print $1&quot;\t&quot;$2&quot;\t&quot;$6}&#39;</code></p><p>删除标签：</p><p> <code>kubectl label node cnsz12.company.cn bad-</code></p><p>快速启动一个容器：</p><p> <code>kc run -i --tty --image harbor.com/library/busybox:1.28.4 dns-test --restart=Never --rm /bin/sh</code></p><h2 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">https://github.com/buger/goreplay</span><br><span class="line"></span><br><span class="line">./gor --input-raw :8080 --input-raw-track-response --output-stdout</span><br><span class="line"></span><br><span class="line">./gor --input-raw :8080 --output-stdout --http-allow-url RH_SSO/SeqSso.sso</span><br><span class="line"></span><br><span class="line">tcpdump -i eth0 dst host 10.70.1.76 and dst port 4410</span><br></pre></td></tr></table></figure><h2 id="文件底层无法编辑"><a href="#文件底层无法编辑" class="headerlink" title="文件底层无法编辑"></a>文件底层无法编辑</h2><p>chattr</p><h2 id="docker-容器网络工具镜像"><a href="#docker-容器网络工具镜像" class="headerlink" title="docker 容器网络工具镜像"></a>docker 容器网络工具镜像</h2><p><code>docker run -ti --net container:a967 nicolaka/netshoot:latest bash</code></p><!--jdk8u202之后，jvm获取cgroup的内存限制。kubectl get pods --all-namespaces|grep Termi|awk '{print "kubectl -n "$1" delete pods "$2" --force --grace-period=0"}'|xargs -i echo {} >delete.sh网络模型：ovs open vswitch ,daemonset启动openshift本身使用static podfind /sys/fs/cgroup/memory -type d | wc -lThe node was low on resource: memory. Container rdspm-app was using 2159200Ki, which exceeds its request of 0https://www.cnblogs.com/duanxz/p/10247494.htmlhttps://blog.csdn.net/weixin_33744141/article/details/86251459find . -amin -10 # 查找在系统中最后10分钟访问的文件find . -atime -2 # 查找在系统中最后48小时访问的文件find . -empty # 查找在系统中为空的文件或者文件夹find . -group cat # 查找在系统中属于 groupcat的文件find . -mmin -5 # 查找在系统中最后5分钟里修改过的文件find . -mtime -1 #查找在1天以内修改过的文件find . -mtime +7 #查找在7天以外修改过的文件find . -nouser #查找在系统中属于作废用户的文件find . -user fred #查找在系统中属于FRED这个用户的文件find . -type -f # 查找文件类型为普通文件的文件nginx 会话粘贴http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalivehttps://stackoverflow.com/questions/24453388/nginx-reverse-proxy-causing-504-gateway-timeouthttps://superuser.com/questions/1489355/website-shows-a-blank-page-when-opened-from-search-engines-or-href-links-but-wo应用频繁启动，导致k8s node节点not ready100.70.88.44PLEG unhealth   https://github.com/kubernetes/kubernetes/issues/45419https://github.com/kubernetes/kubernetes/issues/61117CREATE USER 'monitor'@'100.69.224.39' IDENTIFIED BY 'monitor1875' WITH MAX_USER_CONNECTIONS 3;GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'monitor'@'100.69.224.39';GRANT SELECT ON performance_schema.* TO 'monitor'@'100.69.224.39';go modhaproxy 支持websocketsed -i '/120/d’ known_hosts 替换120的行sed -n ‘/120/p' known_hosts  查找ruby的行git log --graph --pretty=oneline --abbrev-commitControl a 最开始，control e 最末尾nodeport,hostport-->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;给命令行增加快捷操作提示符&quot;&gt;&lt;a href=&quot;#给命令行增加快捷操作提示符&quot; class=&quot;headerlink&quot; title=&quot;给命令行增加快捷操作提示符&quot;&gt;&lt;/a&gt;给命令行增加快捷操作提示符&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;source &amp;lt;(kubectl completion bash) # setup autocomplete in bash into the current shell, bash-completion package should be installed first.echo &quot;source &amp;lt;(kubectl completion bash)&quot; &amp;gt;&amp;gt; ~/.bashrc # add autocomplete permanently to your bash shell.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias k=kubectl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;complete -F __start_kubectl k&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基础排序算法</title>
    <link href="http://chenzhijun.me/2019/09/13/datastruct-normal-sort-algorithm2/"/>
    <id>http://chenzhijun.me/2019/09/13/datastruct-normal-sort-algorithm2/</id>
    <published>2019-09-13T11:14:07.000Z</published>
    <updated>2019-12-03T12:27:49.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础排序算法2"><a href="#基础排序算法2" class="headerlink" title="基础排序算法2"></a>基础排序算法2</h1><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序的意义是将利用递归的思想，将一个大问题解决为可重复求解的小问题，最后合并这些小问题得出结果。<br>归并是直接数组对半分，分成两个子数组。然后对两个子数组再进行排序求解。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序：对半分成两个子数组，然后子数组再向下分，之后合并数组。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">3</span> / <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="number">1</span> / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        mergeSort2(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        mergeSort(a, 0, a.length - 1);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort2</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> middle = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        mergeSort2(arr, start, middle);</span><br><span class="line">        mergeSort2(arr, middle + <span class="number">1</span>, end);</span><br><span class="line">        merge2(arr, start, middle, end);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge2</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> middle, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用来存储的临时数组</span></span><br><span class="line">        <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[end - start + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//p q 两个指针，遍历arr</span></span><br><span class="line">        <span class="keyword">int</span> p = start;</span><br><span class="line">        <span class="keyword">int</span> q = middle + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//[0 , middle] 和 [middle+1 , end] 的数据分别赋值给新数组</span></span><br><span class="line">        <span class="keyword">while</span> (p &lt;= middle &amp;&amp; q &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[p] &lt;= arr[q]) &#123;</span><br><span class="line">                newArr[i++] = arr[p++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newArr[i++] = arr[q++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断两边谁还有剩余的数</span></span><br><span class="line">        <span class="comment">//1 假设左边有剩余的数</span></span><br><span class="line">        <span class="keyword">int</span> p1 = p;</span><br><span class="line">        <span class="keyword">int</span> q1 = middle;</span><br><span class="line">        <span class="comment">//2 判断是不是左边真的有剩余，下面的if可以判断出右边是不是有剩余，while中只会有一边清空时才会退出while</span></span><br><span class="line">        <span class="keyword">if</span> (q &lt;= end) &#123;</span><br><span class="line">            p1 = q;</span><br><span class="line">            q1 = end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将剩余的数填满新数组</span></span><br><span class="line">        <span class="keyword">while</span> (p1 &lt;= q1) &#123;</span><br><span class="line">            newArr[i++] = arr[p1++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将新数组（已排序）的值替换老数组的位置</span></span><br><span class="line">        <span class="comment">//这里要注意start-end之间的个数其实就是newArr数组的个数为end-start , 所以这里只能让idx最大为end-start 也相当于为循环end-start次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt;= end - start; idx++) &#123;</span><br><span class="line">            arr[idx + start] = newArr[idx];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> q = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(arr, start, q);</span><br><span class="line">        mergeSort(arr, q + <span class="number">1</span>, end);</span><br><span class="line">        merge(arr, start, q, end);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> middle, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] tmps = <span class="keyword">new</span> <span class="keyword">int</span>[end - start + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> p = start;</span><br><span class="line">        <span class="keyword">int</span> q = middle + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &lt;= middle &amp;&amp; q &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[p] &lt;= arr[q]) &#123;</span><br><span class="line">                tmps[i] = arr[p];</span><br><span class="line">                p++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmps[i] = arr[q];</span><br><span class="line">                q++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i1 = p;</span><br><span class="line">        <span class="keyword">int</span> j1 = middle;</span><br><span class="line">        <span class="keyword">if</span> (q &lt;= end) &#123;</span><br><span class="line">            i1 = q;</span><br><span class="line">            j1 = end;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i1 &lt;= j1) &#123;</span><br><span class="line">            tmps[i] = arr[i1];</span><br><span class="line">            i1++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= end - start; ++j) &#123;</span><br><span class="line">            arr[start + j] = tmps[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>也是归并排序的一种，不过快排采用的是先分区，再归并。快排采用的是找一个基准点，然后比较数组中数据的基准点找出分割点，以分割点来割分子数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快排序的思想就是,同一个数组,不需要额外的空间,</span></span><br><span class="line"><span class="comment"> * 最重要的部分是找出每个数据的应该放置的位置，这个位置的左边全小于它，右边全大于它，</span></span><br><span class="line"><span class="comment"> * 它是一个分割点，然后依次类推，每个数据都放到一个这样的位置，数组就拍好顺序了。</span></span><br><span class="line"><span class="comment"> * 快排序：O(nlogn)</span></span><br><span class="line"><span class="comment"> * 空间：O(1)</span></span><br><span class="line"><span class="comment"> * 稳定性：不稳定，因为两两交换嘛。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">3</span> / <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="number">1</span> / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        quickSort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = quickSortN2(arr, start, end);</span><br><span class="line"><span class="comment">//        int n = quickSortN3(arr, start, end);</span></span><br><span class="line">        quickSort(arr, start, n - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, n + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取末尾为参考值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">quickSortN2</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[end];<span class="comment">//要从尾部取这个参照点</span></span><br><span class="line">        <span class="keyword">int</span> p = start;<span class="comment">//定一个指针</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> q = start; q &lt;= end - <span class="number">1</span>; q++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[q] &lt; pivot) &#123;<span class="comment">//将p留在永远大于参考点的第一个位置</span></span><br><span class="line">                swap(arr, p, q);</span><br><span class="line">                p++;<span class="comment">//顺着左移，保持第一个位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**已经遍历完了p的位置，左边是小于参考点的数据，</span></span><br><span class="line"><span class="comment">         右边是大于参考点的数据，p的位置存放参考点，</span></span><br><span class="line"><span class="comment">         该位置就刚好变成了一个分割点。将一个大的分解了两个子问题，</span></span><br><span class="line"><span class="comment">         而子问题也可以重复刚刚的步骤，最后所有的数据都会待在那个最</span></span><br><span class="line"><span class="comment">         合适的位置，最后的顺序也就排列好了。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        swap(arr, p, end);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[p];</span><br><span class="line">        arr[p] = arr[q];</span><br><span class="line">        arr[q] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选第一个为参考值。注意返回的p-1的值</span></span><br><span class="line"><span class="comment">     * 比选最后一个值为参考值多了几次+,-的操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">quickSortN3</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[start];</span><br><span class="line">        <span class="keyword">int</span> p = start + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> q = start + <span class="number">1</span>; q &lt;= end; q++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[q] &lt; pivot) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[q];</span><br><span class="line">                arr[q] = arr[p];</span><br><span class="line">                arr[p] = temp;</span><br><span class="line">                p++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//p的位置是大于参考点的,因此要交换p-1的位置</span></span><br><span class="line">        swap(arr, start, p - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> p - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一版本（错误方法）</span></span><br><span class="line"><span class="comment">     * 有bug，当出现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * [8,1,9,12,6,0]  p=0;q=0</span></span><br><span class="line"><span class="comment">     * a: 1,8,9,12,6,0   p=1;q=1</span></span><br><span class="line"><span class="comment">     * b: 1,6,9,12,8,0   p=2;q=4</span></span><br><span class="line"><span class="comment">     * c: 1,6,0,12,8,9   p=3;q=5</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 这个时候返回p=3,最终的结果肯定不正确。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">quickSortN</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[start];</span><br><span class="line">        <span class="keyword">int</span> p = start;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> q = start; q &lt;= end; q++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[q] &lt; pivot) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[q];</span><br><span class="line">                arr[q] = arr[p];</span><br><span class="line">                arr[p] = temp;</span><br><span class="line">                p++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        arr[p] = pivot;</span></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>桶排序的一种特殊方式，数据必须是非负整数。桶排序的方式是将数据最小值和最大值均分为多个桶，把数据放到桶里面，然后依次取出桶中的数据。计数排序的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        countSort(a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计数排序就是遍历原始数组A找到最大值，然后以（最大值+1）的长度建立一个新数组B</span></span><br><span class="line"><span class="comment">     * 遍历数组A,每遍历A的一个数据a，在B中a的位置就+1；B[a]=B[a]+1</span></span><br><span class="line"><span class="comment">     * 遍历数组B获取B[a]之前[0-a]的所有数据个数，目前A中已经遍历过一次了，A中的数</span></span><br><span class="line"><span class="comment">     * 据在B中对应的下标中都会有值，统计B中a之前的所有个数，这样我们就能知道A中的数</span></span><br><span class="line"><span class="comment">     * 据a在A数组中应该在哪个位置。B遍历完之后，就相当于知道了a和小于a的所有数据的</span></span><br><span class="line"><span class="comment">     * 个数之和。</span></span><br><span class="line"><span class="comment">     * 新建一个数组C,长度和A一致，我们遍历一下A，取出数据A[i],数据A[i]在C中的位置</span></span><br><span class="line"><span class="comment">     * 应该为在数组B[A[i]]的值，即小于或等于数据A[i]的个数，之后将C[B[A[i]]-1]赋值为A[i]；</span></span><br><span class="line"><span class="comment">     * B[A[i]]为个数</span></span><br><span class="line"><span class="comment">     * B[A[i]]-1为数组实际下边，数组从0开始</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrA</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countSort</span><span class="params">(<span class="keyword">int</span>[] arrA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = arrA[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrA.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arrA[i] &gt; max) &#123;</span><br><span class="line">                max = arrA[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arrB = <span class="keyword">new</span> <span class="keyword">int</span>[max + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//第一步是找出相同值的个数，比如数组里面5的数据，有2个，那么newA中第5个位置为2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrA.length; i++) &#123;</span><br><span class="line">            arrB[arrA[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算数组中当前位置的数据有几个，比如数组中5的数据，那么从0-5，总共有多少个数字了？</span></span><br><span class="line">        <span class="comment">// 这个for循环就是计算总共的数字。计算出数字了之后，我们就知道，5在数组中顺序的位置了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arrB.length; i++) &#123;</span><br><span class="line">            arrB[i] = arrB[i] + arrB[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个新数组，长度跟要排序的数组一样，当我们遍历一下要排序数组，取出里面的数据</span></span><br><span class="line">        <span class="comment">//根据取出的值，在newA中下表为值的位置取出个数,就是这个新数组的位置。</span></span><br><span class="line">        <span class="keyword">int</span>[] arrC = <span class="keyword">new</span> <span class="keyword">int</span>[arrA.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrC.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> position = arrB[arrA[i]] - <span class="number">1</span>;<span class="comment">//arrB 里面存储的是个数，在新数组就是位置，减1是因为从0计算嘛，所以减1</span></span><br><span class="line">            arrC[position] = arrA[i];<span class="comment">// position 位置要等于arr[i]，取出了一个值所以就</span></span><br><span class="line">            arrB[arrA[i]]--;<span class="comment">//取出一个数据了，个数就少一个了。</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrA.length; i++) &#123;</span><br><span class="line">            arrA[i] = arrC[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="几种基础排序算法比较"><a href="#几种基础排序算法比较" class="headerlink" title="几种基础排序算法比较"></a>几种基础排序算法比较</h2><p><img src="/images/qiniu/2019-09-13-19-14-25.png" alt="几种基础排序算法比较"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础排序算法2&quot;&gt;&lt;a href=&quot;#基础排序算法2&quot; class=&quot;headerlink&quot; title=&quot;基础排序算法2&quot;&gt;&lt;/a&gt;基础排序算法2&lt;/h1&gt;&lt;h2 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h2&gt;&lt;p&gt;归并排序的意义是将利用递归的思想，将一个大问题解决为可重复求解的小问题，最后合并这些小问题得出结果。&lt;br&gt;归并是直接数组对半分，分成两个子数组。然后对两个子数组再进行排序求解。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chenzhijun.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序算法" scheme="http://chenzhijun.me/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>基础排序算法</title>
    <link href="http://chenzhijun.me/2019/09/10/datastruct-normal-sort-algorithm/"/>
    <id>http://chenzhijun.me/2019/09/10/datastruct-normal-sort-algorithm/</id>
    <published>2019-09-10T13:35:29.000Z</published>
    <updated>2019-12-03T12:27:49.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础排序算法"><a href="#基础排序算法" class="headerlink" title="基础排序算法"></a>基础排序算法</h1><p>每次一看算法就是，嗯，看懂了，每次自己写代码就是，嗯？这怎么写？？ 本文将自己理解的冒泡排序，插入排序，选择排序三种做一个总结。</p><a id="more"></a><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序其实很形象，就是每次选最大，或者最小的值，与第一个值交换，逐次冒泡。就像水里面的泡泡，轻的泡泡总会浮起来一样。</p><p>实现方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubblingSort(<span class="keyword">int</span>[] a) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; a.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; a[j]) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = a[i];</span><br><span class="line">                a[i] = a[j];</span><br><span class="line">                a[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"第"</span>+i+<span class="string">"次:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> an : a) &#123;</span><br><span class="line">            System.err.print(an + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设有原始数组a,每次冒泡的结果就如下，我们这里选的是从大到小冒泡：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">第0次:</span><br><span class="line">12157935</span><br><span class="line">第1次:</span><br><span class="line">12915735</span><br><span class="line">第2次:</span><br><span class="line">12971535</span><br><span class="line">第3次:</span><br><span class="line">12975135</span><br><span class="line">第4次:</span><br><span class="line">12975513</span><br><span class="line">第5次:</span><br><span class="line">12975531</span><br><span class="line">第6次:</span><br><span class="line">12975531</span><br></pre></td></tr></table></figure><p>冒泡排序的时间复杂度为O(n^2) ; 空间复杂度为O(1);是一个稳定算法。</p><blockquote><p>稳定的意义是指，两个相同的数据，它们排序完之后相对位置不变，比如上面数组的5[a],5[b],排序完之后不会出现5[b],5[a]; a,b为他们的相对位置。</p></blockquote><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序的意思就是有一个数组，你可以假定左边的部分是有序的，这个时候你从右边无序的数据中，找出一个，然后将其插入到有序数据的数组中。<br>有点类似打扑克，如果一次性将牌发完，你总得给牌排个序吧，比如从左到右，左边第一张你可以假设这一张是有序的，从第二张开始，你就比较一下第二张和第一张谁大，小的就往前面移动，大的就往后面移动。如果是第三张，依次与第二张比，比完再与第一张比。所以第n张就是与n-1比，再与n-2,n-3，…比较，一直比到有一张比它小的，那么这个时候，就位置就对了。看起来就像是我们将第n张牌，插入到了之前有序的一个数组中。</p><p>算法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] b = insertSort(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : b) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">"\t"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"第"</span> + i + <span class="string">"次,"</span> + <span class="string">"arr[i]为:"</span> + arr[i] + <span class="string">" :"</span>);</span><br><span class="line">        printArr(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                arr[j - <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">第1次,arr[i]为:7 :</span><br><span class="line">17591235</span><br><span class="line">17591235</span><br><span class="line">第2次,arr[i]为:5 :</span><br><span class="line">17591235</span><br><span class="line">15791235</span><br><span class="line">第3次,arr[i]为:9 :</span><br><span class="line">15791235</span><br><span class="line">15791235</span><br><span class="line">第4次,arr[i]为:12 :</span><br><span class="line">15791235</span><br><span class="line">15791235</span><br><span class="line">第5次,arr[i]为:3 :</span><br><span class="line">15791235</span><br><span class="line">13579125</span><br><span class="line">第6次,arr[i]为:5 :</span><br><span class="line">13579125</span><br><span class="line">13557912</span><br></pre></td></tr></table></figure><p>插入牌的时间复杂度为：O(n^2), 空间复杂度为O(1), 是一个稳定排序算法。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序其实就是你拿了一手牌，每次你扫描一遍，拿到最小的那张，把它跟第一张交换下位置。第一次交换第一张位置的，第二次交换第二张位置的，之后依次交换到最后一张。这个咋一看挺像冒泡的，但是远离不相同，冒泡是每次都会有顺移的操作，比如<code>2,3,4,5,1</code>；如果你选了1，它要跟5做比较，交换：<code>2,3,4,1,5</code>；跟4做比较，交换<code>2,3,1,4,5</code>。而选择排序则是：<code>2,3,4,5,1</code>；你先选最小的1，然后跟第一个位置的2做交换变成了<code>1,3,4,5,2</code>,有没有发现，其实只做了一次交换。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] b = selectSort(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : b) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">"\t"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i;<span class="comment">//初始化j的位置</span></span><br><span class="line">        <span class="keyword">int</span> k = j;<span class="comment">//数组中值最小的数的位置</span></span><br><span class="line">        <span class="keyword">int</span> tmp = arr[i];<span class="comment">//用来存储每次遍历的最小值</span></span><br><span class="line">        <span class="keyword">for</span> (; j &lt; arr.length; j++) &#123;<span class="comment">//遍历数组从i开始，0-i之间的数据可以当做是已经选择了最小的有序数组</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; tmp) &#123;</span><br><span class="line">                tmp = arr[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[k] = arr[i];<span class="comment">//交换当前i的位置和最小值的位置k两个数据</span></span><br><span class="line">        arr[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择排序算法的时间复杂度为：O(n^2);空间复杂度为：O(1); 稳定性为：不稳定。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础排序算法&quot;&gt;&lt;a href=&quot;#基础排序算法&quot; class=&quot;headerlink&quot; title=&quot;基础排序算法&quot;&gt;&lt;/a&gt;基础排序算法&lt;/h1&gt;&lt;p&gt;每次一看算法就是，嗯，看懂了，每次自己写代码就是，嗯？这怎么写？？ 本文将自己理解的冒泡排序，插入排序，选择排序三种做一个总结。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chenzhijun.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序算法" scheme="http://chenzhijun.me/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构单链表的一些简单操作</title>
    <link href="http://chenzhijun.me/2019/09/09/datastruct-list-normal-action/"/>
    <id>http://chenzhijun.me/2019/09/09/datastruct-list-normal-action/</id>
    <published>2019-09-09T12:42:20.000Z</published>
    <updated>2019-12-03T12:27:49.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构单链表的一些简单操作"><a href="#数据结构单链表的一些简单操作" class="headerlink" title="数据结构单链表的一些简单操作"></a>数据结构单链表的一些简单操作</h1><p>Node的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node nextNode;</span><br><span class="line">    <span class="keyword">private</span> T v;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.v = v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node nextNode, T v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextNode = nextNode;</span><br><span class="line">        <span class="keyword">this</span>.v = v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNextNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextNode</span><span class="params">(Node nextNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextNode = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setV</span><span class="params">(T v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.v = v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAllNode</span><span class="params">()</span> </span>&#123;<span class="comment">//我这里是有一个headNode不做数据存储</span></span><br><span class="line">        Node tmpN = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">while</span> (tmpN.getNextNode() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(tmpN.getNextNode().getV());</span><br><span class="line">            System.out.print((tmpN.getNextNode().getNextNode() == <span class="keyword">null</span> ? <span class="string">""</span> : <span class="string">","</span>));</span><br><span class="line">            tmpN = tmpN.getNextNode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p>平常一条链表大多是<code>a-&gt;b-&gt;c-&gt;d</code>;链表反转后为:<code>a&lt;-b&lt;-c&lt;-d</code>;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun.gk_time_datastruct.chapter7;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseNode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Node head = <span class="keyword">new</span> Node();</span><br><span class="line">        Node tmp = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Node newNode = <span class="keyword">new</span> Node();</span><br><span class="line">            newNode.setV(i);</span><br><span class="line">            tmp.setNextNode(newNode);</span><br><span class="line">            tmp = tmp.getNextNode();</span><br><span class="line">        &#125;</span><br><span class="line">        head.printAllNode();</span><br><span class="line">        System.out.println();</span><br><span class="line">        Node node = reverseNode(head);</span><br><span class="line">        node.printAllNode();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反转链表实际的代码</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">reverseNode</span><span class="params">(Node pHead)</span> </span>&#123;</span><br><span class="line">        Node prev = <span class="keyword">null</span>;</span><br><span class="line">        Node pNode = pHead.getNextNode();</span><br><span class="line">        <span class="keyword">while</span> (pNode!= <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node next = pNode.getNextNode();</span><br><span class="line">            pNode.setNextNode(prev);</span><br><span class="line">            prev = pNode;</span><br><span class="line">            pNode = next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node reverseNode = <span class="keyword">new</span> Node();</span><br><span class="line">        reverseNode.setNextNode(prev);</span><br><span class="line">        <span class="keyword">return</span> reverseNode;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先用<code>prev</code>，<code>pNode</code>作两个指针，prev 指的是前一个node，pNode 是指当前node。可以这样理解，pNode指向链表遍历时的当前node，prev指向pNode的链条中前一个节点。</p><p>我们先用一个临时变量<code>next</code>存储当前pNode的下一个节点位置，然后将当前pNode的位置反转，设置为prev的位置，然后prev移动到pNode的位置上，这样pNode的这个位置就存在了prev，所以pNode可以继续向下遍历节点，而我们之前刚好将pNode的下一个节点存储在了next临时变量中，所以有 pNode=next ；一直遍历到pNode为null，说明链表已经遍历完了。这时如果不喜欢头节点就可以直接返回prev，如果喜欢设置头节点，就可以new一个新节点，然后将nextNode设置为prev。这样一条新的链就完成了，链表就被反转了。</p><p>一开始初始化，普通链表：</p><p><img src="/images/qiniu/2019-09-09-20-04-33.png" alt="2019-09-09-20-04-33"></p><p>之后我们开始做操作，先获取0-next节点位置，然后将1-nextNode指向prev所指向的位置，之后2-prev指向pNode所指向的位置，之后3-pNode指向next。</p><p><img src="/images/qiniu/2019-09-09-20-15-02.png" alt="2019-09-09-20-15-02"></p><p>这样一直循环后，我们就可以实际得到一个反转如下的链表：</p><p><img src="/images/qiniu/2019-09-09-20-20-10.png" alt="2019-09-09-20-20-10"></p><p>可以看到，其实如果直接返回prev就已经是一个反转链表了。</p><p>复杂度分析：</p><p>时间复杂度：O(n)，取决与链表长度；</p><p>空间复杂度：O(1)，只新建了pNode,next,prev指针变量,没有额外空间的；</p><h2 id="两个排序链表的合并"><a href="#两个排序链表的合并" class="headerlink" title="两个排序链表的合并"></a>两个排序链表的合并</h2><p>链表的操作中还有一个是假设两个有序链表的合并，如果[1,3,5],[2,4,6,7]合并为[1,2,3,4,5,6,7]，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">mergeNode1AndNode2</span><span class="params">(Node head1, Node head2)</span> </span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node();</span><br><span class="line">        Node head = node;</span><br><span class="line">        Node tmp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head1 != <span class="keyword">null</span> &amp;&amp; head2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">int</span>) head1.getV() &lt; (<span class="keyword">int</span>) head2.getV()) &#123;</span><br><span class="line">                tmp = head1;</span><br><span class="line">                head1 = head1.getNextNode();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp = head2;</span><br><span class="line">                head2 = head2.getNextNode();</span><br><span class="line">            &#125;</span><br><span class="line">            node.setNextNode(tmp);</span><br><span class="line">            node = node.getNextNode();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        if (head1 != null) &#123;</span></span><br><span class="line"><span class="comment">//            node.setNextNode(head1);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if (head2 != null) &#123;</span></span><br><span class="line"><span class="comment">//            node.setNextNode(head2);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        node.setNextNode(head1 != <span class="keyword">null</span> ? head1 : head2);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们肯定都是要循环链表的，那么循环到一个链表为空的时候，将另一个链表的值加进来即可。</p><p>如<code>while (head1 != null &amp;&amp; head2 != null)</code>这里就是判断链表1和链表2两者看是否为空。如果有一个为空的条件，就退出循环。</p><p>你可能看到<code>node.setNextNode(head1 != null ? head1 : head2);</code>这句话的作用其实就是说，如果head1不为空，那我们就将head1加入到设置为nextNode，反之就是head2。</p><p>合并两个列表的关键点在于，一个要判断两个链表是否为空，这是退出链表循环的条件。（当然如果是个循环链表，这里可能就得改一下了）。另外就是，当链表退出后，要记得将另一个非空链表的剩余值加入到新链中，保证不丢值。</p><h2 id="删除链表倒数第-n-个结点"><a href="#删除链表倒数第-n-个结点" class="headerlink" title="删除链表倒数第 n 个结点"></a>删除链表倒数第 n 个结点</h2><p>有一个链表，然后需要删除链表的倒数第n个位置的节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除倒数第n个位置的node</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">removeNode</span><span class="params">(Node node, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0</span> || node.getNextNode() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"i为0或者node为空，不改动，i从1开始"</span>);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node tmp = node;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        tmp = tmp.getNextNode();</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//长度不够</span></span><br><span class="line">            System.out.println(<span class="string">"node长度不够,不改动"</span>);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    Node n0 = node;</span><br><span class="line">    Node n1 = node;</span><br><span class="line">    <span class="comment">//两个指针，一个先走i步，另一个再开始走</span></span><br><span class="line">    <span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        tmp = tmp.getNextNode();</span><br><span class="line">        n0 = n1;</span><br><span class="line">        n1 = n1.getNextNode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n0.setNextNode(n1.getNextNode());</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表中间节点"><a href="#链表中间节点" class="headerlink" title="链表中间节点"></a>链表中间节点</h2><p>计算链表中间节点位置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">computeNode</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    Node quick = head.getNextNode();</span><br><span class="line">    Node slow = head.getNextNode();</span><br><span class="line">    <span class="keyword">while</span> (quick != <span class="keyword">null</span> &amp;&amp; quick.getNextNode() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        slow = slow.getNextNode();</span><br><span class="line">        quick = quick.getNextNode().getNextNode();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(slow.getV());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="是否为循环链表"><a href="#是否为循环链表" class="headerlink" title="是否为循环链表"></a>是否为循环链表</h2><p>判断一个链表是否为循环链表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCycleList2</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    Set&lt;Node&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (set.contains(head)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set.add(head);</span><br><span class="line">            head = head.getNextNode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCycleList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    Node n1 = head;</span><br><span class="line">    Node n2 = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n1 != <span class="keyword">null</span> &amp;&amp; n2.getNextNode() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        n1 = n1.getNextNode();</span><br><span class="line">        n2 = n2.getNextNode().getNextNode();</span><br><span class="line">        <span class="keyword">if</span> (n1 == n2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构单链表的一些简单操作&quot;&gt;&lt;a href=&quot;#数据结构单链表的一些简单操作&quot; class=&quot;headerlink&quot; title=&quot;数据结构单链表的一些简单操作&quot;&gt;&lt;/a&gt;数据结构单链表的一些简单操作&lt;/h1&gt;&lt;p&gt;Node的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Node nextNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; T v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.v = v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Node nextNode, T v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.nextNode = nextNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.v = v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Node &lt;span class=&quot;title&quot;&gt;getNextNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nextNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setNextNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Node nextNode)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.nextNode = nextNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;title&quot;&gt;getV&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setV&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.v = v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printAllNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;//我这里是有一个headNode不做数据存储&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Node tmpN = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (tmpN.getNextNode() != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.print(tmpN.getNextNode().getV());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.print((tmpN.getNextNode().getNextNode() == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tmpN = tmpN.getNextNode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chenzhijun.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="http://chenzhijun.me/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>shell 相关基本操作</title>
    <link href="http://chenzhijun.me/2019/09/07/shell-learn-1/"/>
    <id>http://chenzhijun.me/2019/09/07/shell-learn-1/</id>
    <published>2019-09-07T04:50:53.000Z</published>
    <updated>2019-12-03T12:27:49.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shell-相关基本操作"><a href="#shell-相关基本操作" class="headerlink" title="shell 相关基本操作"></a>shell 相关基本操作</h1><h2 id="shell-基础"><a href="#shell-基础" class="headerlink" title="shell 基础"></a>shell 基础</h2><p>shell中的脚本通常就是控制台中的语句，将这些语句结合到一个文件中，就组成了脚本。脚本的第一行通常是<code>#!/bin/bash</code>开通，这行的作用是指定用哪个shell。可以<code>cat /etc/shells</code>查看当前操作系统支持哪些shell。</p><p>在控制台中我们使用 <code>;</code> 隔开多条语句，在shell脚本中则是一行命令独立一行。通常我们会以<code>*.sh</code>结尾来作为一个脚本名称，另外会将其权限设置为可执行权限：<code>chmod u+x *.sh</code>。</p><a id="more"></a><h2 id="管道与重定向"><a href="#管道与重定向" class="headerlink" title="管道与重定向"></a>管道与重定向</h2><p>管道的符号是：<code>|</code>，作用是将前一个命令的操作结果传给第二个命令：<code>ps | cat</code>，<code>echo 123 | ps</code></p><p>重定向的符号:</p><p>1: 输入重定向：<code>&lt;</code>;<br>2：输出重定向<code>&gt;</code>,<code>&gt;&gt;</code>,<code>2&gt;</code>,<code>&amp;&gt;</code>;</p><p>输入输出组合使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /path/to/a/file &lt;&lt; EOF</span><br><span class="line">I am test</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><code>&gt;</code> : 先会清空文件然后再输出到文件</p><p><code>&gt;&gt;</code> ：追加到文件中，会在最后一行添加</p><p><code>2&gt;</code> ：如果出现异常，将异常结果输出到文件中</p><p><img src="/images/qiniu/2019-09-07-11-36-12.png" alt="2019-09-07-11-36-12"></p><p><code>&amp;&gt;</code> : 不管结果对错都输入到文件中</p><p><img src="/images/qiniu/2019-09-07-11-41-02.png" alt="2019-09-07-11-41-02"></p><h2 id="shell-脚本执行的几种方式"><a href="#shell-脚本执行的几种方式" class="headerlink" title="shell 脚本执行的几种方式"></a>shell 脚本执行的几种方式</h2><p><code>bash xxx.sh</code> : 开了一个子进程bash执行脚本，可以不需要shell文件有可执行权限，就可以执行脚本；</p><p><code>./xxx.sh</code> ：同bash，不过需要脚本有可执行权限；</p><p><code>source xxx.sh</code> ：在当前shell内去执行脚本，脚本可以没有可执行权限；</p><p><code>. xxx.sh</code> ：source的缩写；</p><p><img src="/images/qiniu/2019-09-07-11-53-42.png" alt="2019-09-07-11-53-42"></p><h2 id="变量定义与使用"><a href="#变量定义与使用" class="headerlink" title="变量定义与使用"></a>变量定义与使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME=chenzhijun</span><br><span class="line">echo $NAME</span><br></pre></td></tr></table></figure><p>上面中<code>=</code>两边不能有空格，不然的话会将 NAME 识别成一个命令来报错。使用变量 NAME 的时候只需要带上<code>$</code>即可。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p><code>env</code> <code>set</code> 获取环境变量；</p><p><code>$PS1</code>可以修改总端显示</p><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><p><code>$?</code> : 使用<code>echo $?</code>可以获取上一条命令执行的结果，成功为0，失败为1</p><p><code>$$</code> ：获取当前的pid</p><p><code>$0</code> ：当前进程名称</p><p><img src="/images/qiniu/2019-09-07-12-15-44.png" alt="2019-09-07-12-15-44"></p><p>执行的方式不同，<code>$0</code>的值也不同。</p><h3 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span>/bin/bash</span><br><span class="line"><span class="meta">#</span> $1 $2 ...$9 $&#123;10&#125;</span><br><span class="line"></span><br><span class="line">pos1=$1</span><br><span class="line">pos2=$&#123;2-_&#125; # 如果$2为空值，用`_`代替</span><br></pre></td></tr></table></figure><h3 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/etc/profile</span><br><span class="line">/etc/profile.d/</span><br><span class="line"></span><br><span class="line">~/.bash_profile</span><br><span class="line">~/.bashrc</span><br><span class="line"></span><br><span class="line">/etc/bashrc</span><br></pre></td></tr></table></figure><p><code>/etc/profile*</code> 是所有用户通用的。<code>~/.bash*</code>是用户特有的。 </p><p>用户登录分为<code>login shell</code>，<code>nologin shell</code> 。如果是<code>su - user</code>是<code>login-shell</code> ，如果是<code>su user</code>是<code>nologin shell</code></p><p>如果在每个文件第一行加入<code>echo xxx</code>，可以看到如下加载顺序：</p><p><img src="/images/qiniu/2019-09-07-12-34-30.png" alt="2019-09-07-12-34-30"></p><p>要注意作用域的问题，shell执行的时候通常是一个subshell，也就是一个子进程shell，要注意变量是否可以传递过去。一般可以用<code>source /etc/profile</code>来重加载；也使用export也可以将当前shell的变量传递subshell中。</p><p><img src="/images/qiniu/2019-09-07-12-39-06.png" alt="2019-09-07-12-39-06"></p><p>上面的方式是在<code>/etc/profile</code>文件最后面增加了<code>aaa</code>变量，使用source可以加载到当前shell中，使用export可以在subshell（bash命令）也同样获取到<code>aaa</code>的值。</p><h2 id="常用的一些脚本命令"><a href="#常用的一些脚本命令" class="headerlink" title="常用的一些脚本命令"></a>常用的一些脚本命令</h2><ol><li>找出dir目录下文件名带 <code>xxx</code> 的文件 : <code>find /dir -name *xxx*</code> ; </li><li>找出dir目录下文件中带 <code>xxx</code> 内容的文件 ：<code>grep -r &quot;xxx&quot; /dir</code> ;</li><li>找出dir目录下文件名带 <code>aaa</code> 的文件并且文件路径中有 <code>bbb</code> 然后查找这些文件中含有 <code>ccc</code> 的文件，替换这些文件中的 <code>ddd</code> 为 <code>eee</code>: <code>find /dir -name &quot;*aaa*&quot;|grep &#39;bbb&#39;|xargs grep &#39;ccc&#39; -l|xargs sed -i &#39;s/ddd/eee/g&#39;</code> ;<br><code>grep -l</code> 为输出全路径。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/dylanaraps/pure-bash-bible" target="_blank" rel="noopener">github shell 大全</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;shell-相关基本操作&quot;&gt;&lt;a href=&quot;#shell-相关基本操作&quot; class=&quot;headerlink&quot; title=&quot;shell 相关基本操作&quot;&gt;&lt;/a&gt;shell 相关基本操作&lt;/h1&gt;&lt;h2 id=&quot;shell-基础&quot;&gt;&lt;a href=&quot;#shell-基础&quot; class=&quot;headerlink&quot; title=&quot;shell 基础&quot;&gt;&lt;/a&gt;shell 基础&lt;/h2&gt;&lt;p&gt;shell中的脚本通常就是控制台中的语句，将这些语句结合到一个文件中，就组成了脚本。脚本的第一行通常是&lt;code&gt;#!/bin/bash&lt;/code&gt;开通，这行的作用是指定用哪个shell。可以&lt;code&gt;cat /etc/shells&lt;/code&gt;查看当前操作系统支持哪些shell。&lt;/p&gt;
&lt;p&gt;在控制台中我们使用 &lt;code&gt;;&lt;/code&gt; 隔开多条语句，在shell脚本中则是一行命令独立一行。通常我们会以&lt;code&gt;*.sh&lt;/code&gt;结尾来作为一个脚本名称，另外会将其权限设置为可执行权限：&lt;code&gt;chmod u+x *.sh&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://chenzhijun.me/categories/Linux/"/>
    
    
      <category term="shell" scheme="http://chenzhijun.me/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>golang 并发基础（二）</title>
    <link href="http://chenzhijun.me/2019/08/25/golang-goroutine2/"/>
    <id>http://chenzhijun.me/2019/08/25/golang-goroutine2/</id>
    <published>2019-08-25T14:49:36.000Z</published>
    <updated>2019-12-03T12:27:49.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang-并发基础（二）"><a href="#golang-并发基础（二）" class="headerlink" title="golang 并发基础（二）"></a>golang 并发基础（二）</h1><p>上一篇简单介绍了并发与并行，goroutine实际工作的原理示意图，现在我们来看下golang是怎么处理并发中竞争状态的。</p><p>竞争状态：如果两个或多个goroutine在没有同步的情况下对同一个资源进行读写操作，就处于相互竞争的状态，称为竞争状态。对一个共享资源的操作必须是<strong>原子化</strong>的，即同一时刻只能由一个goroutine对共享资源进行读和写操作。<br><a id="more"></a></p><h2 id="同步操作方式–锁住共享资源"><a href="#同步操作方式–锁住共享资源" class="headerlink" title="同步操作方式–锁住共享资源"></a>同步操作方式–锁住共享资源</h2><p>golang提供atomic和sync包，两个包里的函数提供了很好的解决方案。</p><h3 id="原子函数-atomic-包"><a href="#原子函数-atomic-包" class="headerlink" title="原子函数 atomic 包"></a>原子函数 atomic 包</h3><p>我们可以看一下atomic提供的原子函数，它提供底层加锁的方式来同步访问整形变量和指针，示例代码:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">counter <span class="keyword">int64</span></span><br><span class="line"></span><br><span class="line">wg sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> incCounter(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> incCounter(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Final Counter:"</span>, counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incCounter</span><span class="params">(id <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> count := <span class="number">0</span>; count &lt; <span class="number">2</span>; count++ &#123;</span><br><span class="line">atomic.AddInt64(&amp;counter, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">runtime.Gosched()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="互斥锁-mutex"><a href="#互斥锁-mutex" class="headerlink" title="互斥锁 mutex"></a>互斥锁 mutex</h3><p>使用互斥锁也是一种同步访问共享资源的方式，互斥的概念就是AB只有一个可以访问，要不就是A，要不就是B。相当于一张门，只能一个人进入，第一个进入的人就把门锁了，其它人都不可以进来，只有等这个人把锁打开了，其它人才能重新竞争锁。</p><p>看一下代码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">counter <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">mutex sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> incCounter(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> incCounter(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Printf(<span class="string">"Final Counter: %d\n"</span>, counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incCounter</span><span class="params">(id <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> count := <span class="number">0</span>; count &lt; <span class="number">2</span>; count++ &#123;</span><br><span class="line">mutex.Lock() <span class="comment">//锁住</span></span><br><span class="line">&#123;</span><br><span class="line">value := counter</span><br><span class="line"></span><br><span class="line">runtime.Gosched()</span><br><span class="line"></span><br><span class="line">value++</span><br><span class="line"></span><br><span class="line">counter = value</span><br><span class="line">&#125;</span><br><span class="line">mutex.Unlock()<span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通道-channel"><a href="#通道-channel" class="headerlink" title="通道 channel"></a>通道 channel</h3><p>在goroutine之间还可以通过通道来发送和接受需要共享的资源，在goroutine之间做同步。当一个资源需要被goroutine共享时，通道在goroutine之间架起了一个管道，并提供了确保同步交换数据的机制。声明通道，需要指定被共享的数据类型。go中需要使用内置函数make来创建一个通道。</p><p>通道的类型由两种：无缓冲通道与有缓冲通道。定义的方式如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//无缓冲</span></span><br><span class="line">unbuffered := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有缓冲 </span></span><br><span class="line">buffered := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>通道的赋值和取值如下:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line">buffered := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">buffered &lt;- <span class="string">"ok, set channel value"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取值</span></span><br><span class="line">value := &lt;- buffered</span><br></pre></td></tr></table></figure><p>无缓冲通道就像“接力跑步赛”，数据就是那个“接力棒”，通道就是两个运动员之间的跑道。如果运动员A拿到接力棒，不将接力棒传到运动员B的手中，那么B就无法开始跑（阻塞），而A因为B没有拿到接力棒，A也无法去做其它的事情。所以A其实也是阻塞在了传递的这个过程中。可以看到传递“接力棒”和接受“接力棒”这两个过程其实是个同步的，两个都无法独立存在。</p><p>有缓存通道就像是吃转转火锅，通道就是传送带，数据就是传送带上的每碟食物，goroutine就是厨师和顾客。缓冲数量就是传送带可以放的碟子数量。所以一个厨师(goroutine)将餐碟放到传送带上，传送带本身就只能存放固定数量的餐碟，也就是缓冲带。如果缓冲带满了，那么厨师只能等待着，等到某个餐碟空了，再放食物。而顾客也是从传送带上取餐碟，只要传送带上面有餐碟，就会吃么。如果顾客拿到手中的餐碟没吃完，传送带上还有空位，那么厨师可以继续放，如果没有空位了，就只能等顾客，吃完再从传送带上取出餐碟，这样才能继续。</p><p>两者的区别：无缓冲通道保证接受和发送的goroutine会在同一时间进行数据交换；有缓冲通道就不提供这种保证。</p><p>要注意通道的关闭操作，当通道关闭后，goroutine依旧可以从通道接收数据，但是不能再往里面发送数据了。从通道获取数据的时候会返回一个ok标志，如果值为false，那说明通道已经关闭了。</p><p>看一下示例。</p><p>无缓冲通道：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This sample program demonstrates how to use an unbuffered</span></span><br><span class="line"><span class="comment">// channel to simulate a relay race between four goroutines.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// wg is used to wait for the program to finish.</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="comment">// main is the entry point for all Go programs.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Create an unbuffered channel.</span></span><br><span class="line">baton := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a count of one for the last runner.</span></span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// First runner to his mark.</span></span><br><span class="line"><span class="keyword">go</span> Runner(baton)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start the race.</span></span><br><span class="line">baton &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for the race to finish.</span></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Runner simulates a person running in the relay race.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Runner</span><span class="params">(baton <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> newRunner <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait to receive the baton.</span></span><br><span class="line">runner := &lt;-baton</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start running around the track.</span></span><br><span class="line">fmt.Printf(<span class="string">"Runner %d Running With Baton\n"</span>, runner)</span><br><span class="line"></span><br><span class="line"><span class="comment">// New runner to the line.</span></span><br><span class="line"><span class="keyword">if</span> runner != <span class="number">2</span> &#123;</span><br><span class="line">newRunner = runner + <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">"Runner %d To The Line\n"</span>, newRunner)</span><br><span class="line"><span class="keyword">go</span> Runner(baton)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Running around the track.</span></span><br><span class="line">time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is the race over.</span></span><br><span class="line"><span class="keyword">if</span> runner == <span class="number">2</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Runner %d Finished, Race Over\n"</span>, runner)</span><br><span class="line">wg.Done()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exchange the baton for the next runner.</span></span><br><span class="line">fmt.Printf(<span class="string">"Runner %d Exchange With Runner %d\n"</span>,</span><br><span class="line">runner,</span><br><span class="line">newRunner)</span><br><span class="line"></span><br><span class="line">baton &lt;- newRunner</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有缓冲通道：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This sample program demonstrates how to use a buffered</span></span><br><span class="line"><span class="comment">// channel to work on multiple tasks with a predefined number</span></span><br><span class="line"><span class="comment">// of goroutines.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">numberGoroutines = <span class="number">4</span>  <span class="comment">// Number of goroutines to use.</span></span><br><span class="line">taskLoad         = <span class="number">10</span> <span class="comment">// Amount of work to process.</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// wg is used to wait for the program to finish.</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="comment">// init is called to initialize the package by the</span></span><br><span class="line"><span class="comment">// Go runtime prior to any other code being executed.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Seed the random number generator.</span></span><br><span class="line">rand.Seed(time.Now().Unix())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main is the entry point for all Go programs.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Create a buffered channel to manage the task load.</span></span><br><span class="line">tasks := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, taskLoad)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Launch goroutines to handle the work.</span></span><br><span class="line">wg.Add(numberGoroutines)</span><br><span class="line"><span class="keyword">for</span> gr := <span class="number">1</span>; gr &lt;= numberGoroutines; gr++ &#123;</span><br><span class="line"><span class="keyword">go</span> worker(tasks, gr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a bunch of work to get done.</span></span><br><span class="line"><span class="keyword">for</span> post := <span class="number">1</span>; post &lt;= taskLoad; post++ &#123;</span><br><span class="line">tasks &lt;- fmt.Sprintf(<span class="string">"Task : %d"</span>, post)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Close the channel so the goroutines will quit</span></span><br><span class="line"><span class="comment">// when all the work is done.</span></span><br><span class="line"><span class="built_in">close</span>(tasks)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for all the work to get done.</span></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// worker is launched as a goroutine to process work from</span></span><br><span class="line"><span class="comment">// the buffered channel.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(tasks <span class="keyword">chan</span> <span class="keyword">string</span>, worker <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// Report that we just returned.</span></span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// Wait for work to be assigned.</span></span><br><span class="line">task, ok := &lt;-tasks</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="comment">// This means the channel is empty and closed.</span></span><br><span class="line">fmt.Printf(<span class="string">"Worker: %d : Shutting Down\n"</span>, worker)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Display we are starting the work.</span></span><br><span class="line">fmt.Printf(<span class="string">"Worker: %d : Started %s\n"</span>, worker, task)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Randomly wait to simulate work time.</span></span><br><span class="line">sleep := rand.Int63n(<span class="number">100</span>)</span><br><span class="line">time.Sleep(time.Duration(sleep) * time.Millisecond)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Display we finished the work.</span></span><br><span class="line">fmt.Printf(<span class="string">"Worker: %d : Completed %s\n"</span>, worker, task)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>提到goroutine的channel，通常都会与select一起使用。官网的说明：<a href="https://golang.google.cn/ref/spec#Select_statements" target="_blank" rel="noopener">select</a>。简单的说一下select的用法：<br>1：select 的case一定是一个chan的表达式<br>2：select监听的是当前运行的goroutine，如果当前没有运行的goroutine会直接抛出panic；<br>3：如果没有default语句，而多个case都可以执行，那么随机取一个；<br>4：如果有default语句，且case多个可以执行，执行default</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Chann</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>, stopCh <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line"><span class="comment">//for &#123;</span></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="comment">//ch &lt;- i</span></span><br><span class="line"><span class="comment">//fmt.Println(i)</span></span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stopCh &lt;- <span class="literal">true</span></span><br><span class="line">fmt.Println(<span class="string">"ok"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestChan</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">c := <span class="number">0</span></span><br><span class="line">stopCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> Chann(ch, stopCh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> ch &lt;- <span class="number">10</span>:</span><br><span class="line">fmt.Println(<span class="string">"ok"</span>)</span><br><span class="line"><span class="keyword">case</span> &lt;-ch:</span><br><span class="line">fmt.Println(<span class="string">"Recvice c1"</span>, c)</span><br><span class="line">fmt.Println(<span class="string">"channel"</span>)</span><br><span class="line"><span class="keyword">case</span> &lt;-ch:</span><br><span class="line">fmt.Println(<span class="string">"Receive s"</span>, ch)</span><br><span class="line"><span class="comment">//case _ = &lt;-stopCh:</span></span><br><span class="line"><span class="comment">//fmt.Println("stop")</span></span><br><span class="line"><span class="comment">//goto end</span></span><br><span class="line"><span class="comment">//default:</span></span><br><span class="line"><span class="comment">//fmt.Println("default")</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//end:</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;golang-并发基础（二）&quot;&gt;&lt;a href=&quot;#golang-并发基础（二）&quot; class=&quot;headerlink&quot; title=&quot;golang 并发基础（二）&quot;&gt;&lt;/a&gt;golang 并发基础（二）&lt;/h1&gt;&lt;p&gt;上一篇简单介绍了并发与并行，goroutine实际工作的原理示意图，现在我们来看下golang是怎么处理并发中竞争状态的。&lt;/p&gt;
&lt;p&gt;竞争状态：如果两个或多个goroutine在没有同步的情况下对同一个资源进行读写操作，就处于相互竞争的状态，称为竞争状态。对一个共享资源的操作必须是&lt;strong&gt;原子化&lt;/strong&gt;的，即同一时刻只能由一个goroutine对共享资源进行读和写操作。&lt;br&gt;
    
    </summary>
    
      <category term="并发" scheme="http://chenzhijun.me/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="golang" scheme="http://chenzhijun.me/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang 并发基础（一）</title>
    <link href="http://chenzhijun.me/2019/08/25/golang-goroutine1/"/>
    <id>http://chenzhijun.me/2019/08/25/golang-goroutine1/</id>
    <published>2019-08-25T12:40:13.000Z</published>
    <updated>2019-12-03T12:27:49.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang-并发基础（一）"><a href="#golang-并发基础（一）" class="headerlink" title="golang 并发基础（一）"></a>golang 并发基础（一）</h1><p>golang 在语言的语法和运行时方面内置了对并发的支持。在了解golang的并发之前，我们先看一下操作系统的两个概念：线程和进程。你应该知道，在系统中运行一个程序，其实就是启动了一个进程，而要运行起来，对外来说肯定是需要资源的，比如cpu，内存空间，文件句柄，线程等等..每个进程至少有一个线程，每个进程的初始线程被称为主线程。了解到这些，你大概可以类比一下，比如你创建一个项目，肯定要有main方法（主线程），你的项目中可能还有不同的业务逻辑，这个时候就可以让主进程创建多个线程去运行求结果。线程可以共享进程的空间。另外我们要知道，cpu的执行方式是轮询时间分片的，也就是可能这个线程有10ms的cpu执行时间，所以如果是单核cpu，就是每个线程执行一会，抢占式执行。并发(concurrency)不是并行(parallelism)。并行是在相同的时候让不同的代码都能在不同的处理器上执行，也就是同时做很多事情。并发是指同时管理很多事情，这些事情可能只做了一半就被暂停去做别的事情了。<br><a id="more"></a></p><h2 id="并发通信模型"><a href="#并发通信模型" class="headerlink" title="并发通信模型"></a>并发通信模型</h2><p>golang 采用的并发同步模型为通信顺序进程（Communicating Sequential Process,CSP)的模型，通过在goroutine之间传递数据来传递消息，而不是对数据进行加锁来实现同步访问。并发通信模型还有一种是Actor，比较著名的例子就是akka.io。</p><h2 id="golang-并发工作模式"><a href="#golang-并发工作模式" class="headerlink" title="golang 并发工作模式"></a>golang 并发工作模式</h2><p>操作系统会在物理处理器上调度线程来运行，而Go语言的运行时会在逻辑处理器上调度goroutine来执行，每个逻辑处理器又分别绑定到单个的操作系统线程。像下图，如果一个Goroutine可以运行的时候，就会被放入到逻辑处理器的执行队列中，逻辑处理器有绑定到一个唯一的操作系统线程中。</p><p><img src="/images/qiniu/2019-08-25-20-03-52.png" alt="2019-08-25-20-03-52"></p><p>如果一个goroutine执行的是一个阻塞的系统调用，比如打开文件，那岂不是队列中的就绪态goroutine都的阻塞了？当出现这类调用时候，当前线程和当前的goroutine就会从逻辑处理器上分离，当前线程继续阻塞，等待刚刚的系统调用的放回。同时，逻辑处理器失去用来运行的线程。所以调度器就会创建一个新线程，并将其绑定到逻辑处理器上。当阻塞的系统完成调用并且返回，对应的goroutine会放回到本地运行队列，而之前的线程会保存好，一遍之后可以继续使用。如下图，线程A本来是绑定在P0的，后来有阻塞调用，就脱离出去了，然后线程B又绑定了P0。</p><p><img src="/images/qiniu/2019-08-25-20-21-14.png" alt="2019-08-25-20-21-14"></p><p>golang默认可以创建的线程数量为10000个线程，可以通过runtime/debug包的SetMaxThreads方法来更改。</p><!-- golang由于天生的支持高并发的应用，得到了很多大的基础项目的青睐。在golang的并发中最小的单元即为goroutine。今天来聊一下goroutine是怎么和chan配合的。## channel的分类channel分为非缓存chan和有缓存chan，  --><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>The C10K problem</p><p><a href="https://cloud.tencent.com/developer/article/1346210" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1346210</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;golang-并发基础（一）&quot;&gt;&lt;a href=&quot;#golang-并发基础（一）&quot; class=&quot;headerlink&quot; title=&quot;golang 并发基础（一）&quot;&gt;&lt;/a&gt;golang 并发基础（一）&lt;/h1&gt;&lt;p&gt;golang 在语言的语法和运行时方面内置了对并发的支持。在了解golang的并发之前，我们先看一下操作系统的两个概念：线程和进程。你应该知道，在系统中运行一个程序，其实就是启动了一个进程，而要运行起来，对外来说肯定是需要资源的，比如cpu，内存空间，文件句柄，线程等等..每个进程至少有一个线程，每个进程的初始线程被称为主线程。了解到这些，你大概可以类比一下，比如你创建一个项目，肯定要有main方法（主线程），你的项目中可能还有不同的业务逻辑，这个时候就可以让主进程创建多个线程去运行求结果。线程可以共享进程的空间。另外我们要知道，cpu的执行方式是轮询时间分片的，也就是可能这个线程有10ms的cpu执行时间，所以如果是单核cpu，就是每个线程执行一会，抢占式执行。并发(concurrency)不是并行(parallelism)。并行是在相同的时候让不同的代码都能在不同的处理器上执行，也就是同时做很多事情。并发是指同时管理很多事情，这些事情可能只做了一半就被暂停去做别的事情了。&lt;br&gt;
    
    </summary>
    
      <category term="并发" scheme="http://chenzhijun.me/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="golang" scheme="http://chenzhijun.me/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>过去一段时间遇到的一些问题</title>
    <link href="http://chenzhijun.me/2019/08/17/record-last/"/>
    <id>http://chenzhijun.me/2019/08/17/record-last/</id>
    <published>2019-08-17T09:16:25.000Z</published>
    <updated>2019-12-03T12:27:49.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随笔-过去一段时间遇到的一些问题"><a href="#随笔-过去一段时间遇到的一些问题" class="headerlink" title="随笔-过去一段时间遇到的一些问题"></a>随笔-过去一段时间遇到的一些问题</h1><a id="more"></a><p>Q: Ansible 远程执行无法找到命令的问题。</p><p>A: 实际上是bash / sh的问题，执行的时候使用<code>ansible all -i hosts -m shell -a &#39;PATH=&quot;/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/bin:/usr/bin&quot;;source /etc/profile;groupadd docker&#39;</code></p><p>Q：kubernetes 一个节点的ip被加入到集群中，使得节点ip变成了kube-ipvs0里面的子网</p><p>A: 创建了外部服务，但是外部服务的ip地址为node的一个节点ip，产生的后果为这个节点与其它节点直接无法ping通。</p><p>Q: Docker 使用非Root用户管理或者 Docker无权限</p><p>A: <a href="https://docs.docker.com/install/linux/linux-postinstall/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/linux-postinstall/</a></p><p><code>Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.26/build?buildargs=%7B%7D&amp;buildbinds=null&amp;cachefrom=%5B%5D&amp;cgroupparent=&amp;cpuperiod=0&amp;cpuquota=0&amp;cpusetcpus=&amp;cpusetmems=&amp;cpushares=0&amp;dockerfile=Dockerfile&amp;labels=%7B%7D&amp;memory=0&amp;memswap=0&amp;networkmode=default&amp;pull=1&amp;rm=1&amp;shmsize=0&amp;t=harbor.uat.cmft.com%2Fcmft-library%2Fadms-app-0627%3A170&amp;ulimits=null: dial unix /var/run/docker.sock: connect: permission denied</code></p><p>Q: Docker 的远程仓库用户权限文件。</p><p>A: <code>$HOME/.dockercfg</code> 在用户根目录的<code>.dockercfg</code>目录。如果要查当前仓库登陆的用户<code>docker login hub.xxx.com</code></p><p>Q：kubernetes 直接运行一个pod</p><p>A: <code>kubectl run testconfig --image=harob -o yaml --dry-run</code></p><p>Q：kubernetes 获取某个资源的解释或者yaml的定义解释</p><p>A：<code>kubectl explain pods.spec</code></p><p>Q: git 使用代理</p><p>A: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://proxy.example.com:8888</span><br><span class="line"></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line"></span><br><span class="line">git config --global --add remote.origin.proxy "socks5://127.0.0.1:18001"</span><br><span class="line"></span><br><span class="line">git config --unset-all</span><br></pre></td></tr></table></figure><p>Q：docker删除不需要的镜像。</p><p>A: <code>docker images|grep &#39;none&#39;|awk &#39;{print $3}&#39;|xargs -r docker rmi -f</code></p><p>Q：MySQL 集群无法重启</p><p>A: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;wsrep_provider_options&apos;;</span><br><span class="line">/data/mysql/grastate.dat 修改</span><br><span class="line">safe_to_bootstrap: 1</span><br></pre></td></tr></table></figure><p>Q: linux某个进程无响应</p><p>A: <a href="https://blog.csdn.net/jctian000/article/details/80695025" target="_blank" rel="noopener">https://blog.csdn.net/jctian000/article/details/80695025</a></p><p><code>/proc/进程号/fd</code></p><p><code>/proc/进程/stack</code></p><p>Q：Linux逻辑卷扩容</p><p>A:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vgextend vg00 /dev/vdc</span><br><span class="line">lvextend -L +20G /dev/vg00/home</span><br><span class="line">xfs_growfs /dev/vg00/home</span><br></pre></td></tr></table></figure><p>Q: curl timeout</p><p>A: <code>curl --connect-timeout 2 -m 5 100.66.7.2:25</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;随笔-过去一段时间遇到的一些问题&quot;&gt;&lt;a href=&quot;#随笔-过去一段时间遇到的一些问题&quot; class=&quot;headerlink&quot; title=&quot;随笔-过去一段时间遇到的一些问题&quot;&gt;&lt;/a&gt;随笔-过去一段时间遇到的一些问题&lt;/h1&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://chenzhijun.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://chenzhijun.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>jenkins-docker-plugin-error</title>
    <link href="http://chenzhijun.me/2019/07/24/jenkins-docker-plugin-error/"/>
    <id>http://chenzhijun.me/2019/07/24/jenkins-docker-plugin-error/</id>
    <published>2019-07-24T10:23:51.000Z</published>
    <updated>2019-12-03T12:27:49.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jenkins-Docker-模块无法切换Registry-credentials"><a href="#Jenkins-Docker-模块无法切换Registry-credentials" class="headerlink" title="Jenkins Docker 模块无法切换Registry credentials"></a>Jenkins Docker 模块无法切换Registry credentials</h1><p>问题产生，一次公司Jenkins迁移过程中，发现一个问题，dockers模块选择不同用户的 Registry credentials 但就是无法推送到私有仓库上去。</p><p><img src="/images/qiniu/2019-07-24-18-28-43.png" alt="2019-07-24-18-28-43"></p><p>像上图一样，选择了用户，deployop 或者其它，但是Jenkins push的时候就是报没有权限：</p><p><img src="/images/qiniu/2019-07-24-18-30-05.png" alt="2019-07-24-18-30-05"></p><p>就算我选的的是harbor的admin账号也没用。</p><p>后来想到jenkins的机器我是都手动执行过<code>docker login</code>的，不知道会不会有影响，于是手动去机器上docker build –&gt; docker push 发现结果一样。也是没有权限。然后用docker login harbor.xxx.com 查看当前用户却不是admin账户，这就有点奇怪了，我当时在jenkins模块docker中选的就是admin啊。为什么docker 还是用之前的权限较小的账户了？然后我在~/.docker/config.json 查看到确实有两个账户，这个可以说明其实Docker 模块的Registry credentials其实际是起到了作用的。应该是我们一开始使用了docker login 所以造成了有”默认账户”。jenkins应该就是使用了默认账户才导致这个问题的。</p><p><img src="/images/qiniu/2019-07-24-18-35-44.png" alt="2019-07-24-18-35-44"></p><p>解决的方式很简单，一个是删除<code>~/.docker</code>这个文件夹；一个是使用<code>docker logout harbor.xxx.com</code>就可以了。再用Jenkins构建的时候就可以看到该文件内容：</p><p><img src="/images/qiniu/2019-07-24-18-39-09.png" alt="2019-07-24-18-39-09"> </p><p>如果你是删除了<code>~/.docker</code>文件夹，然后重启docker，那么你再次构建的时候应该会看到<code>~/.docker</code>文件夹变空了。但是在用户目录多出一个<code>~/.dockercfg</code>文件。里面的内容和config.json一致。如果你是使用docker logout，那么就还是会在<code>~/.docker/config.json</code>文件中看到你每次选择的用户。</p><p><img src="/images/qiniu/2019-07-24-18-43-39.png" alt="2019-07-24-18-43-39"></p><blockquote><p>ps 如果想在jenkins启动的时候就指定其工作目录，可以这样设置<code>export JENKINS_HOME=/data/jenkins/.jenkins</code> </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Jenkins-Docker-模块无法切换Registry-credentials&quot;&gt;&lt;a href=&quot;#Jenkins-Docker-模块无法切换Registry-credentials&quot; class=&quot;headerlink&quot; title=&quot;Jenkins Do
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>golang 基础入门 - 数据类型</title>
    <link href="http://chenzhijun.me/2019/07/14/golang-type/"/>
    <id>http://chenzhijun.me/2019/07/14/golang-type/</id>
    <published>2019-07-14T15:21:30.000Z</published>
    <updated>2019-12-03T12:27:49.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang-基础入门-数据类型"><a href="#golang-基础入门-数据类型" class="headerlink" title="golang 基础入门 - 数据类型"></a>golang 基础入门 - 数据类型</h1><p>任何一门语句都会有它的基本关键字和数据类型。golang的数据类型大致分为三种：基本类型，引用类型，结构体。</p><p><img src="/images/qiniu/2019-07-14-23-35-07.png" alt="2019-07-14-23-35-07"></p><p>类型的一些细节可以参考：<a href="https://github.com/golang/go/wiki" target="_blank" rel="noopener">官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;golang-基础入门-数据类型&quot;&gt;&lt;a href=&quot;#golang-基础入门-数据类型&quot; class=&quot;headerlink&quot; title=&quot;golang 基础入门 - 数据类型&quot;&gt;&lt;/a&gt;golang 基础入门 - 数据类型&lt;/h1&gt;&lt;p&gt;任何一门语句都会有它
      
    
    </summary>
    
      <category term="Go" scheme="http://chenzhijun.me/categories/Go/"/>
    
    
      <category term="golang" scheme="http://chenzhijun.me/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang 基础入门</title>
    <link href="http://chenzhijun.me/2019/07/14/hello-golang/"/>
    <id>http://chenzhijun.me/2019/07/14/hello-golang/</id>
    <published>2019-07-14T04:55:21.000Z</published>
    <updated>2019-12-03T12:27:49.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Golang-基础入门"><a href="#Golang-基础入门" class="headerlink" title="Golang 基础入门"></a>Golang 基础入门</h1><p>了解任何事物首先得了解一下它的历史。golang 在2007年就开始开发，在09年开源，并且在12年发布了第一个稳定版本GO 1。今年19年，go这些年的发展是很快的，目前的版本是go 1.12.7，目前go的开发节奏是半年发布一个版本。并且golang承诺，go的更新时兼容之前的版本的。</p><h2 id="Golang-安装"><a href="#Golang-安装" class="headerlink" title="Golang 安装"></a>Golang 安装</h2><p>在golang的官网<a href="https://golang.org/" target="_blank" rel="noopener">golang.org</a>下载最新版本的golang或者你需要的版本。接下来如果是windows的机器，那么只需要一路next就行了,之后在<code>c:\\go</code>文件夹下就可以了。如果是Linux系统，只需要将tar.gz包解压到自己工作的位置，然后将$GOLANG_PATH\bin加入到path就可以了。</p><a id="more"></a><h2 id="Hello-Go"><a href="#Hello-Go" class="headerlink" title="Hello Go"></a>Hello Go</h2><p>开始一门新语言的探险时，大家的第一个demo肯定是“Hello World”。我们也开始第一个”Hello Go”吧：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello,Go.."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上面的内容保存为一个<code>main.go</code>文件，然后使用<code>go run main.go</code>。你就可以看到输出了，超级简单。</p><p>不得不说是真的简洁。看到上面的代码，我们开始进行一下基本golang开发介绍。</p><h2 id="main包main方法"><a href="#main包main方法" class="headerlink" title="main包main方法"></a>main包main方法</h2><p>golang中定义一个包的关键字就是<code>package</code>，程序的入口始终都是<code>main</code>包中的<code>main()</code>方法，程序始终都是从这里开始。<br>不像Java中的lang包不需要导入，golang中除了一些关键字，其它的不管是内部包，还是外部包都需要通过关键字<code>import</code>进行导入。</p><h2 id="GOROOT，GOPATH"><a href="#GOROOT，GOPATH" class="headerlink" title="GOROOT，GOPATH"></a>GOROOT，GOPATH</h2><p>golang 中有个路径非常重要：GOROOT 和 GOPATH ; </p><p>GOROOT ： 其实就是golang的安装目录，当你用在控制台输入： <code>go env GOROOT</code>就能获取到值。</p><p>GOPATH ： 实际开发工作的目录。</p><p>GOROOT 就不多讲了，这里讲一下GOPATH；golang程序开发不像之前Java开发，Java开发，可能是项目名/src/路径-源码。而golang中，你的所有开发代码其实都是放在GOPATH下的，而且是在$GOPATH/src下。在GOPATH中定义了三个文件夹：<code>src</code>,<code>pkg</code>,<code>bin</code>。</p><ol><li>pkg 存放项目编译时期的中间文件，比如:<code>.a</code>文件；</li><li>bin 目录存放项目的可执行文件，如果你把这个路径放到path目录下，那么就可以直接在控制台执行这里目录下的可执行文件；</li><li>src 源码存放路径记住，开发中一定要将代码放到这个路径下；比如Java开发者可能就不适应，因为之前的Java是<code>项目名/src</code>的方式，现在golang是<code>src/项目名</code>;</li></ol><p>如果开发一个应用<code>myserver</code>,那么目录结构就是：<code>$GOPATH/src/myserver</code>; golang在编译的时候是会自动去找GOPATH下src目录的。这样你可以把所有相关联的项目放到一个GOPATH路径下，不同的项目之间可以隔开，也可把所有项目都放在一个GOPATH下，这样这个路径下的所有包，你都可以直接导入。当然你也可以照样像Java那样包路径结构，只是需要记住要将项目根路径指定为GOPATH，不然编译就会报错。</p><h2 id="golang的包"><a href="#golang的包" class="headerlink" title="golang的包"></a>golang的包</h2><p>你可能注意到了我们上面<code>hello go</code>的第二行 <code>import &quot;fmt&quot;</code>；这里的作用就是导入fmt包，这个包在哪里了？golang寻找import包的优先级为：GOROOT–&gt;GOPATH;如果找不到你也可以使用<code>go get</code>工具，它会帮你自动下载包;</p><p>项目开发中项目结构如下：</p><p><img src="/images/qiniu/2019-07-14-22-14-21.png" alt="2019-07-14-22-14-21"></p><p>我们看一个包导入的例子：</p><p><img src="/images/qiniu/2019-07-14-22-42-50.png" alt="2019-07-14-22-42-50"></p><p>我在项目中的handler下定一个了方法<code>Hello</code>，包名为<code>handler</code>;正常情况下，在main包中我们如果掉用它的话就是<code>handler.Hello()</code>;如下：</p><p><img src="/images/qiniu/2019-07-14-22-44-21.png" alt="2019-07-14-22-44-21"></p><p>可以看到，main 方法中出了一场，报的是找不到handler包。这个时候要看一下我们的GOPATH了，之前我们也说了golang是先从goroot再从gopath去寻找包的。goroot，一般大家也不会将源码放那里，我们现在看下GOPATH的目录：</p><p><img src="/images/qiniu/2019-07-14-22-46-46.png" alt="2019-07-14-22-46-46"></p><p>这下可以看到了吧。我们的项目路径是：<code>D:\workspace-paas\goinaction</code>;但是gopath的路径是<code>D:\Users\chenzj001\go</code></p><p>我们可以知道GOPATH下是没有我们的handler包的。这个时候的修改方式有两个：</p><ol><li>将项目移到gopath目录的src目录下；</li><li>将GOPATH设置为当前的工作目录；</li></ol><p>如果采用1的话那么恭喜你，问题解决。如果采用2,哈，那么恭喜你，你肯定是Java派golang开发者，同道中人啊。你可能会想，我不是将GOPATH指到当前项目根路径了么？怎么还是导入不了。唉~。其实就像前面说的，go寻找包的时候都是去src目录下找的。所以你需要在项目路径下再建立一个src目录，再将源码放进去，就能解决异常了，采用2，就相当于是你要用Java开发的包路径结构。这种其实是不推荐的，入乡随俗还是独树一帜看你选择了。我是觉得按照大家的约定会比较好。</p><p>我们采用第一种方式，你看下图：</p><p><img src="/images/qiniu/2019-07-14-22-59-40.png" alt="2019-07-14-22-59-40"></p><p>你可以看到上面的gopath。</p><blockquote><p>ps: 其实你是可以同时设置多个GOPATH的哦，可以自己动手尝试一下。</p></blockquote><h2 id="GO-自带的工具"><a href="#GO-自带的工具" class="headerlink" title="GO 自带的工具"></a>GO 自带的工具</h2><p>GO 自带了一些常用工具，使用<code>go --help</code>就能看到。这里介绍常用的几个：</p><ol><li><code>go build</code>,编译包</li><li><code>go run</code>,编译运行</li><li><code>go fmt</code>,golang内置的将代码格式化</li><li><code>go doc</code>,golang的文档</li><li><code>go test</code>,golang测试工具</li><li><code>go get</code>,下载导入外部包</li></ol><p>go 也可以编译成其它平台的可执行文件，比如window下编译成Linux下的执行文件<a href="http://chenzhijun.me/2019/03/31/windows-compile-golang-to-linux-running-script/">golang编译成Linux环境下的二进制文件</a>。</p><p>go 的这些工具还是挺有用的，没事可以多用用。</p><p>这篇文章介绍了下go的发展史，也写下了<code>hello go</code>之后介绍了gopath，goroot，以及go自带的工具。其实golang其实是面向程序员友好的，对比Java动辄就是几十行代码，golang确实很简洁。不过对比Java来说，golang的生态其实感觉并没有Java那么的完善，另一方面，golang的包管理，我到现在还是有点。。还有一个就是在国内访问golang官网需要科学上网。这有点像什么了，我要推广给大家用，但是大家用起来又是各种阻碍，在已有的产品能实现需求的产品上，如果新产品不能提供很好的体验，其实要退光是有困难的。另一方面，golang其实面向的最多的感觉还是C/C++来转型。一门语言其实有它的优势，也肯定有它的不足。适合自己的业务场景，个人发展路径，取舍在于自己，我从一开始其实挺不喜欢golang的，但最近学会不排斥的心态去了解之后，感觉是真的爽。个人观点，不喜勿喷。一千个观众有一千个哈姆雷特。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Golang-基础入门&quot;&gt;&lt;a href=&quot;#Golang-基础入门&quot; class=&quot;headerlink&quot; title=&quot;Golang 基础入门&quot;&gt;&lt;/a&gt;Golang 基础入门&lt;/h1&gt;&lt;p&gt;了解任何事物首先得了解一下它的历史。golang 在2007年就开始开发，在09年开源，并且在12年发布了第一个稳定版本GO 1。今年19年，go这些年的发展是很快的，目前的版本是go 1.12.7，目前go的开发节奏是半年发布一个版本。并且golang承诺，go的更新时兼容之前的版本的。&lt;/p&gt;
&lt;h2 id=&quot;Golang-安装&quot;&gt;&lt;a href=&quot;#Golang-安装&quot; class=&quot;headerlink&quot; title=&quot;Golang 安装&quot;&gt;&lt;/a&gt;Golang 安装&lt;/h2&gt;&lt;p&gt;在golang的官网&lt;a href=&quot;https://golang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;golang.org&lt;/a&gt;下载最新版本的golang或者你需要的版本。接下来如果是windows的机器，那么只需要一路next就行了,之后在&lt;code&gt;c:\\go&lt;/code&gt;文件夹下就可以了。如果是Linux系统，只需要将tar.gz包解压到自己工作的位置，然后将$GOLANG_PATH\bin加入到path就可以了。&lt;/p&gt;
    
    </summary>
    
      <category term="Go" scheme="http://chenzhijun.me/categories/Go/"/>
    
    
      <category term="golang" scheme="http://chenzhijun.me/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>PaaS 平台应当具备的能力</title>
    <link href="http://chenzhijun.me/2019/07/06/the-ability-of-a-paas-platform/"/>
    <id>http://chenzhijun.me/2019/07/06/the-ability-of-a-paas-platform/</id>
    <published>2019-07-06T05:23:12.000Z</published>
    <updated>2019-12-03T12:27:49.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PaaS-平台应当具备的能力"><a href="#PaaS-平台应当具备的能力" class="headerlink" title="PaaS 平台应当具备的能力"></a>PaaS 平台应当具备的能力</h1><p>一个完善的paas平台应该具备的能力:</p><p><img src="/images/qiniu/2019-07-06-13-31-12.png" alt="2019-07-06-13-31-12"></p><p>代码管理中有gitlab，github，gitee. etc…</p><p>配置管理中：开发，测试，生产一致性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PaaS-平台应当具备的能力&quot;&gt;&lt;a href=&quot;#PaaS-平台应当具备的能力&quot; class=&quot;headerlink&quot; title=&quot;PaaS 平台应当具备的能力&quot;&gt;&lt;/a&gt;PaaS 平台应当具备的能力&lt;/h1&gt;&lt;p&gt;一个完善的paas平台应该具备的能力:&lt;/p
      
    
    </summary>
    
      <category term="Paas" scheme="http://chenzhijun.me/categories/Paas/"/>
    
    
      <category term="PaaS" scheme="http://chenzhijun.me/tags/PaaS/"/>
    
  </entry>
  
  <entry>
    <title>Java 类转 Json 时属性名使用下划线</title>
    <link href="http://chenzhijun.me/2019/07/06/java-json-generate-with-underline/"/>
    <id>http://chenzhijun.me/2019/07/06/java-json-generate-with-underline/</id>
    <published>2019-07-05T16:26:28.000Z</published>
    <updated>2019-12-03T12:27:49.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-类转-Json-时属性名使用下划线"><a href="#Java-类转-Json-时属性名使用下划线" class="headerlink" title="Java 类转 Json 时属性名使用下划线"></a>Java 类转 Json 时属性名使用下划线</h1><p>很多时候和其它系统对接的时候，不太喜欢用驼峰的方式，毕竟如果是给前端的api，写个驼峰总感觉有点怪异，总喜欢将属性使用下划线。也就是一个<code>bookName</code>,给前端的时候是：<code>book_name</code>，当然如果是后台系统，还是使用驼峰啊。</p><h2 id="Java-统一-json-为下划线"><a href="#Java-统一-json-为下划线" class="headerlink" title="Java 统一 json 为下划线"></a>Java 统一 json 为下划线</h2><p>在 Java 中有两种方式可以实现这种方式，一种是全局的，一种是局部。<br><a id="more"></a></p><h3 id="全局修改属性的json名为下划线格式"><a href="#全局修改属性的json名为下划线格式" class="headerlink" title="全局修改属性的json名为下划线格式"></a>全局修改属性的json名为下划线格式</h3><p>如果需要全局的修改，那么只需要在类上面使用<code>@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun.enumjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.PropertyNamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonNaming;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonNaming</span>(PropertyNamingStrategy.SnakeCaseStrategy<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Instance</span> </span>&#123;</span><br><span class="line">    Object state;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Instance</span><span class="params">(Object state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state=state;</span><br><span class="line">        <span class="keyword">this</span>.bookName=<span class="string">"《json转换》"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(Object state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBookName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookName</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换后的json为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"state"</span>: <span class="string">"Success"</span>,</span><br><span class="line">    <span class="attr">"book_name"</span>: <span class="string">"《json转换》"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部修改属性的json名为下划线格式"><a href="#局部修改属性的json名为下划线格式" class="headerlink" title="局部修改属性的json名为下划线格式"></a>局部修改属性的json名为下划线格式</h3><p>局部的方式就是使用<code>@JsonProperty(value = &quot;book_name&quot;)</code>这个作用在属性上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun.enumjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Instance</span> </span>&#123;</span><br><span class="line">    String state;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span>(value = <span class="string">"book_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Instance</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        <span class="keyword">this</span>.bookName = <span class="string">"《json转换》"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBookName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookName</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jsonTest</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    Instance instance = <span class="keyword">new</span> Instance(<span class="string">"success"</span>);</span><br><span class="line">    System.out.println(objectMapper.writeValueAsString(instance));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-类转-Json-时属性名使用下划线&quot;&gt;&lt;a href=&quot;#Java-类转-Json-时属性名使用下划线&quot; class=&quot;headerlink&quot; title=&quot;Java 类转 Json 时属性名使用下划线&quot;&gt;&lt;/a&gt;Java 类转 Json 时属性名使用下划线&lt;/h1&gt;&lt;p&gt;很多时候和其它系统对接的时候，不太喜欢用驼峰的方式，毕竟如果是给前端的api，写个驼峰总感觉有点怪异，总喜欢将属性使用下划线。也就是一个&lt;code&gt;bookName&lt;/code&gt;,给前端的时候是：&lt;code&gt;book_name&lt;/code&gt;，当然如果是后台系统，还是使用驼峰啊。&lt;/p&gt;
&lt;h2 id=&quot;Java-统一-json-为下划线&quot;&gt;&lt;a href=&quot;#Java-统一-json-为下划线&quot; class=&quot;headerlink&quot; title=&quot;Java 统一 json 为下划线&quot;&gt;&lt;/a&gt;Java 统一 json 为下划线&lt;/h2&gt;&lt;p&gt;在 Java 中有两种方式可以实现这种方式，一种是全局的，一种是局部。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://chenzhijun.me/tags/Java/"/>
    
      <category term="Json" scheme="http://chenzhijun.me/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>Java Enum 与 Json 的互相转换</title>
    <link href="http://chenzhijun.me/2019/07/06/java-enum-how-to-generate-json/"/>
    <id>http://chenzhijun.me/2019/07/06/java-enum-how-to-generate-json/</id>
    <published>2019-07-05T16:24:55.000Z</published>
    <updated>2019-12-03T12:27:49.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Enum-与-Json-的互相转换"><a href="#Java-Enum-与-Json-的互相转换" class="headerlink" title="Java Enum 与 Json 的互相转换"></a>Java Enum 与 Json 的互相转换</h1><p>在Java中使用Enum的频率很高，我们也经常使用 Enum 作为类的一个属性定义。那么如果需要将Enum转换成Json或者将Json传转换成Enum该怎么操作了？接下来我们看一下。Enum序列化成Json的几种方式。</p><blockquote><p>本实例使用的是<code>jackson</code>的包，用的是<code>ObjectMapper</code>.</p></blockquote><p>首先我们定义一个类<code>Instance</code>，里面有一个<code>Enum</code>的参数: <strong>state</strong> ; 在这里我们为了方便观察几种不同 Enum 的json序列化方式，state定义为<code>Object</code>,<code>Instance</code>类定义如下;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun.enumjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.PropertyNamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonNaming;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonNaming</span>(PropertyNamingStrategy.SnakeCaseStrategy<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Instance</span> </span>&#123;</span><br><span class="line">    Object state;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Instance</span><span class="params">(Object state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state=state;</span><br><span class="line">        <span class="keyword">this</span>.bookName=<span class="string">"《Java枚举类-json转换》"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(Object state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBookName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookName</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="原生Enum"><a href="#原生Enum" class="headerlink" title="原生Enum"></a>原生Enum</h2><p>这种我们通常是不做任何改动，就一个普通的定义Enum:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun.enumjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line">    SUCCESS(<span class="string">"success"</span>, <span class="number">1</span>), FAILED(<span class="string">"failed"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    State(String value, <span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种方式下，我们可以看一下转换成json后的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enumJsonTest</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    <span class="comment">//枚举类不做任何改动json转化结果</span></span><br><span class="line">    System.out.println(<span class="string">"枚举不做任何改动json转化结果:"</span>);</span><br><span class="line">    Instance instance = <span class="keyword">new</span> Instance(State.SUCCESS);</span><br><span class="line">    System.out.println(objectMapper.writeValueAsString(instance));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后可以看到结果为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"state"</span>:<span class="string">"SUCCESS"</span>,<span class="attr">"name"</span>:<span class="string">"《Java枚举类-json》"</span>&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，Enum默认使用的是<code>enum.name()</code>来作为json的值。</p><h2 id="使用-Enum-的所有属性值作为json值"><a href="#使用-Enum-的所有属性值作为json值" class="headerlink" title="使用 Enum 的所有属性值作为json值"></a>使用 Enum 的所有属性值作为json值</h2><p>有时候我们可以让Enum像一个普通类一样，json序列化的时候将其中的所有属性都能输出，可以使用的方式是在Enum的定义上加上<code>@JsonFormat(shape = JsonFormat.Shape.OBJECT)</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun.enumjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonFormat</span>(shape = JsonFormat.Shape.OBJECT)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State2 &#123;</span><br><span class="line">    SUCCESS(<span class="string">"success"</span>, <span class="number">1</span>), FAILED(<span class="string">"failed"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    State2(String value, <span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法如上,输出的结果为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"state"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"success"</span>,</span><br><span class="line">        <span class="attr">"num"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"book_name"</span>: <span class="string">"《Java枚举类-json转换》"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Enum的某一个属性作为json值"><a href="#使用Enum的某一个属性作为json值" class="headerlink" title="使用Enum的某一个属性作为json值"></a>使用Enum的某一个属性作为json值</h2><p>有时候我们可能想要使用Enum中定义的某一个自定义属性的值，只需要在属性的<code>get</code>方法上使用<code>@JsonValue</code>即可满足需求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun.enumjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State1 &#123;</span><br><span class="line">    SUCCESS(<span class="string">"success"</span>, <span class="number">1</span>), FAILED(<span class="string">"failed"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    State1(String value, <span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法如上,输出的结果为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"state"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="attr">"book_name"</span>: <span class="string">"《Java枚举类-json转换》"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到与原生的Enum相比，state的值变成了我们在Enum中定义的<code>value</code>。<strong>注意值的大小写</strong>。</p><h2 id="自定义序列化结果"><a href="#自定义序列化结果" class="headerlink" title="自定义序列化结果"></a>自定义序列化结果</h2><p>有时候我们还可能想更高级一点，那么就可以自定义序列化结果。比如Enum的属性<code>num</code>，原本是<code>int</code>类型，但是我们就是想让它变成一个<code>String</code>类型，或者我不想要Enum其中的某一个变量。那么可以自己实现序列化接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> me.chenzhijun.enumjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.StdSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateSerializer</span> <span class="keyword">extends</span> <span class="title">StdSerializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">StateSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(State3<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object o, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> State3)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        State3 state = (State3) o;</span><br><span class="line"></span><br><span class="line">        jsonGenerator.writeStartObject();</span><br><span class="line">        jsonGenerator.writeFieldName(<span class="string">"name"</span>);</span><br><span class="line">        jsonGenerator.writeString(state.name());</span><br><span class="line">        jsonGenerator.writeFieldName(<span class="string">"value"</span>);</span><br><span class="line">        jsonGenerator.writeString(state.getValue());</span><br><span class="line">        jsonGenerator.writeFieldName(<span class="string">"num"</span>);</span><br><span class="line"><span class="comment">//        jsonGenerator.writeNumber(state.getNum());</span></span><br><span class="line">        jsonGenerator.writeString(String.valueOf(state.getNum()));</span><br><span class="line">        jsonGenerator.writeEndObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们定义了我们自己的特殊要求，之后再Enum的定义中进行指定,使用<code>@JsonSerialize(using = StateSerializer.class)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun.enumjson;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonSerialize;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonSerialize</span>(using = StateSerializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">enum</span> <span class="title">State3</span> </span>&#123;</span><br><span class="line">    SUCCESS(<span class="string">"success"</span>, <span class="number">1</span>), FAILED(<span class="string">"failed"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    State3(String value, <span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法如上，输出的结果为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"state"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"SUCCESS"</span>,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"success"</span>,</span><br><span class="line">        <span class="attr">"num"</span>: <span class="string">"1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"book_name"</span>: <span class="string">"《Java枚举类-json转换》"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上所有的测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun.enumjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumJsonTest</span> </span>&#123;</span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enumJsonTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//枚举类不做任何改动json转化结果</span></span><br><span class="line">        System.out.println(<span class="string">"枚举不做任何改动json转化结果:"</span>);</span><br><span class="line">        Instance instance = <span class="keyword">new</span> Instance(State.SUCCESS);</span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(instance));<span class="comment">//&#123;"state":"SUCCESS","name":"《Java枚举类-json》"&#125;</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n使用枚举的某一个参数作为json的转化结果:"</span>);</span><br><span class="line">        instance = <span class="keyword">new</span> Instance(State1.SUCCESS);</span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(instance));<span class="comment">//&#123;"state":"success","book_name":"《Java枚举类-json转换》"&#125;</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n将Enum所有的参数一起作为json的转化结果:"</span>);</span><br><span class="line">        instance = <span class="keyword">new</span> Instance(State2.SUCCESS);</span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(instance));<span class="comment">//&#123;"state":&#123;"value":"success","num":1&#125;,"book_name":"《Java枚举类-json转换》"&#125;</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n使用serializer自定义enum的json转化结果:"</span>);</span><br><span class="line">        instance = <span class="keyword">new</span> Instance(State3.SUCCESS);</span><br><span class="line">        System.out.println(objectMapper.writeValueAsString(instance));<span class="comment">//&#123;"state":&#123;"name":"SUCCESS","value":"success","num":"1"&#125;,"book_name":"《Java枚举类-json转换》"&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"json-&gt;class"</span>);</span><br><span class="line">        String json = <span class="string">"&#123;\"state\":&#123;\"value\":\"success\",\"num\":1&#125;,\"book_name\":\"《Java枚举类-json转换》\"&#125;\n"</span>;</span><br><span class="line">        instance = objectMapper.readValue(json, Instance<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(instance.getState());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，Enum的Json转化就可以任君”宰割”了~~</p><p>如果是Json串转Java类型，就把上面的方式换过来即可。比如上一个测试类中的：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String json = "&#123;\"state\":&#123;\"value\":\"success\",\"num\":1&#125;,\"book_name\":\"《Java枚举类-json转换》\"&#125;\n";</span><br><span class="line">instance = objectMapper.readValue(json, Instance.class);</span><br><span class="line">System.out.println(instance.getState());</span><br></pre></td></tr></table></figure><p>嗯嗯~全文完~</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-Enum-与-Json-的互相转换&quot;&gt;&lt;a href=&quot;#Java-Enum-与-Json-的互相转换&quot; class=&quot;headerlink&quot; title=&quot;Java Enum 与 Json 的互相转换&quot;&gt;&lt;/a&gt;Java Enum 与 Json 的互相转换&lt;/h1&gt;&lt;p&gt;在Java中使用Enum的频率很高，我们也经常使用 Enum 作为类的一个属性定义。那么如果需要将Enum转换成Json或者将Json传转换成Enum该怎么操作了？接下来我们看一下。Enum序列化成Json的几种方式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本实例使用的是&lt;code&gt;jackson&lt;/code&gt;的包，用的是&lt;code&gt;ObjectMapper&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先我们定义一个类&lt;code&gt;Instance&lt;/code&gt;，里面有一个&lt;code&gt;Enum&lt;/code&gt;的参数: &lt;strong&gt;state&lt;/strong&gt; ; 在这里我们为了方便观察几种不同 Enum 的json序列化方式，state定义为&lt;code&gt;Object&lt;/code&gt;,&lt;code&gt;Instance&lt;/code&gt;类定义如下;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; me.chenzhijun.enumjson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.fasterxml.jackson.databind.PropertyNamingStrategy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.fasterxml.jackson.databind.annotation.JsonNaming;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@JsonNaming&lt;/span&gt;(PropertyNamingStrategy.SnakeCaseStrategy&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Instance&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Object state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String bookName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object state)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state=state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bookName=&lt;span class=&quot;string&quot;&gt;&quot;《Java枚举类-json转换》&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object state)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getBookName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bookName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBookName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String bookName)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bookName = bookName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://chenzhijun.me/tags/Java/"/>
    
      <category term="Enum" scheme="http://chenzhijun.me/tags/Enum/"/>
    
      <category term="Json" scheme="http://chenzhijun.me/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Autocommit</title>
    <link href="http://chenzhijun.me/2019/06/30/mysql-autocommit/"/>
    <id>http://chenzhijun.me/2019/06/30/mysql-autocommit/</id>
    <published>2019-06-30T08:44:26.000Z</published>
    <updated>2019-12-03T12:27:49.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL-Autocommit"><a href="#MySQL-Autocommit" class="headerlink" title="MySQL Autocommit"></a>MySQL Autocommit</h1><p>最近遇到一个问题，在测试环境没有重现，但是在生产环境就频繁出现。问题的现象时，当我们在生产页面添加一个用户或者一条记录的时候，刷新页面始终是为空的数据，也就是数据没有入库，但是偶尔它又有数据。这个问题就很奇怪。后来追踪到代码的时候发现代码层没有做事务的控制，完全交给了数据库去管理，这个时候如果代码从db申请一个连接，然后完成操作之后，其实是否真实的commit是要看数据库的操作的。MySQL默认的配置中是将autocommit设置为1，也就是默认打开，但是我们公司的dba设置中，统一是0也就是关闭状态的，所以导致了这次事故的发生。作为一个程序员来说，我觉得，应该是要自己在业务逻辑层面来控制，不应该交由db去管理，这种行为有点可耻。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MySQL-Autocommit&quot;&gt;&lt;a href=&quot;#MySQL-Autocommit&quot; class=&quot;headerlink&quot; title=&quot;MySQL Autocommit&quot;&gt;&lt;/a&gt;MySQL Autocommit&lt;/h1&gt;&lt;p&gt;最近遇到一个问题，在测试环境
      
    
    </summary>
    
      <category term="MySQL" scheme="http://chenzhijun.me/categories/MySQL/"/>
    
    
      <category term="autocommit" scheme="http://chenzhijun.me/tags/autocommit/"/>
    
  </entry>
  
  <entry>
    <title>Linux 工具-tar</title>
    <link href="http://chenzhijun.me/2019/06/30/linux-tool-tar/"/>
    <id>http://chenzhijun.me/2019/06/30/linux-tool-tar/</id>
    <published>2019-06-30T08:32:24.000Z</published>
    <updated>2019-12-03T12:27:49.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-工具-tar"><a href="#Linux-工具-tar" class="headerlink" title="Linux 工具-tar"></a>Linux 工具-tar</h1><p>tar 命令应该是我们经常用的了，它主要的功能是用来对文件的解压缩操作。如果要看tar的具体操作可以使用:<code>man tar</code>，Linux的发行版本默认都会有 tar 命令</p><h2 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h2><p>tar 常用来解压<code>tar.gz</code>,<code>tar</code>的文件。使用的方式：<code>tar -zxvf xxx.tar.gz</code></p><h2 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h2><p>通常我们也会有需要将多个文件压缩成一个文件的需求，比如传输文件。这个时候我们就可以使用<code>tar -zvcf xxx.tar.gz file-dir-path1 file-dir-path2 file-dir-path-n</code> 其中<code>path1</code>,<code>path2</code>,<code>path-n</code>可以是多个或者单个。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-工具-tar&quot;&gt;&lt;a href=&quot;#Linux-工具-tar&quot; class=&quot;headerlink&quot; title=&quot;Linux 工具-tar&quot;&gt;&lt;/a&gt;Linux 工具-tar&lt;/h1&gt;&lt;p&gt;tar 命令应该是我们经常用的了，它主要的功能是用来对文件的
      
    
    </summary>
    
      <category term="Linux" scheme="http://chenzhijun.me/categories/Linux/"/>
    
    
      <category term="tools" scheme="http://chenzhijun.me/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Linux 工具-socat</title>
    <link href="http://chenzhijun.me/2019/06/30/linux-tool-socat/"/>
    <id>http://chenzhijun.me/2019/06/30/linux-tool-socat/</id>
    <published>2019-06-30T08:20:53.000Z</published>
    <updated>2019-12-03T12:27:49.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-工具-socat"><a href="#Linux-工具-socat" class="headerlink" title="Linux 工具-socat"></a>Linux 工具-socat</h1><p>socat是一个多功能的网络工具，官网：<a href="http://www.dest-unreach.org/socat/" target="_blank" rel="noopener">http://www.dest-unreach.org/socat/</a></p><h2 id="安装socat"><a href="#安装socat" class="headerlink" title="安装socat"></a>安装socat</h2><p>安装方式很简单：<code>yum install -y socat</code>,就可以了，当然如果是ubuntu的机器就是用<code>apt</code></p><h2 id="使用socat"><a href="#使用socat" class="headerlink" title="使用socat"></a>使用socat</h2><p>公司内部的网络限制比较严格，只有一些常用的端口能正常访问，因此调试的时候非常麻烦，比如你的应用程序端口是19995，但是公司只能是8080来访问，这个时候怎么办？使用nginx或haproxy当然可以，但是麻烦啊，配置搞一堆。。但是使用socat就很方便了:<code>socat TCP4-LISTEN:{port1},reuseaddr,fork TCP4:{ip:port2}</code> ，比如你有三台机器A(127.0.0.1)；B(127.0.0.2）；C（192.168.1.1）。B能访问A的8080端口，但是不能访问C的9090端口，而服务又监听的是C的9090端口，A能访问C的9090端口。所以很当然会想到B–&gt;A:8080–&gt;C:9090。也就是在A做一层反向代理。socat就是这样的。在A上我们执行：<code>socat TCP4-LISTEN:8080,reuseaddr,fork TCP4:192.168.1.1:9090</code>。然后B就访问A:8080,就能访问到C的9090端口了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-工具-socat&quot;&gt;&lt;a href=&quot;#Linux-工具-socat&quot; class=&quot;headerlink&quot; title=&quot;Linux 工具-socat&quot;&gt;&lt;/a&gt;Linux 工具-socat&lt;/h1&gt;&lt;p&gt;socat是一个多功能的网络工具，官网：&lt;a
      
    
    </summary>
    
      <category term="Linux" scheme="http://chenzhijun.me/categories/Linux/"/>
    
    
      <category term="tools" scheme="http://chenzhijun.me/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Docker 镜像仓库清理</title>
    <link href="http://chenzhijun.me/2019/06/30/docker-registry-clean/"/>
    <id>http://chenzhijun.me/2019/06/30/docker-registry-clean/</id>
    <published>2019-06-30T08:07:52.000Z</published>
    <updated>2019-12-03T12:27:49.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-镜像仓库清理"><a href="#Docker-镜像仓库清理" class="headerlink" title="Docker 镜像仓库清理"></a>Docker 镜像仓库清理</h1><p>公司使用registry作为镜像仓库管理，由于只对内使用并且只暴露给jenkins，不对其它人公开，因此也就没有做registry的限制。不过由于我们在jenkins构建的时候使用docker 的一个插件，但是我们公司又系统在构建的时候不还tag，因此造成同一个名字有很多历史的layer都保存在了镜像仓库中，占用的空间随着时间越来越大。经过这次清理，由原来的占用1.9T清理空间到占用195G，效果还是非常的明显。</p><p>清理的步骤如下，下面的步骤适用于镜像名和tag都相同，然后重复push的情景下：<br><a id="more"></a></p><h2 id="清理多余的manifest"><a href="#清理多余的manifest" class="headerlink" title="清理多余的manifest"></a>清理多余的manifest</h2><p>适用命令：<br><code>docker run -d -v /data/registry:/registry -e REGISTRY_URL=http://NaN:5000 mortensrasmussen/docker-registry-manifest-cleanup:latest</code></p><p><code>mortensrasmussen/docker-registry-manifest-cleanup:latest</code>是一个开源的工具：<a href="https://github.com/mortensteenrasmussen/docker-registry-manifest-cleanup" target="_blank" rel="noopener">docker-registry-manifest-cleanup</a>。其中<code>-v /data/registry:/registry</code> /data/registry 是镜像仓库registry使用的存储在主机上的目录。</p><blockquote><p>ps:你的registry 是用容器的方式跑的：<code>docker run -v /data/registry:/registry -p 5000:5000 xxxxx/registry:latest</code> 这个就是<code>/data/registry</code>在本地存储的位置。</p></blockquote><h2 id="registry-的清理"><a href="#registry-的清理" class="headerlink" title="registry 的清理"></a>registry 的清理</h2><p>执行完上面的步骤还不够，还需要调用registry的清理功能才能实际释放空间:<code>docker exec registry /bin/registry garbage-collect /etc/docker/registry/config.yml</code></p><p><code>config.yaml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">filesystem:</span></span><br><span class="line">    <span class="attr">rootdirectory:</span> <span class="string">/var/lib/registry</span></span><br><span class="line">  <span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">:5000</span></span><br><span class="line">  <span class="attr">headers:</span></span><br><span class="line">    <span class="attr">X-Content-Type-Options:</span> <span class="string">[nosniff]</span></span><br><span class="line"><span class="attr">health:</span></span><br><span class="line">  <span class="attr">storagedriver:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">threshold:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>执行完之后再使用<code>df -h</code>你就可以看到磁盘的空间被释放出来了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-镜像仓库清理&quot;&gt;&lt;a href=&quot;#Docker-镜像仓库清理&quot; class=&quot;headerlink&quot; title=&quot;Docker 镜像仓库清理&quot;&gt;&lt;/a&gt;Docker 镜像仓库清理&lt;/h1&gt;&lt;p&gt;公司使用registry作为镜像仓库管理，由于只对内使用并且只暴露给jenkins，不对其它人公开，因此也就没有做registry的限制。不过由于我们在jenkins构建的时候使用docker 的一个插件，但是我们公司又系统在构建的时候不还tag，因此造成同一个名字有很多历史的layer都保存在了镜像仓库中，占用的空间随着时间越来越大。经过这次清理，由原来的占用1.9T清理空间到占用195G，效果还是非常的明显。&lt;/p&gt;
&lt;p&gt;清理的步骤如下，下面的步骤适用于镜像名和tag都相同，然后重复push的情景下：&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://chenzhijun.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chenzhijun.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 与 Linux Namespace &amp;&amp; Cgroups</title>
    <link href="http://chenzhijun.me/2019/06/30/docker-lxc-cgroup/"/>
    <id>http://chenzhijun.me/2019/06/30/docker-lxc-cgroup/</id>
    <published>2019-06-30T05:40:28.000Z</published>
    <updated>2019-12-03T12:27:49.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-与-Linux-Namespace-amp-amp-Cgroups"><a href="#Docker-与-Linux-Namespace-amp-amp-Cgroups" class="headerlink" title="Docker 与 Linux Namespace &amp;&amp; Cgroups"></a>Docker 与 Linux Namespace &amp;&amp; Cgroups</h1><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker?"></a>什么是Docker?</h2><p>不得不说这几年技术领域最火的就是“容器”这个词了。而谈到容器，大家的第一反应就是 Docker ,Docker 已经再很多人心中成了容器的代名词。那么Docker到底是什么？Docker能为我们带来什么？</p><p>官网上用来解释Docker的一句话:<code>Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers</code>。Docker 就是一个开源的工具，将我们的应用打包成标准的镜像格式，并且以容器的方式运行。容器化的越来越流行，带给我们的优势也是非常多：</p><ol><li>灵活性：再复杂的应用都可以被容器化；</li><li>轻量级：容器利用共享的是主机内核；</li><li>即时性：可以随时部署更新和升级；</li><li>通用性：一次构建，到处运行；</li><li>伸缩性：控制容器副本数量来任意伸缩；<a id="more"></a><h2 id="Docker-与虚拟机的比较"><a href="#Docker-与虚拟机的比较" class="headerlink" title="Docker 与虚拟机的比较"></a>Docker 与虚拟机的比较</h2></li></ol><p>容器与容器之间是共享Kernel的，各容器直接互相隔离。它只运行一个独立的进程，没有其它的执行进程，也不需要占用其它额外的资源。</p><p>虚拟机运行的是一个独立的完整的系统，占用的资源也要比独立的应用需要的多。他们两者区别在于虚拟机管理程序对整个设备进行抽象处理，而容器只是对操作系统内核进行抽象处理。下面这张图可以对两者有个认知了解：</p><p><img src="/images/qiniu/2019-06-30-15-12-00.png" alt="2019-06-30-15-12-00"></p><h2 id="Linux-Namespace"><a href="#Linux-Namespace" class="headerlink" title="Linux Namespace"></a>Linux Namespace</h2><p>我们经常听到，Docker其实并不是单独创造的一个技术，在早期，Docker其实就是基于Linux上的LXC(Linux Container)项目来创建单个应用程序的容器，目前Docker使用libcontainer来直接操作核心namespace和cgoup。这里我们了解下Linux Namesapce。Linux namespace是Kernel的功能，主要用来隔离一系列资源，目前Linux有6种不同类型的Namespace：</p><ol><li>Mount Namespace, CLONE_NEWNS, 用来隔离nodename和domainname;</li><li>UTS Namespace, CLONE_NEWUTS, 用来隔离 System V IPC 和 POSIX message queues;</li><li>IPC Namespace, CLONE_NEWIPC, 用来隔离进行ID;</li><li>PID Namespace, CLONE_NEWPID, 用来隔离各个进程看到的挂载点视图;</li><li>Network Namespace, CLONE_NEWNET, 用来隔离网络设备、IP 地址端口等网络栈的 Namespace;</li><li>User Namespace, CLONE_NEWUSER, 用来隔离用户的用户组ID;</li></ol><h2 id="Linux-Cgroups"><a href="#Linux-Cgroups" class="headerlink" title="Linux Cgroups"></a>Linux Cgroups</h2><p>Linux Cgroups (Control Groups) 提供了一组进程及将来子进程的资源限制、控制和统计的能力，资源包括CPU、内存、存储、网络等。通过Cgroups,可以方便地限制某个进程的资源占用，并且可以实时地监控进程的监控和统计信息。Cgroups的三个组件，</p><ol><li>cgroup</li><li>subsystem</li><li>hierarchy</li></ol><h2 id="libcontainer"><a href="#libcontainer" class="headerlink" title="libcontainer"></a>libcontainer</h2><p>libcontainer 是Docker开源的一个项目，目前runC的实现也已经有原来的LXC变为libcontainer。官网对libcontainer的解释：<a href="https://docs.docker.com/glossary/?term=libcontainer" target="_blank" rel="noopener">libcontainer provides a native Go implementation for creating containers with namespaces, cgroups, capabilities, and filesystem access controls. It allows you to manage the lifecycle of the container performing additional operations after the container is created</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-与-Linux-Namespace-amp-amp-Cgroups&quot;&gt;&lt;a href=&quot;#Docker-与-Linux-Namespace-amp-amp-Cgroups&quot; class=&quot;headerlink&quot; title=&quot;Docker 与 Linux Namespace &amp;amp;&amp;amp; Cgroups&quot;&gt;&lt;/a&gt;Docker 与 Linux Namespace &amp;amp;&amp;amp; Cgroups&lt;/h1&gt;&lt;h2 id=&quot;什么是Docker&quot;&gt;&lt;a href=&quot;#什么是Docker&quot; class=&quot;headerlink&quot; title=&quot;什么是Docker?&quot;&gt;&lt;/a&gt;什么是Docker?&lt;/h2&gt;&lt;p&gt;不得不说这几年技术领域最火的就是“容器”这个词了。而谈到容器，大家的第一反应就是 Docker ,Docker 已经再很多人心中成了容器的代名词。那么Docker到底是什么？Docker能为我们带来什么？&lt;/p&gt;
&lt;p&gt;官网上用来解释Docker的一句话:&lt;code&gt;Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers&lt;/code&gt;。Docker 就是一个开源的工具，将我们的应用打包成标准的镜像格式，并且以容器的方式运行。容器化的越来越流行，带给我们的优势也是非常多：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;灵活性：再复杂的应用都可以被容器化；&lt;/li&gt;
&lt;li&gt;轻量级：容器利用共享的是主机内核；&lt;/li&gt;
&lt;li&gt;即时性：可以随时部署更新和升级；&lt;/li&gt;
&lt;li&gt;通用性：一次构建，到处运行；&lt;/li&gt;
&lt;li&gt;伸缩性：控制容器副本数量来任意伸缩；
    
    </summary>
    
      <category term="Docker" scheme="http://chenzhijun.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chenzhijun.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud 集成 Consul</title>
    <link href="http://chenzhijun.me/2019/05/31/springcloud-consul-integration/"/>
    <id>http://chenzhijun.me/2019/05/31/springcloud-consul-integration/</id>
    <published>2019-05-31T13:10:57.000Z</published>
    <updated>2019-12-03T12:27:49.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud-集成-Consul"><a href="#SpringCloud-集成-Consul" class="headerlink" title="SpringCloud 集成 Consul"></a>SpringCloud 集成 Consul</h1><p>SpringBoot ，SpringCloud 可以说是在 Spring 里面最流行的，确实它的上手要比以前开发真的方便很多，约定优于配置。</p><p>springcloud可以理解成基于springboot的各种解决方案。</p><h2 id="集成consul"><a href="#集成consul" class="headerlink" title="集成consul"></a>集成consul</h2><p>我们没有使用eureka作为注册中心，而是使用consul，为什么了？因为eureka停止更新了。嗯，是的，如果没有人继续维护了，那我就觉得使用起来就会有局限性，这个不是在前期，而是在后期。而且官方都不更新维护了，以后我发现bug，都没有提PR的地方了~~~~嘿嘿。其实个人觉得注册中心以后可能会下沉，比如现在的k8s，就已经在底层平台解决了服务发现与注册的问题。当然那是扯远了，我们暂时还是先用consul做我们的注册中心，毕竟一套k8s也并不是那么好玩的。</p><p>在官网下载consul的安装包，然后使用<code>consul agent -dev</code>我们就可以在通过<code>http://IP:8500</code>端口来访问了。<br><a id="more"></a></p><h2 id="Springcloud-集成consul"><a href="#Springcloud-集成consul" class="headerlink" title="Springcloud 集成consul"></a>Springcloud 集成consul</h2><h3 id="服务提供方"><a href="#服务提供方" class="headerlink" title="服务提供方"></a>服务提供方</h3><p>我们的代码结构如下：</p><p><img src="/images/qiniu/2019-05-31-21-09-48.png" alt="2019-05-31-21-09-48"></p><p>我们使用springcloud提供的<code>spring-cloud-starter-consul-discovery</code>,这是集成了consul的starter，完整的<code>pom.xml</code>如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.chenzhijun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-consul-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-consul-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>consul project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后看下我们的<code>application.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org.springframework.cloud.consul:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">management:</span> <span class="comment"># 需要一个health端口来让consul回调</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">base-path:</span> <span class="string">/admin</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">      <span class="attr">context-path:</span> <span class="string">/admin</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">18080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-app</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span> <span class="comment"># consul 地址</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">user-app</span> <span class="comment"># 注册到consul的名字</span></span><br><span class="line">        <span class="attr">management-port:</span> <span class="number">18080</span> <span class="comment"># consul会来访问这个端口+health-check-path 来判断应用是否正常</span></span><br><span class="line">        <span class="attr">health-check-path:</span> <span class="string">$&#123;management.server.servlet.context-path&#125;$&#123;management.endpoints.web.base-path&#125;/health</span></span><br></pre></td></tr></table></figure><p>在服务提供方我们的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun.consul;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsulApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World123"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里需要使用<code>@EnableDiscoveryClient</code> 这样就能让项目注册到consul了。</p><h3 id="服务调用方"><a href="#服务调用方" class="headerlink" title="服务调用方"></a>服务调用方</h3><p>既然是注册中心，我们有了服务提供方，当然需要服务调用方啦。调用方的结构如下：</p><p><img src="/images/qiniu/2019-05-31-21-31-41.png" alt="2019-05-31-21-31-41"></p><p>pom文件的内容类似<code>pom.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.chenzhijun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-consul-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-consul-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">user-client</span></span><br><span class="line">        <span class="attr">health-check-path:</span> <span class="string">$&#123;management.endpoints.web.base-path&#125;/health</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">    <span class="attr">level:</span></span><br><span class="line">      <span class="attr">org.springframework.cloud.consul:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">18088</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">base-path:</span> <span class="string">/admin</span></span><br></pre></td></tr></table></figure><p>我们再看<code>Application.java</code>的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun.calltest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalltestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CalltestApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//restTemplate 必须使用@LoadBalanced创建</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/abc"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="string">"user-app"</span>);</span><br><span class="line"><span class="comment">//        if (list != null &amp;&amp; !list.isEmpty()) &#123;</span></span><br><span class="line"><span class="comment">//            String serviceId = list.get(0).getServiceId();</span></span><br><span class="line"><span class="comment">//            URI uri = list.get(0).getUri();</span></span><br><span class="line"><span class="comment">//            System.out.println(uri.toString());</span></span><br><span class="line"><span class="comment">//            String url = "http://" + list.get(0).getHost() + ":" + list.get(0).getPort() + "/hello";</span></span><br><span class="line"><span class="comment">//            RestTemplate restTemplate = new RestTemplate();</span></span><br><span class="line"><span class="comment">//            String result = restTemplate.getForEntity(url, String.class).getBody();</span></span><br><span class="line"><span class="comment">//            ResponseEntity&lt;String&gt; forEntity = restTemplate.getForEntity(url, String.class);</span></span><br><span class="line"><span class="comment">//            System.out.println(forEntity.getBody());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里我们使用的是服务名user-app直接调用，注意这里的resttemplate一定要用@Bean @LoadBalanced 不然会报错</span></span><br><span class="line">        ResponseEntity&lt;String&gt; forEntity = restTemplate.getForEntity(<span class="string">"http://user-app/hello"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> forEntity.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在浏览器里面访问<code>http://localhost:8088/abc</code>就能看到返回<code>Hello World123</code>了。</p><p>ps:<br>1：为什么RestTemplate必须要使用@LoadBalanced ?<br>2：springboot actuator starter 能否去掉，去掉的话应该怎么实现？<br>3：你觉得独立的注册中心未来的路会是怎样？</p><p>今天5月31日，改日回答，<a href="http://chenzhijun.me/2019/05/31/springcloud-consul-integration/">记住来看答案</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud-集成-Consul&quot;&gt;&lt;a href=&quot;#SpringCloud-集成-Consul&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud 集成 Consul&quot;&gt;&lt;/a&gt;SpringCloud 集成 Consul&lt;/h1&gt;&lt;p&gt;SpringBoot ，SpringCloud 可以说是在 Spring 里面最流行的，确实它的上手要比以前开发真的方便很多，约定优于配置。&lt;/p&gt;
&lt;p&gt;springcloud可以理解成基于springboot的各种解决方案。&lt;/p&gt;
&lt;h2 id=&quot;集成consul&quot;&gt;&lt;a href=&quot;#集成consul&quot; class=&quot;headerlink&quot; title=&quot;集成consul&quot;&gt;&lt;/a&gt;集成consul&lt;/h2&gt;&lt;p&gt;我们没有使用eureka作为注册中心，而是使用consul，为什么了？因为eureka停止更新了。嗯，是的，如果没有人继续维护了，那我就觉得使用起来就会有局限性，这个不是在前期，而是在后期。而且官方都不更新维护了，以后我发现bug，都没有提PR的地方了~~~~嘿嘿。其实个人觉得注册中心以后可能会下沉，比如现在的k8s，就已经在底层平台解决了服务发现与注册的问题。当然那是扯远了，我们暂时还是先用consul做我们的注册中心，毕竟一套k8s也并不是那么好玩的。&lt;/p&gt;
&lt;p&gt;在官网下载consul的安装包，然后使用&lt;code&gt;consul agent -dev&lt;/code&gt;我们就可以在通过&lt;code&gt;http://IP:8500&lt;/code&gt;端口来访问了。&lt;br&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="http://chenzhijun.me/categories/SpringCloud/"/>
    
    
      <category term="consul" scheme="http://chenzhijun.me/tags/consul/"/>
    
  </entry>
  
</feed>
