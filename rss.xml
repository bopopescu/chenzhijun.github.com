<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>饺子</title>
  
  <subtitle>优于别人，并不高贵，真正的高贵应该是优于过去的自己</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="http://chenzhijun.me/"/>
  <updated>2019-06-30T08:32:01.193Z</updated>
  <id>http://chenzhijun.me/</id>
  
  <author>
    <name>陈志军</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 工具-socat</title>
    <link href="http://chenzhijun.me/2019/06/30/linux-tool-socat/"/>
    <id>http://chenzhijun.me/2019/06/30/linux-tool-socat/</id>
    <published>2019-06-30T08:20:53.000Z</published>
    <updated>2019-06-30T08:32:01.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-工具-socat"><a href="#Linux-工具-socat" class="headerlink" title="Linux 工具-socat"></a>Linux 工具-socat</h1><p>socat是一个多功能的网络工具，官网：<a href="http://www.dest-unreach.org/socat/" target="_blank" rel="noopener">http://www.dest-unreach.org/socat/</a></p><h2 id="安装socat"><a href="#安装socat" class="headerlink" title="安装socat"></a>安装socat</h2><p>安装方式很简单：<code>yum install -y socat</code>,就可以了，当然如果是ubuntu的机器就是用<code>apt</code></p><h2 id="使用socat"><a href="#使用socat" class="headerlink" title="使用socat"></a>使用socat</h2><p>公司内部的网络限制比较严格，只有一些常用的端口能正常访问，因此调试的时候非常麻烦，比如你的应用程序端口是19995，但是公司只能是8080来访问，这个时候怎么办？使用nginx或haproxy当然可以，但是麻烦啊，配置搞一堆。。但是使用socat就很方便了:<code>socat TCP4-LISTEN:{port1},reuseaddr,fork TCP4:{ip:port2}</code> ，比如你有三台机器A(127.0.0.1)；B(127.0.0.2）；C（192.168.1.1）。B能访问A的8080端口，但是不能访问C的9090端口，而服务又监听的是C的9090端口，A能访问C的9090端口。所以很当然会想到B–&gt;A:8080–&gt;C:9090。也就是在A做一层反向代理。socat就是这样的。在A上我们执行：<code>socat TCP4-LISTEN:8080,reuseaddr,fork TCP4:192.168.1.1:9090</code>。然后B就访问A:8080,就能访问到C的9090端口了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-工具-socat&quot;&gt;&lt;a href=&quot;#Linux-工具-socat&quot; class=&quot;headerlink&quot; title=&quot;Linux 工具-socat&quot;&gt;&lt;/a&gt;Linux 工具-socat&lt;/h1&gt;&lt;p&gt;socat是一个多功能的网络工具，官网：&lt;a
      
    
    </summary>
    
      <category term="Linux" scheme="http://chenzhijun.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://chenzhijun.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker 镜像仓库清理</title>
    <link href="http://chenzhijun.me/2019/06/30/docker-registry-clean/"/>
    <id>http://chenzhijun.me/2019/06/30/docker-registry-clean/</id>
    <published>2019-06-30T08:07:52.000Z</published>
    <updated>2019-06-30T08:32:01.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-镜像仓库清理"><a href="#Docker-镜像仓库清理" class="headerlink" title="Docker 镜像仓库清理"></a>Docker 镜像仓库清理</h1><p>公司使用registry作为镜像仓库管理，由于只对内使用并且只暴露给jenkins，不对其它人公开，因此也就没有做registry的限制。不过由于我们在jenkins构建的时候使用docker 的一个插件，但是我们公司又系统在构建的时候不还tag，因此造成同一个名字有很多历史的layer都保存在了镜像仓库中，占用的空间随着时间越来越大。经过这次清理，由原来的占用1.9T清理空间到占用195G，效果还是非常的明显。</p><p>清理的步骤如下，下面的步骤适用于镜像名和tag都相同，然后重复push的情景下：<br><a id="more"></a></p><h2 id="清理多余的manifest"><a href="#清理多余的manifest" class="headerlink" title="清理多余的manifest"></a>清理多余的manifest</h2><p>适用命令：<br><code>docker run -d -v /data/registry:/registry -e REGISTRY_URL=http://NaN:5000 mortensrasmussen/docker-registry-manifest-cleanup:latest</code></p><p><code>mortensrasmussen/docker-registry-manifest-cleanup:latest</code>是一个开源的工具：<a href="https://github.com/mortensteenrasmussen/docker-registry-manifest-cleanup" target="_blank" rel="noopener">docker-registry-manifest-cleanup</a>。其中<code>-v /data/registry:/registry</code> /data/registry 是镜像仓库registry使用的存储在主机上的目录。</p><blockquote><p>ps:你的registry 是用容器的方式跑的：<code>docker run -v /data/registry:/registry -p 5000:5000 xxxxx/registry:latest</code> 这个就是<code>/data/registry</code>在本地存储的位置。</p></blockquote><h2 id="registry-的清理"><a href="#registry-的清理" class="headerlink" title="registry 的清理"></a>registry 的清理</h2><p>执行完上面的步骤还不够，还需要调用registry的清理功能才能实际释放空间:<code>docker exec registry /bin/registry garbage-collect /etc/docker/registry/config.yml</code></p><p><code>config.yaml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line"><span class="attr">  fields:</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line"><span class="attr">  filesystem:</span></span><br><span class="line"><span class="attr">    rootdirectory:</span> <span class="string">/var/lib/registry</span></span><br><span class="line"><span class="attr">  delete:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line"><span class="attr">  addr:</span> <span class="string">:5000</span></span><br><span class="line"><span class="attr">  headers:</span></span><br><span class="line"><span class="attr">    X-Content-Type-Options:</span> <span class="string">[nosniff]</span></span><br><span class="line"><span class="attr">health:</span></span><br><span class="line"><span class="attr">  storagedriver:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">    threshold:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>执行完之后再使用<code>df -h</code>你就可以看到磁盘的空间被释放出来了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-镜像仓库清理&quot;&gt;&lt;a href=&quot;#Docker-镜像仓库清理&quot; class=&quot;headerlink&quot; title=&quot;Docker 镜像仓库清理&quot;&gt;&lt;/a&gt;Docker 镜像仓库清理&lt;/h1&gt;&lt;p&gt;公司使用registry作为镜像仓库管理，由于只对内使用并且只暴露给jenkins，不对其它人公开，因此也就没有做registry的限制。不过由于我们在jenkins构建的时候使用docker 的一个插件，但是我们公司又系统在构建的时候不还tag，因此造成同一个名字有很多历史的layer都保存在了镜像仓库中，占用的空间随着时间越来越大。经过这次清理，由原来的占用1.9T清理空间到占用195G，效果还是非常的明显。&lt;/p&gt;
&lt;p&gt;清理的步骤如下，下面的步骤适用于镜像名和tag都相同，然后重复push的情景下：&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://chenzhijun.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chenzhijun.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 与 Linux Namespace &amp;&amp; Cgroups</title>
    <link href="http://chenzhijun.me/2019/06/30/docker-lxc-cgroup/"/>
    <id>http://chenzhijun.me/2019/06/30/docker-lxc-cgroup/</id>
    <published>2019-06-30T05:40:28.000Z</published>
    <updated>2019-06-30T08:32:01.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-与-Linux-Namespace-amp-amp-Cgroups"><a href="#Docker-与-Linux-Namespace-amp-amp-Cgroups" class="headerlink" title="Docker 与 Linux Namespace &amp;&amp; Cgroups"></a>Docker 与 Linux Namespace &amp;&amp; Cgroups</h1><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker?"></a>什么是Docker?</h2><p>不得不说这几年技术领域最火的就是“容器”这个词了。而谈到容器，大家的第一反应就是 Docker ,Docker 已经再很多人心中成了容器的代名词。那么Docker到底是什么？Docker能为我们带来什么？</p><p>官网上用来解释Docker的一句话:<code>Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers</code>。Docker 就是一个开源的工具，将我们的应用打包成标准的镜像格式，并且以容器的方式运行。容器化的越来越流行，带给我们的优势也是非常多：</p><ol><li>灵活性：再复杂的应用都可以被容器化；</li><li>轻量级：容器利用共享的是主机内核；</li><li>即时性：可以随时部署更新和升级；</li><li>通用性：一次构建，到处运行；</li><li>伸缩性：控制容器副本数量来任意伸缩；<a id="more"></a><h2 id="Docker-与虚拟机的比较"><a href="#Docker-与虚拟机的比较" class="headerlink" title="Docker 与虚拟机的比较"></a>Docker 与虚拟机的比较</h2></li></ol><p>容器与容器之间是共享Kernel的，各容器直接互相隔离。它只运行一个独立的进程，没有其它的执行进程，也不需要占用其它额外的资源。</p><p>虚拟机运行的是一个独立的完整的系统，占用的资源也要比独立的应用需要的多。他们两者区别在于虚拟机管理程序对整个设备进行抽象处理，而容器只是对操作系统内核进行抽象处理。下面这张图可以对两者有个认知了解：</p><p><img src="/images/qiniu/2019-06-30-15-12-00.png" alt="2019-06-30-15-12-00"></p><h2 id="Linux-Namespace"><a href="#Linux-Namespace" class="headerlink" title="Linux Namespace"></a>Linux Namespace</h2><p>我们经常听到，Docker其实并不是单独创造的一个技术，在早期，Docker其实就是基于Linux上的LXC(Linux Container)项目来创建单个应用程序的容器，目前Docker使用libcontainer来直接操作核心namespace和cgoup。这里我们了解下Linux Namesapce。Linux namespace是Kernel的功能，主要用来隔离一系列资源，目前Linux有6种不同类型的Namespace：</p><ol><li>Mount Namespace, CLONE_NEWNS, 用来隔离nodename和domainname;</li><li>UTS Namespace, CLONE_NEWUTS, 用来隔离 System V IPC 和 POSIX message queues;</li><li>IPC Namespace, CLONE_NEWIPC, 用来隔离进行ID;</li><li>PID Namespace, CLONE_NEWPID, 用来隔离各个进程看到的挂载点视图;</li><li>Network Namespace, CLONE_NEWNET, 用来隔离网络设备、IP 地址端口等网络栈的 Namespace;</li><li>User Namespace, CLONE_NEWUSER, 用来隔离用户的用户组ID;</li></ol><h2 id="Linux-Cgroups"><a href="#Linux-Cgroups" class="headerlink" title="Linux Cgroups"></a>Linux Cgroups</h2><p>Linux Cgroups (Control Groups) 提供了一组进程及将来子进程的资源限制、控制和统计的能力，资源包括CPU、内存、存储、网络等。通过Cgroups,可以方便地限制某个进程的资源占用，并且可以实时地监控进程的监控和统计信息。Cgroups的三个组件，</p><ol><li>cgroup</li><li>subsystem</li><li>hierarchy</li></ol><h2 id="libcontainer"><a href="#libcontainer" class="headerlink" title="libcontainer"></a>libcontainer</h2><p>libcontainer 是Docker开源的一个项目，目前runC的实现也已经有原来的LXC变为libcontainer。官网对libcontainer的解释：<a href="https://docs.docker.com/glossary/?term=libcontainer" target="_blank" rel="noopener">libcontainer provides a native Go implementation for creating containers with namespaces, cgroups, capabilities, and filesystem access controls. It allows you to manage the lifecycle of the container performing additional operations after the container is created</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-与-Linux-Namespace-amp-amp-Cgroups&quot;&gt;&lt;a href=&quot;#Docker-与-Linux-Namespace-amp-amp-Cgroups&quot; class=&quot;headerlink&quot; title=&quot;Docker 与 Linux Namespace &amp;amp;&amp;amp; Cgroups&quot;&gt;&lt;/a&gt;Docker 与 Linux Namespace &amp;amp;&amp;amp; Cgroups&lt;/h1&gt;&lt;h2 id=&quot;什么是Docker&quot;&gt;&lt;a href=&quot;#什么是Docker&quot; class=&quot;headerlink&quot; title=&quot;什么是Docker?&quot;&gt;&lt;/a&gt;什么是Docker?&lt;/h2&gt;&lt;p&gt;不得不说这几年技术领域最火的就是“容器”这个词了。而谈到容器，大家的第一反应就是 Docker ,Docker 已经再很多人心中成了容器的代名词。那么Docker到底是什么？Docker能为我们带来什么？&lt;/p&gt;
&lt;p&gt;官网上用来解释Docker的一句话:&lt;code&gt;Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers&lt;/code&gt;。Docker 就是一个开源的工具，将我们的应用打包成标准的镜像格式，并且以容器的方式运行。容器化的越来越流行，带给我们的优势也是非常多：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;灵活性：再复杂的应用都可以被容器化；&lt;/li&gt;
&lt;li&gt;轻量级：容器利用共享的是主机内核；&lt;/li&gt;
&lt;li&gt;即时性：可以随时部署更新和升级；&lt;/li&gt;
&lt;li&gt;通用性：一次构建，到处运行；&lt;/li&gt;
&lt;li&gt;伸缩性：控制容器副本数量来任意伸缩；
    
    </summary>
    
      <category term="Docker" scheme="http://chenzhijun.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chenzhijun.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud 集成 Consul</title>
    <link href="http://chenzhijun.me/2019/05/31/springcloud-consul-integration/"/>
    <id>http://chenzhijun.me/2019/05/31/springcloud-consul-integration/</id>
    <published>2019-05-31T13:10:57.000Z</published>
    <updated>2019-06-30T08:32:01.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud-集成-Consul"><a href="#SpringCloud-集成-Consul" class="headerlink" title="SpringCloud 集成 Consul"></a>SpringCloud 集成 Consul</h1><p>SpringBoot ，SpringCloud 可以说是在 Spring 里面最流行的，确实它的上手要比以前开发真的方便很多，约定优于配置。</p><p>springcloud可以理解成基于springboot的各种解决方案。</p><h2 id="集成consul"><a href="#集成consul" class="headerlink" title="集成consul"></a>集成consul</h2><p>我们没有使用eureka作为注册中心，而是使用consul，为什么了？因为eureka停止更新了。嗯，是的，如果没有人继续维护了，那我就觉得使用起来就会有局限性，这个不是在前期，而是在后期。而且官方都不更新维护了，以后我发现bug，都没有提PR的地方了~~~~嘿嘿。其实个人觉得注册中心以后可能会下沉，比如现在的k8s，就已经在底层平台解决了服务发现与注册的问题。当然那是扯远了，我们暂时还是先用consul做我们的注册中心，毕竟一套k8s也并不是那么好玩的。</p><p>在官网下载consul的安装包，然后使用<code>consul agent -dev</code>我们就可以在通过<code>http://IP:8500</code>端口来访问了。<br><a id="more"></a></p><h2 id="Springcloud-集成consul"><a href="#Springcloud-集成consul" class="headerlink" title="Springcloud 集成consul"></a>Springcloud 集成consul</h2><h3 id="服务提供方"><a href="#服务提供方" class="headerlink" title="服务提供方"></a>服务提供方</h3><p>我们的代码结构如下：</p><p><img src="/images/qiniu/2019-05-31-21-09-48.png" alt="2019-05-31-21-09-48"></p><p>我们使用springcloud提供的<code>spring-cloud-starter-consul-discovery</code>,这是集成了consul的starter，完整的<code>pom.xml</code>如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.chenzhijun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-consul-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-consul-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>consul project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后看下我们的<code>application.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.cloud.consul:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">management:</span> <span class="comment"># 需要一个health端口来让consul回调</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      base-path:</span> <span class="string">/admin</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    servlet:</span></span><br><span class="line"><span class="attr">      context-path:</span> <span class="string">/admin</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">18080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">user-app</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    consul:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="string">localhost</span> <span class="comment"># consul 地址</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8500</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        instance-id:</span> <span class="string">user-app</span> <span class="comment"># 注册到consul的名字</span></span><br><span class="line"><span class="attr">        management-port:</span> <span class="number">18080</span> <span class="comment"># consul会来访问这个端口+health-check-path 来判断应用是否正常</span></span><br><span class="line"><span class="attr">        health-check-path:</span> <span class="string">$&#123;management.server.servlet.context-path&#125;$&#123;management.endpoints.web.base-path&#125;/health</span></span><br></pre></td></tr></table></figure><p>在服务提供方我们的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun.consul;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World123"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里需要使用<code>@EnableDiscoveryClient</code> 这样就能让项目注册到consul了。</p><h3 id="服务调用方"><a href="#服务调用方" class="headerlink" title="服务调用方"></a>服务调用方</h3><p>既然是注册中心，我们有了服务提供方，当然需要服务调用方啦。调用方的结构如下：</p><p><img src="/images/qiniu/2019-05-31-21-31-41.png" alt="2019-05-31-21-31-41"></p><p>pom文件的内容类似<code>pom.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.chenzhijun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-consul-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-consul-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">user-client</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    consul:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8500</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        instance-id:</span> <span class="string">user-client</span></span><br><span class="line"><span class="attr">        health-check-path:</span> <span class="string">$&#123;management.endpoints.web.base-path&#125;/health</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8088</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">    level:</span></span><br><span class="line">      <span class="string">org.springframework.cloud.consul:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">18088</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      base-path:</span> <span class="string">/admin</span></span><br></pre></td></tr></table></figure><p>我们再看<code>Application.java</code>的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun.calltest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalltestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CalltestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//restTemplate 必须使用@LoadBalanced创建</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/abc"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="string">"user-app"</span>);</span><br><span class="line"><span class="comment">//        if (list != null &amp;&amp; !list.isEmpty()) &#123;</span></span><br><span class="line"><span class="comment">//            String serviceId = list.get(0).getServiceId();</span></span><br><span class="line"><span class="comment">//            URI uri = list.get(0).getUri();</span></span><br><span class="line"><span class="comment">//            System.out.println(uri.toString());</span></span><br><span class="line"><span class="comment">//            String url = "http://" + list.get(0).getHost() + ":" + list.get(0).getPort() + "/hello";</span></span><br><span class="line"><span class="comment">//            RestTemplate restTemplate = new RestTemplate();</span></span><br><span class="line"><span class="comment">//            String result = restTemplate.getForEntity(url, String.class).getBody();</span></span><br><span class="line"><span class="comment">//            ResponseEntity&lt;String&gt; forEntity = restTemplate.getForEntity(url, String.class);</span></span><br><span class="line"><span class="comment">//            System.out.println(forEntity.getBody());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里我们使用的是服务名user-app直接调用，注意这里的resttemplate一定要用@Bean @LoadBalanced 不然会报错</span></span><br><span class="line">        ResponseEntity&lt;String&gt; forEntity = restTemplate.getForEntity(<span class="string">"http://user-app/hello"</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> forEntity.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在浏览器里面访问<code>http://localhost:8088/abc</code>就能看到返回<code>Hello World123</code>了。</p><p>ps:<br>1：为什么RestTemplate必须要使用@LoadBalanced ?<br>2：springboot actuator starter 能否去掉，去掉的话应该怎么实现？<br>3：你觉得独立的注册中心未来的路会是怎样？</p><p>今天5月31日，改日回答，<a href="http://chenzhijun.me/2019/05/31/springcloud-consul-integration/">记住来看答案</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud-集成-Consul&quot;&gt;&lt;a href=&quot;#SpringCloud-集成-Consul&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud 集成 Consul&quot;&gt;&lt;/a&gt;SpringCloud 集成 Consul&lt;/h1&gt;&lt;p&gt;SpringBoot ，SpringCloud 可以说是在 Spring 里面最流行的，确实它的上手要比以前开发真的方便很多，约定优于配置。&lt;/p&gt;
&lt;p&gt;springcloud可以理解成基于springboot的各种解决方案。&lt;/p&gt;
&lt;h2 id=&quot;集成consul&quot;&gt;&lt;a href=&quot;#集成consul&quot; class=&quot;headerlink&quot; title=&quot;集成consul&quot;&gt;&lt;/a&gt;集成consul&lt;/h2&gt;&lt;p&gt;我们没有使用eureka作为注册中心，而是使用consul，为什么了？因为eureka停止更新了。嗯，是的，如果没有人继续维护了，那我就觉得使用起来就会有局限性，这个不是在前期，而是在后期。而且官方都不更新维护了，以后我发现bug，都没有提PR的地方了~~~~嘿嘿。其实个人觉得注册中心以后可能会下沉，比如现在的k8s，就已经在底层平台解决了服务发现与注册的问题。当然那是扯远了，我们暂时还是先用consul做我们的注册中心，毕竟一套k8s也并不是那么好玩的。&lt;/p&gt;
&lt;p&gt;在官网下载consul的安装包，然后使用&lt;code&gt;consul agent -dev&lt;/code&gt;我们就可以在通过&lt;code&gt;http://IP:8500&lt;/code&gt;端口来访问了。&lt;br&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="http://chenzhijun.me/categories/SpringCloud/"/>
    
    
      <category term="consul" scheme="http://chenzhijun.me/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>Linux 创建和扩展逻辑卷</title>
    <link href="http://chenzhijun.me/2019/05/24/linux-pv-lv-disk/"/>
    <id>http://chenzhijun.me/2019/05/24/linux-pv-lv-disk/</id>
    <published>2019-05-24T09:55:26.000Z</published>
    <updated>2019-06-30T08:32:01.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-创建和扩展逻辑卷"><a href="#Linux-创建和扩展逻辑卷" class="headerlink" title="Linux 创建和扩展逻辑卷"></a>Linux 创建和扩展逻辑卷</h1><p>最近遇到一个事，以前可能是给了一个大磁盘，然后我们全部格式化，一起挂载上去。后来发现用完了，扩展起来不是特别好扩展。<br>所以就找到了一个新的方式，我们使用逻辑卷来操作我们的磁盘。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>一台centos7主机</li><li>两块空盘</li></ol><h2 id="增加逻辑卷"><a href="#增加逻辑卷" class="headerlink" title="增加逻辑卷"></a>增加逻辑卷</h2><a id="more"></a><p>准备工组做好后，就可以慢慢操作了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br><span class="line">Linux myhosts 3.10.0-957.5.1.el7.x86_64 #1 SMP Fri Feb 1 14:54:57 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><h3 id="查找空盘"><a href="#查找空盘" class="headerlink" title="查找空盘"></a>查找空盘</h3><p>使用<code>lsblk</code>或者<code>fdisk -l</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">lsblk</span><br><span class="line"></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda    252:0    0   60G  0 disk</span><br><span class="line">└─vda1 252:1    0   60G  0 part /</span><br><span class="line">vdb    252:16   0  500G  0 disk /data</span><br><span class="line">vdc    252:32   0   10G  0 disk</span><br><span class="line">vdd    252:48   0   10G  0 disk</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">fdisk -l</span><br><span class="line"></span><br><span class="line">Disk /dev/vda: 64.4 GB, 64424509440 bytes, 125829120 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x00005822</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1   *        2048   125821079    62909516   83  Linux</span><br><span class="line"></span><br><span class="line">Disk /dev/vdb: 536.9 GB, 536870912000 bytes, 1048576000 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/vdc: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/vdd: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure><p>可以看到两块空盘:<code>/dev/vdc</code>,<code>/dev/vdd</code>。</p><h3 id="创建pv"><a href="#创建pv" class="headerlink" title="创建pv"></a>创建pv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> pvcreate /dev/vdc</span><br><span class="line">  Physical volume "/dev/vdc" successfully created</span><br></pre></td></tr></table></figure><h3 id="创建vg"><a href="#创建vg" class="headerlink" title="创建vg"></a>创建vg</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> vgcreate vg00 /dev/vdc</span><br><span class="line">  Volume group "vg00" successfully created</span><br></pre></td></tr></table></figure><h3 id="创建lv"><a href="#创建lv" class="headerlink" title="创建lv"></a>创建lv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun ~]# lvcreate -L 2g -n vg-data vg00</span><br><span class="line">  Logical volume "vg-data" created.</span><br><span class="line"></span><br><span class="line">[root@chenzhijun ~]#lvs -a</span><br><span class="line">  LV      VG   Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  vg-data vg00 -wi-a----- 2.00g</span><br></pre></td></tr></table></figure><p>现在我们看一下我们创建pv,vg,lv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun ~]# pvs</span><br><span class="line">  PV         VG   Fmt  Attr PSize  PFree</span><br><span class="line">  /dev/vdc   vg00 lvm2 a--  10.00g 8.00g</span><br><span class="line">[root@chenzhijun ~]# vgs</span><br><span class="line">  VG   #PV #LV #SN Attr   VSize  VFree</span><br><span class="line">  vg00   1   1   0 wz--n- 10.00g 8.00g</span><br><span class="line">[root@chenzhijun ~]# lvs</span><br><span class="line">  LV      VG   Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  vg-data vg00 -wi-a----- 2.00g</span><br></pre></td></tr></table></figure><!-->lvcreate -l 100%free -n docker vg00<--><p>这个时候我们再进入到<code>/dev/mapper</code>目录，可以看到我们刚刚建立好的逻辑卷，卷组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun mapper]# pwd</span><br><span class="line">/dev/mapper</span><br><span class="line">[root@chenzhijun mapper]# ls</span><br><span class="line">control  vg00-vg--data</span><br></pre></td></tr></table></figure><h3 id="格式化区为Linux可用的磁盘格式"><a href="#格式化区为Linux可用的磁盘格式" class="headerlink" title="格式化区为Linux可用的磁盘格式"></a>格式化区为Linux可用的磁盘格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun mapper]# mkfs.xfs /dev/mapper/vg00-vg--data</span><br><span class="line">meta-data=/dev/mapper/vg00-vg--data isize=512    agcount=4, agsize=131072 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0, sparse=0</span><br><span class="line">data     =                       bsize=4096   blocks=524288, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line">log      =internal log           bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure><h3 id="挂载到相应目录"><a href="#挂载到相应目录" class="headerlink" title="挂载到相应目录"></a>挂载到相应目录</h3><p>Linux知道了这个可用空间的存在，现在我们要继续告诉它在哪里使用，也就是创建挂载点。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun /]# mkdir /mydata</span><br><span class="line">[root@chenzhijun /]# ls -l</span><br><span class="line">total 29288</span><br><span class="line">drwxrwxrwx.   6 mwop mwop       77 Apr 10 19:23 app</span><br><span class="line">lrwxrwxrwx.   1 root root        7 Dec 18  2015 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.   4 root root     4096 Feb 25 15:21 boot</span><br><span class="line">…………</span><br><span class="line">drwxr-xr-x    2 root root        6 May 24 18:21 mydata</span><br></pre></td></tr></table></figure></p><p>使用<code>fdisk -l</code>,这个时候可以看到有了一个新的空间,<code>/dev/mapper/vg00-vg--data</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun /]# fdisk -l</span><br><span class="line"></span><br><span class="line">Disk /dev/vda: 64.4 GB, 64424509440 bytes, 125829120 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x00005822</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1   *        2048   125821079    62909516   83  Linux</span><br><span class="line"></span><br><span class="line">Disk /dev/vdb: 536.9 GB, 536870912000 bytes, 1048576000 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/vdc: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/vdd: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/vg00-vg--data: 2147 MB, 2147483648 bytes, 4194304 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure><p>下面我们要把这个磁盘挂载到我们刚刚创建的目录上，编辑<code>/etc/fstab</code>文件：<code>vi /etc/fstab</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># /etc/fstab</span><br><span class="line"># Created by anaconda on Thu Dec 17 17:11:31 2015</span><br><span class="line">#</span><br><span class="line"># Accessible filesystems, by reference, are maintained under &apos;/dev/disk&apos;</span><br><span class="line"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span><br><span class="line">#</span><br><span class="line">UUID=fc1bfc5d-a5d1-4c3c-afda-167500654723 /                       xfs     defaults        0 0</span><br><span class="line">/dev/vdb /data                       auto     defaults        0 2</span><br><span class="line">/dev/mapper/vg00-vg--data /mydata                       auto     defaults        0 2</span><br></pre></td></tr></table></figure><p>复制第一行<code>yyp</code>。然后照着修改，最后使用<code>mount -a</code>验证下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@chenzhijun /]# vi /etc/fstab</span><br><span class="line">[root@chenzhijun /]# mount -a</span><br><span class="line">[root@chenzhijun /]#</span><br></pre></td></tr></table></figure><p>现在再使用<code>df -h</code>就可以看到我们刚刚挂载的盘了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun /]# df -h</span><br><span class="line">Filesystem                 Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1                   60G   56G  4.9G  92% /</span><br><span class="line">devtmpfs                   3.8G     0  3.8G   0% /dev</span><br><span class="line">tmpfs                      3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs                      3.9G  384M  3.5G  10% /run</span><br><span class="line">tmpfs                      3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vdb                   493G  116G  352G  25% /data</span><br><span class="line">tmpfs                      783M     0  783M   0% /run/user/0</span><br><span class="line">overlay                     60G   56G  4.9G  92% /var/lib/docker/overlay2/e919ab7a38f61e66a783503f1fe9ebfdecd79ce08f35b21547bedf6c803c5b4f/merged</span><br><span class="line">shm                         64M     0   64M   0% /var/lib/docker/containers/71a340da3d3e6f4039623c0709026b3546a2a6b1635ff356fcea867c49159f6f/shm</span><br><span class="line">overlay                     60G   56G  4.9G  92% /var/lib/docker/overlay2/c247fba1ff6be41ed3d3c030c9944006f750fb6e1ab162728169077b1093b894/merged</span><br><span class="line">shm                         64M     0   64M   0% /var/lib/docker/containers/b163be285d664d334d81fa0411e41791001a47111d4124eec4c839cb3e907833/shm</span><br><span class="line">overlay                     60G   56G  4.9G  92% /var/lib/docker/overlay2/2827d53a9dc37f826b16211a02795a5f44bd1d69d26d2b7874750004cf18e1ab/merged</span><br><span class="line">shm                         64M     0   64M   0% /var/lib/docker/containers/8973a1b6f16ccd6adb03512acd3e786001b1e357256ecb51ddfcfae7c2b9624b/shm</span><br><span class="line">overlay                     60G   56G  4.9G  92% /var/lib/docker/overlay2/e718bbb03b70866dd91b78a53c1c735edd8279ca3d11797ba4235d5b6e0ef659/merged</span><br><span class="line">shm                         64M     0   64M   0% /var/lib/docker/containers/87cb442aa259b54b88cb11bbfa0f2c35bb328fbc84c3ec5772a92ee90980253a/shm</span><br><span class="line">overlay                     60G   56G  4.9G  92% /var/lib/docker/overlay2/13733d71ac904b8f5dc6f06122627a9b54f3253c69b773c304968bdb200291bf/merged</span><br><span class="line">shm                         64M     0   64M   0% /var/lib/docker/containers/ad876b38777e4a5dde9b1d7d0add1d7808a996b7c4015c55df4abd6078695041/shm</span><br><span class="line">overlay                     60G   56G  4.9G  92% /var/lib/docker/overlay2/492dd394a21d652026f21a73029a1d83968e6e0e319460c80e032ee03d3ebd63/merged</span><br><span class="line">shm                         64M     0   64M   0% /var/lib/docker/containers/24ced8c700f62c11ab8ff3b7559a8576f1a802693c3b532e4728e22256298257/shm</span><br><span class="line">/dev/mapper/vg00-vg--data  2.0G   33M  2.0G   2% /mydata</span><br></pre></td></tr></table></figure><p>一个挂载磁盘的操作就完成了。</p><h2 id="扩容逻辑卷空间"><a href="#扩容逻辑卷空间" class="headerlink" title="扩容逻辑卷空间"></a>扩容逻辑卷空间</h2><p>刚刚我们是一个10G的盘只使用了2G，磁盘利用率肯定不足嘛，所以我们扩充到8G。命令如下：</p><p>先看到一个盘还剩下多少空间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun ~]# vgs</span><br><span class="line">  VG   #PV #LV #SN Attr   VSize  VFree</span><br><span class="line">  vg00   1   1   0 wz--n- 10.00g 8.00g</span><br></pre></td></tr></table></figure><p>增加6G：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun ~]# lvextend -L +6G /dev/mapper/vg00-vg--data</span><br><span class="line">  Size of logical volume vg00/vg-data changed from 2.00 GiB (512 extents) to 8.00 GiB (2048 extents).</span><br><span class="line">  Logical volume vg-data successfully resized.</span><br></pre></td></tr></table></figure><p>确认磁盘：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun ~]# xfs_growfs /dev/mapper/vg00-vg--data</span><br><span class="line">meta-data=/dev/mapper/vg00-vg--data isize=512    agcount=4, agsize=131072 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0 spinodes=0</span><br><span class="line">data     =                       bsize=4096   blocks=524288, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line">log      =internal               bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">data blocks changed from 524288 to 2097152</span><br></pre></td></tr></table></figure><p>现在再看pv,vg,lv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun ~]# vgs</span><br><span class="line">  VG   #PV #LV #SN Attr   VSize  VFree</span><br><span class="line">  vg00   1   1   0 wz--n- 10.00g 2.00g</span><br><span class="line">[root@chenzhijun ~]# lvs</span><br><span class="line">  LV      VG   Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  vg-data vg00 -wi-ao---- 8.00g</span><br><span class="line">[root@chenzhijun ~]# pvs</span><br><span class="line">  PV         VG   Fmt  Attr PSize  PFree</span><br><span class="line">  /dev/vdc   vg00 lvm2 a--  10.00g 2.00g</span><br></pre></td></tr></table></figure><p>使用df看下磁盘空间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun ~]# df -h</span><br><span class="line">Filesystem                 Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1                   60G   56G  4.9G  92% /</span><br><span class="line">devtmpfs                   3.8G     0  3.8G   0% /dev</span><br><span class="line">tmpfs                      3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs                      3.9G  400M  3.5G  11% /run</span><br><span class="line">tmpfs                      3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vdb                   493G  116G  352G  25% /data</span><br><span class="line">tmpfs                      783M     0  783M   0% /run/user/0</span><br><span class="line">overlay                     60G   56G  4.9G  92% /var/lib/docker/overlay2/e919ab7a38f61e66a783503f1fe9ebfdecd79ce08f35b21547bedf6c803c5b4f/merged</span><br><span class="line">shm                         64M     0   64M   0% </span><br><span class="line">/dev/mapper/vg00-vg--data  8.0G   33M  8.0G   1% /mydata</span><br></pre></td></tr></table></figure><h2 id="扩容VG"><a href="#扩容VG" class="headerlink" title="扩容VG"></a>扩容VG</h2><p>如果现在加了一个新盘，比如刚刚说的<code>/dev/vdd</code>。查看一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun ~]# lsblk</span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda             252:0    0   60G  0 disk</span><br><span class="line">└─vda1          252:1    0   60G  0 part /</span><br><span class="line">vdb             252:16   0  500G  0 disk /data</span><br><span class="line">vdc             252:32   0   10G  0 disk</span><br><span class="line">└─vg00-vg--data 253:0    0    8G  0 lvm  /mydata</span><br><span class="line">vdd             252:48   0   10G  0 disk</span><br></pre></td></tr></table></figure><p>然后增加vg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun ~]# vgs</span><br><span class="line">  VG   #PV #LV #SN Attr   VSize  VFree</span><br><span class="line">  vg00   1   1   0 wz--n- 10.00g 2.00g</span><br><span class="line">[root@chenzhijun ~]# vgextend vg00 /dev/vdd</span><br><span class="line">  Physical volume "/dev/vdd" successfully created</span><br><span class="line">  Volume group "vg00" successfully extended</span><br><span class="line">[root@chenzhijun ~]# vgs</span><br><span class="line">  VG   #PV #LV #SN Attr   VSize  VFree</span><br><span class="line">  vg00   2   1   0 wz--n- 19.99g 11.99g</span><br></pre></td></tr></table></figure><p>扩容之前的路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun ~]# lvextend -L +8G /dev/mapper/vg00-vg--data</span><br><span class="line">  Size of logical volume vg00/vg-data changed from 8.00 GiB (2048 extents) to 16.00 GiB (4096 extents).</span><br><span class="line">  Logical volume vg-data successfully resized.</span><br><span class="line">[root@chenzhijun ~]# vgs</span><br><span class="line">  VG   #PV #LV #SN Attr   VSize  VFree</span><br><span class="line">  vg00   2   1   0 wz--n- 19.99g 3.99g</span><br><span class="line">[root@chenzhijun ~]# xfs_growfs /dev/mapper/vg00-vg--data</span><br><span class="line">meta-data=/dev/mapper/vg00-vg--data isize=512    agcount=16, agsize=131072 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0 spinodes=0</span><br><span class="line">data     =                       bsize=4096   blocks=2097152, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line">log      =internal               bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">data blocks changed from 2097152 to 4194304</span><br></pre></td></tr></table></figure><p>查看磁盘：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@chenzhijun ~]# df -h</span><br><span class="line">Filesystem                 Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1                   60G   56G  4.9G  92% /</span><br><span class="line">devtmpfs                   3.8G     0  3.8G   0% /dev</span><br><span class="line">tmpfs                      3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs                      3.9G  400M  3.5G  11% /run</span><br><span class="line">tmpfs                      3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vdb                   493G  117G  351G  25% /data</span><br><span class="line">tmpfs                      783M     0  783M   0% /run/user/0</span><br><span class="line">overlay                     60G   56G  4.9G  92% /var/lib/docker/overlay2/e919ab7a38f61e66a783503f1fe9ebfdecd79ce08f35b21547bedf6c803c5b4f/merged</span><br><span class="line">shm                         64M     0   64M   0% /var/lib/docker/containers/24ced8c700f62c11ab8ff3b7559a8576f1a802693c3b532e4728e22256298257/shm</span><br><span class="line">/dev/mapper/vg00-vg--data   16G   34M   16G   1% /mydata</span><br><span class="line"></span><br><span class="line">[root@chenzhijun ~]# lsblk</span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda             252:0    0   60G  0 disk</span><br><span class="line">└─vda1          252:1    0   60G  0 part /</span><br><span class="line">vdb             252:16   0  500G  0 disk /data</span><br><span class="line">vdc             252:32   0   10G  0 disk</span><br><span class="line">└─vg00-vg--data 253:0    0   16G  0 lvm  /mydata</span><br><span class="line">vdd             252:48   0   10G  0 disk</span><br><span class="line">└─vg00-vg--data 253:0    0   16G  0 lvm  /mydata</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux-创建和扩展逻辑卷&quot;&gt;&lt;a href=&quot;#Linux-创建和扩展逻辑卷&quot; class=&quot;headerlink&quot; title=&quot;Linux 创建和扩展逻辑卷&quot;&gt;&lt;/a&gt;Linux 创建和扩展逻辑卷&lt;/h1&gt;&lt;p&gt;最近遇到一个事，以前可能是给了一个大磁盘，然后我们全部格式化，一起挂载上去。后来发现用完了，扩展起来不是特别好扩展。&lt;br&gt;所以就找到了一个新的方式，我们使用逻辑卷来操作我们的磁盘。&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一台centos7主机&lt;/li&gt;
&lt;li&gt;两块空盘&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;增加逻辑卷&quot;&gt;&lt;a href=&quot;#增加逻辑卷&quot; class=&quot;headerlink&quot; title=&quot;增加逻辑卷&quot;&gt;&lt;/a&gt;增加逻辑卷&lt;/h2&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://chenzhijun.me/categories/Linux/"/>
    
    
      <category term="pv" scheme="http://chenzhijun.me/tags/pv/"/>
    
      <category term="lv" scheme="http://chenzhijun.me/tags/lv/"/>
    
      <category term="disk" scheme="http://chenzhijun.me/tags/disk/"/>
    
  </entry>
  
  <entry>
    <title>Docker修改默认存储空间</title>
    <link href="http://chenzhijun.me/2019/05/24/docker-default-storage/"/>
    <id>http://chenzhijun.me/2019/05/24/docker-default-storage/</id>
    <published>2019-05-24T09:20:52.000Z</published>
    <updated>2019-06-30T08:32:01.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-修改默认存储空间"><a href="#Docker-修改默认存储空间" class="headerlink" title="Docker 修改默认存储空间"></a>Docker 修改默认存储空间</h1><p>最近碰到一个问题，由于需要下载很多的镜像文件，如果使用docker安装时候的默认存储空间，那肯定是不行的。默认的存储空间可以使用：<code>docker info</code>看到：在输出的信息里面会发现:<code>Docker Root Dir: /var/lib/docker</code>；这个目录其实就是在根目录下吗，如果下载的镜像数量过大并且又大，那么肯定是的完蛋的~~~</p><p>所以就需要修改docker的存储空间。<br><a id="more"></a><br>我们的版本是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br><span class="line">Docker version 1.13.1, build 07f3374/1.13.1</span><br></pre></td></tr></table></figure><p>所以对于1.13+以上的版本应该都是没问题的，1.13以下的你可以自己尝试下，不一定能行，也不一定说不能行。</p><p>在前面：<font color="red">修改有风险，操作需谨慎</font>，在我修改了目录之后，容器和镜像文件都不能使用<code>docker ps/image</code>看到了，所以操作前一点要备份好。当然你把存储路径改回去当然也是可以看到的。</p><h2 id="方式一：修改-etc-docker-daemon-json"><a href="#方式一：修改-etc-docker-daemon-json" class="headerlink" title="方式一：修改/etc/docker/daemon.json"></a>方式一：修改/etc/docker/daemon.json</h2><p>修改这个json文件是最简单也是最方便的，没有之一。修改如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"insecure-registries"</span>: [</span><br><span class="line">        <span class="string">"registry.xxx.com"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"graph"</span>: <span class="string">"/docker-data/docker"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最重要的就是<code>&quot;graph&quot;: &quot;/docker-data/docker&quot;</code>，这个就是指定存储位置。</p><h2 id="方式二：修改-usr-lib-systemd-system-docker-service"><a href="#方式二：修改-usr-lib-systemd-system-docker-service" class="headerlink" title="方式二：修改/usr/lib/systemd/system/docker.service"></a>方式二：修改/usr/lib/systemd/system/docker.service</h2><p>修改docker的启动命令也能做到将存储默认位置修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=http://docs.docker.com</span><br><span class="line">After=network.target</span><br><span class="line">Wants=docker-storage-setup.service</span><br><span class="line">Requires=docker-cleanup.timer</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">NotifyAccess=main</span><br><span class="line">EnvironmentFile=-/run/containers/registries.conf</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/docker</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/docker-storage</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/docker-network</span><br><span class="line">Environment=GOTRACEBACK=crash</span><br><span class="line">Environment=DOCKER_HTTP_HOST_COMPAT=1</span><br><span class="line">Environment=PATH=/usr/libexec/docker:/usr/bin:/usr/sbin</span><br><span class="line">ExecStart=/usr/bin/dockerd-current \</span><br><span class="line">          --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current \</span><br><span class="line">          --default-runtime=docker-runc \</span><br><span class="line">          --exec-opt native.cgroupdriver=systemd \</span><br><span class="line">          --userland-proxy-path=/usr/libexec/docker/docker-proxy-current \</span><br><span class="line">          --init-path=/usr/libexec/docker/docker-init-current \</span><br><span class="line">          --seccomp-profile=/etc/docker/seccomp.json \</span><br><span class="line">          $OPTIONS \</span><br><span class="line">          $DOCKER_STORAGE_OPTIONS \</span><br><span class="line">          $DOCKER_NETWORK_OPTIONS \</span><br><span class="line">          $ADD_REGISTRY \</span><br><span class="line">          $BLOCK_REGISTRY \</span><br><span class="line">          $INSECURE_REGISTRY \</span><br><span class="line">          $REGISTRIES</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">LimitNOFILE=1048576</span><br><span class="line">LimitNPROC=1048576</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">Restart=on-abnormal</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>你可以看到<code>DOCKER_STORAGE_OPTIONS</code>,然后查看文件:<code>/etc/sysconfig/docker-storage</code>。在<code>DOCKER_STORAGE_OPTIONS=&quot;--storage-driver overlay2 &quot;</code>上加上<code>DOCKER_STORAGE_OPTIONS=&quot;--storage-driver overlay2 --graph /docker-data/docker</code> 然后使用<code>systemctl daemon-reload</code>,<code>systemctl restart docker</code>就可以了。</p><p>当然如果你直接在<code>docker.service</code>文件里面改也是可以的，放到配置文件里面也行，都ok。想怎样就怎样~~</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-修改默认存储空间&quot;&gt;&lt;a href=&quot;#Docker-修改默认存储空间&quot; class=&quot;headerlink&quot; title=&quot;Docker 修改默认存储空间&quot;&gt;&lt;/a&gt;Docker 修改默认存储空间&lt;/h1&gt;&lt;p&gt;最近碰到一个问题，由于需要下载很多的镜像文件，如果使用docker安装时候的默认存储空间，那肯定是不行的。默认的存储空间可以使用：&lt;code&gt;docker info&lt;/code&gt;看到：在输出的信息里面会发现:&lt;code&gt;Docker Root Dir: /var/lib/docker&lt;/code&gt;；这个目录其实就是在根目录下吗，如果下载的镜像数量过大并且又大，那么肯定是的完蛋的~~~&lt;/p&gt;
&lt;p&gt;所以就需要修改docker的存储空间。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://chenzhijun.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chenzhijun.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 文件处理接口</title>
    <link href="http://chenzhijun.me/2019/05/24/create-springboot-file-download-api/"/>
    <id>http://chenzhijun.me/2019/05/24/create-springboot-file-download-api/</id>
    <published>2019-05-24T07:48:57.000Z</published>
    <updated>2019-06-30T08:32:01.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spingboot-下载文件"><a href="#Spingboot-下载文件" class="headerlink" title="Spingboot 下载文件"></a>Spingboot 下载文件</h1><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><p>有时候会遇到一些需求，需要给前端提供下载文件的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/export"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Resource&gt; <span class="title">export</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">        ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream()</span><br><span class="line">        workbook.write(outputStream);</span><br><span class="line">        Resource file = <span class="keyword">new</span> ByteArrayResource(outputStream.toByteArray());</span><br><span class="line">        String filename=<span class="string">"app.txt"</span>;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().header(HttpHeaders.CONTENT_DISPOSITION,</span><br><span class="line">                <span class="string">"attachment; filename="</span>+filename).body(file);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>可以看到我创建了一个 Resource 然后返回了这个 resource。感觉是不是超级简单。确实比较简单，不过如果这个接口在外层还有一个应用参数拦截层（输入参数和返回参数都json打印）的话，需要注意将参数序列化成json数据的时候，这里是会出异常。</p><p>上面的代码中就是流的转换了，让我想起了java中的io流装饰器模式。</p><p>在上面的代码中主要注意在返回的head里面需要加入<code>header(HttpHeaders.CONTENT_DISPOSITION,&quot;attachment; filename=&quot;+filename)</code>;这里的filename就是下载后的文件名。</p><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/file"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleFileUpload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line"></span><br><span class="line">    String originalFilename = file.getOriginalFilename();</span><br><span class="line">    System.out.println(originalFilename);</span><br><span class="line">    System.out.println(file.getName());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String string = Base64.getEncoder().encodeToString(file.getBytes());</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"emmmmmmm. error"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有下载当然有上传了， 上面就是将文件上传的操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spingboot-下载文件&quot;&gt;&lt;a href=&quot;#Spingboot-下载文件&quot; class=&quot;headerlink&quot; title=&quot;Spingboot 下载文件&quot;&gt;&lt;/a&gt;Spingboot 下载文件&lt;/h1&gt;&lt;h2 id=&quot;下载文件&quot;&gt;&lt;a href=&quot;#下载文件&quot; class=&quot;headerlink&quot; title=&quot;下载文件&quot;&gt;&lt;/a&gt;下载文件&lt;/h2&gt;&lt;p&gt;有时候会遇到一些需求，需要给前端提供下载文件的接口。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/export&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@ResponseBody&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ResponseEntity&amp;lt;Resource&amp;gt; &lt;span class=&quot;title&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        HSSFWorkbook workbook = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HSSFWorkbook();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ByteArrayOutputStream outputStream = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ByteArrayOutputStream()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        workbook.write(outputStream);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Resource file = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ByteArrayResource(outputStream.toByteArray());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String filename=&lt;span class=&quot;string&quot;&gt;&quot;app.txt&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ResponseEntity.ok().header(HttpHeaders.CONTENT_DISPOSITION,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;attachment; filename=&quot;&lt;/span&gt;+filename).body(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Etcd 集群搭建</title>
    <link href="http://chenzhijun.me/2019/05/23/etcd-cluster-install/"/>
    <id>http://chenzhijun.me/2019/05/23/etcd-cluster-install/</id>
    <published>2019-05-23T14:02:39.000Z</published>
    <updated>2019-06-30T08:32:01.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Etcd-集群安装"><a href="#Etcd-集群安装" class="headerlink" title="Etcd 集群安装"></a>Etcd 集群安装</h1><p>本文参考：<a href="https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/clustering.md" target="_blank" rel="noopener">https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/clustering.md</a></p><p>不得不说etcd的安装真的非常容易。在<a href="https://github.com/etcd-io/etcd的release里面找到相应的版本。然后直接二进制启动，一个单节点就好。真的是太简单啊。" target="_blank" rel="noopener">https://github.com/etcd-io/etcd的release里面找到相应的版本。然后直接二进制启动，一个单节点就好。真的是太简单啊。</a> </p><p>不过搭建集群版本的话还是需要做一些配置，下面就是我用集群搭建的环境并且真实可用的过程。</p><p>下载好相应版本的etcd，然后做如下配置。我们采用的方式是使用Linux的systemd服务：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=etcd service</span><br><span class="line">Documentation=https://github.com/coreos/etcd</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/usr/local/bin/etcd --name infra0 --initial-advertise-peer-urls http://100.69.216.107:2380 \</span><br><span class="line">--listen-peer-urls http://100.69.216.107:2380 \</span><br><span class="line">--listen-client-urls http://100.69.216.107:2379,http://127.0.0.1:2379 \</span><br><span class="line">--advertise-client-urls http://100.69.216.107:2379 \</span><br><span class="line">--initial-cluster-token etcd-cluster-1 \</span><br><span class="line">--initial-cluster infra0=http://100.69.216.107:2380,infra1=http://100.69.216.108:2380,infra2=http://100.69.216.109:2380 \</span><br><span class="line">--initial-cluster-state new \</span><br><span class="line">--data-dir /data/etcd \</span><br><span class="line">--heartbeat-interval 1000 \</span><br><span class="line">--election-timeout 5000</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>然后我们使用<code>systemctl start etcd.service</code>一个节点就起来了。另外的2个节点也是一样的操作方式，不过要注意：</p><ol><li>–name 这里要注意不一样，每个集群的名字都是独立的</li><li>–initial-cluster-token 这个是每个集群同一个名字</li><li>–initial-cluster-state 这个如果是新集群就是new</li><li>–data-dir /data/etcd 这个是一定要有，一定要先创建。不然etcd会在启动命令的目录自己建立一个name.etcd的数据目录，而且如果下次修改了目录，这个节点加入到集群还有坑</li></ol><p>ps: 遇到的一些问题：</p><p>一定要指定data-dir，防止手动测试的时候加入了集群，那么下次指定data-dir之后，该节点就无法加入集群：member 9b3523b532ddb797 has already been bootstrapped 这就是因为之前已经加入了集群，然后data目录下跟当前设置data-dir不一样。解决方式就是将之前的name.etcd目录下的member文件放到新的data-dir下面</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Etcd-集群安装&quot;&gt;&lt;a href=&quot;#Etcd-集群安装&quot; class=&quot;headerlink&quot; title=&quot;Etcd 集群安装&quot;&gt;&lt;/a&gt;Etcd 集群安装&lt;/h1&gt;&lt;p&gt;本文参考：&lt;a href=&quot;https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/clustering.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/clustering.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不得不说etcd的安装真的非常容易。在&lt;a href=&quot;https://github.com/etcd-io/etcd的release里面找到相应的版本。然后直接二进制启动，一个单节点就好。真的是太简单啊。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/etcd-io/etcd的release里面找到相应的版本。然后直接二进制启动，一个单节点就好。真的是太简单啊。&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;不过搭建集群版本的话还是需要做一些配置，下面就是我用集群搭建的环境并且真实可用的过程。&lt;/p&gt;
&lt;p&gt;下载好相应版本的etcd，然后做如下配置。我们采用的方式是使用Linux的systemd服务：&lt;br&gt;
    
    </summary>
    
      <category term="Etcd" scheme="http://chenzhijun.me/categories/Etcd/"/>
    
    
      <category term="Etcd" scheme="http://chenzhijun.me/tags/Etcd/"/>
    
  </entry>
  
  <entry>
    <title>Docker Registry 磁盘空间清理</title>
    <link href="http://chenzhijun.me/2019/05/09/docker-registry-clean-disk/"/>
    <id>http://chenzhijun.me/2019/05/09/docker-registry-clean-disk/</id>
    <published>2019-05-09T15:06:39.000Z</published>
    <updated>2019-06-30T08:32:01.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Registry-磁盘空间清理"><a href="#Docker-Registry-磁盘空间清理" class="headerlink" title="Docker Registry 磁盘空间清理"></a>Docker Registry 磁盘空间清理</h1><p>使用 Docker 的时候用的是 Docker Registry 来存储镜像。一开始的时候给了500G数据盘，日积月累的累积的数据就开始变多了。<br>没办法只好想办法去清理。看了下官网的api文档：<a href="https://docs.docker.com/registry/spec/api/" target="_blank" rel="noopener">Docker Registry API</a></p><p>其实还挺简单的，主要是用http接口先将镜像和层删除，然后使用镜像仓库的garbage-collect。</p><p>默认HTTP接口是不支持DELETE方法的，需要修改配置文件中<code>storage.delete.enabled: true</code>，配置文件的解释可以在这里看到地址<a href="https://docs.docker.com/registry/configuration/#delete" target="_blank" rel="noopener">Registry 配置文件</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="attr">  delete:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>镜像仓库的<a href="https://docs.docker.com/registry/garbage-collection/" target="_blank" rel="noopener">garbage-collection</a>可以看下官网文档。主要看懂一个图就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A -----&gt; a &lt;----- B</span><br><span class="line">    \--&gt; b     |</span><br><span class="line">         c &lt;--/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A -----&gt; a     B</span><br><span class="line">    \--&gt; b</span><br><span class="line">         c</span><br></pre></td></tr></table></figure><p>这样c就要回收了。</p><p>然后我们使用HTTP的API。查到repo，tags，然后就可以删除相应的镜像。</p><p>但是在删除的时候要注意下，首先我们要通过接口获取digest的值，但是这个digest的值获取方式比较特别，首先我们访问：<code>/v2/&lt;name&gt;/manifests/&lt;reference&gt;</code>这个接口的时候，需要使用GET获取HEAD方法，然而在请求的时候需要加入Header：<code>Accept: application/vnd.docker.distribution.manifest.v2+json</code>这样才可以在返回的HEAD中才能获取到正式的digest。</p><p>使用golang写了一个demo代码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tag <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span>   <span class="string">`json:"name"`</span></span><br><span class="line">Tags []<span class="keyword">string</span> <span class="string">`json:"tags"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Repo <span class="keyword">struct</span> &#123;</span><br><span class="line">Repositories []<span class="keyword">string</span> <span class="string">`json:"repositories"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//registry garbage-collect /etc/docker/registry/config.yml</span></span><br><span class="line"><span class="comment">//registry garbage-collect --dry-run /etc/docker/registry/config.yml &gt; test.log</span></span><br><span class="line"><span class="comment">//cat test.log | awk -F : '&#123;print $1&#125;' | sort | uniq -c | sort -rn -k1 | head -10</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">registryUrl := flag.String(<span class="string">"url"</span>, <span class="string">"http://registry.xxxxx.com:5000"</span>, <span class="string">"registry url"</span>)</span><br><span class="line">pattern := flag.String(<span class="string">"pattern"</span>, <span class="string">""</span>, <span class="string">"删除镜像名中有pattern的镜像"</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line">fmt.Println(<span class="string">"registry url:"</span>, *registryUrl, <span class="string">",pattern:"</span>, *pattern)</span><br><span class="line">resp, _ := http.Get(*registryUrl + <span class="string">"/v2/_catalog?n=10000"</span>)</span><br><span class="line">bytes, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">r := Repo&#123;&#125;</span><br><span class="line">json.Unmarshal(bytes, &amp;r)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> r.Repositories &#123;</span><br><span class="line"><span class="keyword">if</span> *pattern == <span class="string">""</span> || <span class="built_in">len</span>(*pattern) &lt;= <span class="number">0</span> &#123;</span><br><span class="line">*pattern = <span class="string">"2017"</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"pattern:"</span>, *pattern)</span><br><span class="line"><span class="keyword">if</span> strings.Contains(v, *pattern) &#123;</span><br><span class="line">url := fmt.Sprintf(*registryUrl+<span class="string">"/v2/%s/tags/list"</span>, v)</span><br><span class="line">fmt.Println(<span class="string">"url"</span> + url)</span><br><span class="line">resp, _ := http.Get(url)</span><br><span class="line">bytes, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t = Tag&#123;&#125;</span><br><span class="line">fmt.Println(<span class="string">"byteStr:"</span>, <span class="keyword">string</span>(bytes))</span><br><span class="line">json.Unmarshal(bytes, &amp;t)</span><br><span class="line">fmt.Println(<span class="string">"tag:"</span>, t)</span><br><span class="line">client := http.DefaultClient</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(t.Tags) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, ti := <span class="keyword">range</span> t.Tags &#123;</span><br><span class="line">mainfests := *registryUrl + <span class="string">"/v2/%s/manifests/%s"</span></span><br><span class="line">url = fmt.Sprintf(mainfests, t.Name, ti)</span><br><span class="line">request, _ := http.NewRequest(http.MethodGet, url, <span class="literal">nil</span>)</span><br><span class="line">request.Header.Set(<span class="string">"Accept"</span>, <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>)</span><br><span class="line">response, _ := client.Do(request)</span><br><span class="line">digest := response.Header.Get(<span class="string">"docker-content-digest"</span>)</span><br><span class="line">fmt.Println(<span class="string">"digest:"</span>, digest)</span><br><span class="line">fmt.Println(<span class="string">"headers:"</span>, response.Header)</span><br><span class="line">deleteUrl := fmt.Sprintf(mainfests, t.Name, digest)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"deleteUrl:"</span>, deleteUrl)</span><br><span class="line">request, _ = http.NewRequest(http.MethodDelete, deleteUrl, <span class="literal">nil</span>)</span><br><span class="line">response, _ = client.Do(request)</span><br><span class="line">headers := response.Header</span><br><span class="line">fmt.Println(response.Status, headers)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就算这样执行完，别忘记了，进入到registry的容器中，然后使用：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">registry garbage-collect /etc/docker/registry/config.yml</span><br></pre></td></tr></table></figure></p><p><code>/etc/docker/registry/config.yml</code>文件要打开之前说的<code>storage.delete.enabled: true</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-Registry-磁盘空间清理&quot;&gt;&lt;a href=&quot;#Docker-Registry-磁盘空间清理&quot; class=&quot;headerlink&quot; title=&quot;Docker Registry 磁盘空间清理&quot;&gt;&lt;/a&gt;Docker Registry 磁盘空间
      
    
    </summary>
    
      <category term="Docker" scheme="http://chenzhijun.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chenzhijun.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>修改 Linux Core 文件目录</title>
    <link href="http://chenzhijun.me/2019/05/08/core-file/"/>
    <id>http://chenzhijun.me/2019/05/08/core-file/</id>
    <published>2019-05-08T12:00:11.000Z</published>
    <updated>2019-06-30T08:32:01.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-Core-文件"><a href="#Linux-Core-文件" class="headerlink" title="Linux Core 文件"></a>Linux Core 文件</h1><p>一次线上的经历，一台现在主机突然磁盘根目录占到98%。我们其实是挂了数据盘的，不知道为啥突然会<br>在根目录下磁盘空空间不足报警。上到主机一看，原来是某个应用打了dump了个core文件。文件如：core.xxxx</p><p>用gdb调试了一下：</p><p><code>gdb core.14321</code></p><p>显示出是哪个进程dump的core文件。</p><p>之后我们就开始分析core文件怎么避免让根目录占满。</p><p>首先用<code>ulimit -a</code>查看到core文件的大小。然后用<code>ulimit -c</code>设置大小，单位是block，<br>1block=512bytes</p><p>然后修改core文件到数据盘的目录：</p><p><code>echo /data/coredump/core.%e.%p&gt; /proc/sys/kernel/core_pattern</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-Core-文件&quot;&gt;&lt;a href=&quot;#Linux-Core-文件&quot; class=&quot;headerlink&quot; title=&quot;Linux Core 文件&quot;&gt;&lt;/a&gt;Linux Core 文件&lt;/h1&gt;&lt;p&gt;一次线上的经历，一台现在主机突然磁盘根目录占到98%
      
    
    </summary>
    
      <category term="Linux" scheme="http://chenzhijun.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://chenzhijun.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Restful 接口返回响应码</title>
    <link href="http://chenzhijun.me/2019/05/05/restful-api/"/>
    <id>http://chenzhijun.me/2019/05/05/restful-api/</id>
    <published>2019-05-05T13:10:41.000Z</published>
    <updated>2019-06-30T08:32:01.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Restful-接口返回响应码"><a href="#Restful-接口返回响应码" class="headerlink" title="Restful 接口返回响应码"></a>Restful 接口返回响应码</h1><p>最近用restful做接口，突然想想返回状态码该怎么返回给客户端或者调用者。毕竟那么多的状态码。</p><p>后来找到一个状态码解释:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1xx：信息响应类，表示接收到请求并且继续处理</span><br><span class="line">2xx：处理成功响应类，表示动作被成功接收、理解和接受</span><br><span class="line">3xx：重定向响应类，为了完成指定的动作，必须接受进一步处理</span><br><span class="line">4xx：客户端错误，客户请求包含语法错误或者是不能正确执行</span><br><span class="line">5xx：服务端错误，服务器不能正确执行一个正确的请求</span><br><span class="line"></span><br><span class="line">100——客户必须继续发出请求</span><br><span class="line">101——客户要求服务器根据请求转换HTTP协议版本</span><br><span class="line"></span><br><span class="line">200——交易成功</span><br><span class="line">201——提示知道新文件的URL</span><br><span class="line">202——接受和处理、但处理未完成</span><br><span class="line">203——返回信息不确定或不完整</span><br><span class="line">204——请求收到，但返回信息为空</span><br><span class="line">205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件</span><br><span class="line">206——服务器已经完成了部分用户的GET请求</span><br><span class="line"></span><br><span class="line">300——请求的资源可在多处得到</span><br><span class="line">301——删除请求数据</span><br><span class="line">302——在其他地址发现了请求数据</span><br><span class="line">303——建议客户访问其他URL或访问方式</span><br><span class="line">304——客户端已经执行了GET，但文件未变化</span><br><span class="line">305——请求的资源必须从服务器指定的地址得到</span><br><span class="line">306——前一版本HTTP中使用的代码，现行版本中不再使用</span><br><span class="line">307——申明请求的资源临时性删除</span><br><span class="line"></span><br><span class="line">400——错误请求，如语法错误</span><br><span class="line">401——请求授权失败</span><br><span class="line">402——保留有效ChargeTo头响应</span><br><span class="line">403——请求不允许</span><br><span class="line">404——没有发现文件、查询或URl</span><br><span class="line">405——用户在Request-Line字段定义的方法不允许</span><br><span class="line">406——根据用户发送的Accept拖，请求资源不可访问</span><br><span class="line">407——类似401，用户必须首先在代理服务器上得到授权</span><br><span class="line">408——客户端没有在用户指定的饿时间内完成请求</span><br><span class="line">409——对当前资源状态，请求不能完成</span><br><span class="line">410——服务器上不再有此资源且无进一步的参考地址</span><br><span class="line">411——服务器拒绝用户定义的Content-Length属性请求</span><br><span class="line">412——一个或多个请求头字段在当前请求中错误</span><br><span class="line">413——请求的资源大于服务器允许的大小</span><br><span class="line">414——请求的资源URL长于服务器允许的长度</span><br><span class="line">415——请求资源不支持请求项目格式</span><br><span class="line">416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</span><br><span class="line">417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求</span><br><span class="line"></span><br><span class="line">500——服务器产生内部错误</span><br><span class="line">501——服务器不支持请求的函数</span><br><span class="line">502——服务器暂时不可用，有时是为了防止发生系统过载</span><br><span class="line">503——服务器过载或暂停维修</span><br><span class="line">504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长</span><br><span class="line">505——服务器不支持或拒绝支请求头中指定的HTTP版本</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Restful-接口返回响应码&quot;&gt;&lt;a href=&quot;#Restful-接口返回响应码&quot; class=&quot;headerlink&quot; title=&quot;Restful 接口返回响应码&quot;&gt;&lt;/a&gt;Restful 接口返回响应码&lt;/h1&gt;&lt;p&gt;最近用restful做接口，突然想想
      
    
    </summary>
    
      <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://chenzhijun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>nginx从docker容器的环境变量中获取值</title>
    <link href="http://chenzhijun.me/2019/04/08/nginx-conf-get-env-from-docker-contaniner-enviroment/"/>
    <id>http://chenzhijun.me/2019/04/08/nginx-conf-get-env-from-docker-contaniner-enviroment/</id>
    <published>2019-04-08T14:56:33.000Z</published>
    <updated>2019-06-30T08:32:01.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx从docker容器的环境变量中获取值"><a href="#nginx从docker容器的环境变量中获取值" class="headerlink" title="nginx从docker容器的环境变量中获取值"></a>nginx从docker容器的环境变量中获取值</h1><p>这篇接上一篇<a href="http://chenzhijun.me/2019/04/08/vuejs-starter/">vuejs 从拷项目到开发上线</a></p><h2 id="Docker-部署"><a href="#Docker-部署" class="headerlink" title="Docker 部署"></a>Docker 部署</h2><p>另外一个问题就是如何制作成镜像了？可以看到我们在nginx.conf中有api服务的地址，这个地址可能在不同的环境(di,sit,prd)都不一样，那能否通过容器的env来改变nginx.conf中的值呢？</p><p>不查不知道，一查发现，我擦，还真有，nginx镜像本身就已经具备了。不过是李template的方式，来生成conf文件话不多说，直接上代码，先创建一个<code>nginx.conf.template</code>的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root         /app/html;</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /m-web/ &#123;</span><br><span class="line">        root /app/html/dist;</span><br><span class="line">    &#125;</span><br><span class="line">    location /m-web/m-api/ &#123;</span><br><span class="line">        proxy_pass http://$&#123;M_API_SITE&#125;/m-api/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后准备Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> nginx:latest</span><br><span class="line"><span class="keyword">RUN</span> rm -rf /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/nginx.conf</span><br><span class="line">ENV M_API_SITE 192.168.1.19:8089</span><br><span class="line">ADD nginx.conf.template /etc/nginx/conf.d/nginx.conf.template</span><br><span class="line">ADD dist /app/html/dist</span><br><span class="line">CMD ["/bin/bash", "-c", "envsubst &lt; /etc/nginx/conf.d/nginx.conf.template &gt; /etc/nginx/conf.d/nginx.conf &amp;&amp; exec nginx -g 'daemon off;'"]</span><br></pre></td></tr></table></figure><p>之后<code>docker build -t xxx:latest .</code>，之后我们就可以通过<code>-e M_API_SITE=192.168.123.1:8080</code>设置容器的环境变量来设置不同的api地址了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nginx从docker容器的环境变量中获取值&quot;&gt;&lt;a href=&quot;#nginx从docker容器的环境变量中获取值&quot; class=&quot;headerlink&quot; title=&quot;nginx从docker容器的环境变量中获取值&quot;&gt;&lt;/a&gt;nginx从docker容器的环境
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vuejs 从拷项目到开发上线</title>
    <link href="http://chenzhijun.me/2019/04/08/vuejs-starter/"/>
    <id>http://chenzhijun.me/2019/04/08/vuejs-starter/</id>
    <published>2019-04-08T13:56:22.000Z</published>
    <updated>2019-06-30T08:32:01.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vuejs-从拷项目到开发上线"><a href="#vuejs-从拷项目到开发上线" class="headerlink" title="vuejs 从拷项目到开发上线"></a>vuejs 从拷项目到开发上线</h1><p>最近组里缺人手，我们都是一堆后端，却没有一个前端。所以你看到了一堆的后台接口，但就是没有一个页面。囧~<br>本着求人不如求己，活人不能被尿憋死不是~所以准备自己开始干。</p><h2 id="前端选型"><a href="#前端选型" class="headerlink" title="前端选型"></a>前端选型</h2><p>首先想了一下，我们应该怎么开发前端了？使用thymeleaf这种貌似是最合适的，毕竟类似于以前用jsp，对不对~当然有点不一样。<br>但后来想想，都前后端分离了，以后我们要真的做牛逼了。要是给我们分配个前端，那我们不又要改死啊。<br>然后觉得前后端不分离，逼格不够，也不好维护。那好咯，那就定好方向前端分离。</p><p>前后端分离的方向定好，那就先想想是自己完全自己弄一个，还是直接用模板套一个？一致觉得，自己从头写，费时费力，一群后端去弄不太现实，毕竟还是有很多要调的，适配啊，排版啊。所以投票决定，选模板。选了模板，那就好弄了，github上找了前十个优秀的模板。有一些是基于bootstrap，然后每个页面都是html，所以这种就相当于用jQuery或者javascript用ajax这种吧。想想就被以前写dom支配的恐惧。后来了解到有个vue，人家都说好用，其实公司还有很多都是vue，我们想了想，要是用bootstrap那种估计就是靠我们自己了。要是vue，要是我们实际搞不定，在公司也好请外援。想了想，那就找vue的模板吧。找来找去，找了个最简单实用的。毕竟我们需求很简单，列表显示，表格添加，搜索框就好了，后管管理页面是真的好搞啊。找了个最简单的功能又全的，感谢github，感谢可爱的爱分享的工程师们。</p><h2 id="vue-使用"><a href="#vue-使用" class="headerlink" title="vue 使用"></a>vue 使用</h2><p>模板选好了，这下来到重头戏了。大家都不会啊，以前都是听说，我们前端用vue，特么到底怎么用啊。不过既然选好了方案，选好了模板，其实就很明确了，不会那就学啊。vue官网一翻，一遍浏览。大概的使用方式也是了解了。</p><h3 id="vue-数据绑定"><a href="#vue-数据绑定" class="headerlink" title="vue 数据绑定"></a>vue 数据绑定</h3><p>vue的模式感觉跟以前的不一样，看整个项目发现其实就一个html页面，也就是index.html，然后就是在里面有个APP.vue，通过不同的xx.vue来选择相应的页面，其实就是他们口中的单页式应用。就是一个html页面，然后根据不同的path来显示不同的内容。另外需要转换一个观点，vue不像传统的面向页面来编程，因为它的数据绑定感觉太好用了。如果是在html标签中只需要用<code></code>就可以使用在js中定义的key的值。有几个好用的标签：</p><p>感觉吧，说的不太全，还是要实际用起来才有那种感觉。<a href="https://github.com/chenzhijun/vue-manage-system" target="_blank" rel="noopener">模板地址</a></p><h2 id="使用中遇到的问题"><a href="#使用中遇到的问题" class="headerlink" title="使用中遇到的问题"></a>使用中遇到的问题</h2><p>在实际使用中遇到一些问题，一开始有点懵逼，不过到后来都解决了。</p><h3 id="本地开发-跨域问题"><a href="#本地开发-跨域问题" class="headerlink" title="本地开发-跨域问题"></a>本地开发-跨域问题</h3><p>这个一开始的时候有点蒙圈，本地是使用<code>npm run dev</code>启动的，启动后发现，跨域了。这个该怎么搞哦。后来在vue.config.js中发现一个文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    baseUrl: <span class="string">'./'</span>,</span><br><span class="line">    productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/m-paas'</span>:&#123;</span><br><span class="line">                target: <span class="string">'http://localhost:8080/m-paas'</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite:&#123;</span><br><span class="line">                    <span class="string">'/m-paas'</span>: <span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实可以看到只要打开changeOrigin 就可以了。其它的都不需要改动。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>开发完了，代码也写好了。重点来了，怎么部署到服务器？来跟我三步走</p><ol><li>step1，构建应用</li></ol><p>使用<code>npm run build</code>先进行构建，完成后会在根路径下生成一个dist文件夹。</p><ol start="2"><li>step2，准备nginx服务器</li></ol><p>下载一个nginx，现在都是使用nginx来做前端的服务器。将刚刚的dist文件夹的内容copy到服务器某个路径。<br>比如<code>/app/html</code>，或者就是nginx目录下的html。随自己开心就好</p><ol start="3"><li>step3，修改nginx配置</li></ol><p>目录确定后，我们就需要修改nginx的配置了。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">       listen       127.0.0.1:6000;</span><br><span class="line">       #server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location /m-web/ &#123;</span><br><span class="line">          root   /app/html/dist;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line">       location /m-api &#123;</span><br><span class="line">           proxy_pass http://localhost:8080/m-api;</span><br><span class="line">           #proxy_pass http://api-m.chenzhijun.me/m-api;</span><br><span class="line">       &#125;</span><br><span class="line">       #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">       # redirect server error pages to the static page /50x.html</span><br><span class="line">       #</span><br><span class="line">       error_page   500 502 503 504  /50x.html;</span><br><span class="line">       location = /50x.html &#123;</span><br><span class="line">           root   html;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>然后启动 nginx 就好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vuejs-从拷项目到开发上线&quot;&gt;&lt;a href=&quot;#vuejs-从拷项目到开发上线&quot; class=&quot;headerlink&quot; title=&quot;vuejs 从拷项目到开发上线&quot;&gt;&lt;/a&gt;vuejs 从拷项目到开发上线&lt;/h1&gt;&lt;p&gt;最近组里缺人手，我们都是一堆后端，却
      
    
    </summary>
    
      <category term="vuejs" scheme="http://chenzhijun.me/categories/vuejs/"/>
    
    
      <category term="vuejs" scheme="http://chenzhijun.me/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 第一天</title>
    <link href="http://chenzhijun.me/2019/04/03/kubernetes-day1/"/>
    <id>http://chenzhijun.me/2019/04/03/kubernetes-day1/</id>
    <published>2019-04-03T13:10:22.000Z</published>
    <updated>2019-06-30T08:32:01.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-day1"><a href="#Kubernetes-day1" class="headerlink" title="Kubernetes day1"></a>Kubernetes day1</h1><h2 id="Kubernetes是什么？"><a href="#Kubernetes是什么？" class="headerlink" title="Kubernetes是什么？"></a>Kubernetes是什么？</h2><p>Kubernetes简称k8s。最直观的解释它是用将资源进行整合，将应用与底层隔离。因此，搞业务开发的，专心搞好业务逻辑。搞底层机器，网络资源的安心搞好底层网络资源。而k8s就是这中间的一层，承上启下。也就是传说中的PaaS。现在可以说没有那个Paas或者Caas不是基于k8s搞的。不过我觉得理解的不深，k8s的作用其实还有很多，如果你用过docker或者直接开发业务就会有比较深的感知。</p><h2 id="Kubernetes-关键组件"><a href="#Kubernetes-关键组件" class="headerlink" title="Kubernetes 关键组件"></a>Kubernetes 关键组件</h2><p>安装一个K8S集群需要哪些组件了？一个完整的小集群里面，需要有一个master，一个node，两台机器。master和node上分别有哪些组件了？master上有kube-apiserver,kube-scheduler,kube-controller-manager; node上有kubelet,kube-proxy,docker;另外需要在master上安装一个etcd数据库。如果是非二进制安装，master和node上都需要有kubeadm。安装完这些之后需要在master节点上使用’kubectl apply -f [kubelet-network].yaml’也就是如果你使用flannel网络，就可能需要安装flannel的网络插件。这个插件是已pod的方式创建的。</p><h2 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h2><h3 id="Etcd"><a href="#Etcd" class="headerlink" title="Etcd"></a>Etcd</h3><p>键值数据库，这个没有什么特别好说的。要在安装k8s集群前先启动，保存k8s所有资源对象数据</p><h3 id="kube-apiserver"><a href="#kube-apiserver" class="headerlink" title="kube-apiserver"></a>kube-apiserver</h3><p>集群控制的入口进程，提供HTTP Rest接口的关键服务进程，是k8s里面所有资源操作的唯一入口。</p><h3 id="kube-controller-manager"><a href="#kube-controller-manager" class="headerlink" title="kube-controller-manager"></a>kube-controller-manager</h3><p>k8s所有资源对象的自动化控制中心</p><h3 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h3><p>k8s的资源调度进程</p><h3 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h3><p>负责pod对应的容器的创建，启停等任务，同时与Maser节点密切协作，实现集群管理的基本功能</p><h3 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h3><p>实现kubernetes Service的通信与负载均衡机制的重要组件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kubernetes-day1&quot;&gt;&lt;a href=&quot;#Kubernetes-day1&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes day1&quot;&gt;&lt;/a&gt;Kubernetes day1&lt;/h1&gt;&lt;h2 id=&quot;Kubernetes是什么
      
    
    </summary>
    
      <category term="Kubernetes" scheme="http://chenzhijun.me/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="http://chenzhijun.me/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Java 大数据中的敏感词汇处理</title>
    <link href="http://chenzhijun.me/2019/03/31/java-big-data-sensitive-word/"/>
    <id>http://chenzhijun.me/2019/03/31/java-big-data-sensitive-word/</id>
    <published>2019-03-31T14:39:06.000Z</published>
    <updated>2019-06-30T08:32:01.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-大数据中的敏感词汇处理"><a href="#Java-大数据中的敏感词汇处理" class="headerlink" title="Java 大数据中的敏感词汇处理"></a>Java 大数据中的敏感词汇处理</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-大数据中的敏感词汇处理&quot;&gt;&lt;a href=&quot;#Java-大数据中的敏感词汇处理&quot; class=&quot;headerlink&quot; title=&quot;Java 大数据中的敏感词汇处理&quot;&gt;&lt;/a&gt;Java 大数据中的敏感词汇处理&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://chenzhijun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>golang 包项目结构</title>
    <link href="http://chenzhijun.me/2019/03/31/golang-package-struct/"/>
    <id>http://chenzhijun.me/2019/03/31/golang-package-struct/</id>
    <published>2019-03-31T14:02:15.000Z</published>
    <updated>2019-06-30T08:32:01.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang-包项目结构"><a href="#golang-包项目结构" class="headerlink" title="golang 包项目结构"></a>golang 包项目结构</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;golang-包项目结构&quot;&gt;&lt;a href=&quot;#golang-包项目结构&quot; class=&quot;headerlink&quot; title=&quot;golang 包项目结构&quot;&gt;&lt;/a&gt;golang 包项目结构&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Golang" scheme="http://chenzhijun.me/categories/Golang/"/>
    
    
      <category term="golang" scheme="http://chenzhijun.me/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Java 开发遇到的两个问题</title>
    <link href="http://chenzhijun.me/2019/03/31/java-develop-normal-error/"/>
    <id>http://chenzhijun.me/2019/03/31/java-develop-normal-error/</id>
    <published>2019-03-31T13:56:43.000Z</published>
    <updated>2019-06-30T08:32:01.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java开发遇到的两个问题"><a href="#Java开发遇到的两个问题" class="headerlink" title="Java开发遇到的两个问题"></a>Java开发遇到的两个问题</h1><h2 id="Object-反序列化失败"><a href="#Object-反序列化失败" class="headerlink" title="Object 反序列化失败"></a>Object 反序列化失败</h2><p>使用<code>@ReponseBody</code>返回一个json串，返回的类型是<code>Object</code>，我们知道如果是<code>@RestController</code>，都会已restful返回，也就是返回json格式的数据，但是如果你是使用Object返回值，然后Object只是一个null或者仅仅只是<code>new Object()</code>，那么就会返回下面的异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.lang.Object and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[1])</span><br></pre></td></tr></table></figure><h2 id="RestTemplate使用中path有-问题"><a href="#RestTemplate使用中path有-问题" class="headerlink" title="RestTemplate使用中path有{}问题"></a>RestTemplate使用中path有{}问题</h2><p>RestTemplate 默认就是将path中的<code>{}</code>作为一个赋值表达式的，它会认为你需要替换<code>{}</code>中的内容。所以在path中最好特别注意下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java开发遇到的两个问题&quot;&gt;&lt;a href=&quot;#Java开发遇到的两个问题&quot; class=&quot;headerlink&quot; title=&quot;Java开发遇到的两个问题&quot;&gt;&lt;/a&gt;Java开发遇到的两个问题&lt;/h1&gt;&lt;h2 id=&quot;Object-反序列化失败&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="http://chenzhijun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>怎样将shell中命令执行的结果赋值给变量</title>
    <link href="http://chenzhijun.me/2019/03/31/how-to-transfer-linux-command-result-to-variable-in-shell/"/>
    <id>http://chenzhijun.me/2019/03/31/how-to-transfer-linux-command-result-to-variable-in-shell/</id>
    <published>2019-03-31T13:51:57.000Z</published>
    <updated>2019-06-30T08:32:01.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="怎样将shell中命令执行的结果赋值给变量"><a href="#怎样将shell中命令执行的结果赋值给变量" class="headerlink" title="怎样将shell中命令执行的结果赋值给变量"></a>怎样将shell中命令执行的结果赋值给变量</h1><p>其实这个比较简单。只需要将命令使用反单引号起来就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">srvname=`docker inspect 1swd3|grep "name"|awk -F "," '&#123;print $1&#125;'|awk '&#123;print $NF&#125;'`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;怎样将shell中命令执行的结果赋值给变量&quot;&gt;&lt;a href=&quot;#怎样将shell中命令执行的结果赋值给变量&quot; class=&quot;headerlink&quot; title=&quot;怎样将shell中命令执行的结果赋值给变量&quot;&gt;&lt;/a&gt;怎样将shell中命令执行的结果赋值给变量&lt;/
      
    
    </summary>
    
      <category term="Linux" scheme="http://chenzhijun.me/categories/Linux/"/>
    
    
      <category term="shell" scheme="http://chenzhijun.me/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>byte 在golang和Java中的区别</title>
    <link href="http://chenzhijun.me/2019/03/31/java-byte-golang-byte/"/>
    <id>http://chenzhijun.me/2019/03/31/java-byte-golang-byte/</id>
    <published>2019-03-31T13:45:50.000Z</published>
    <updated>2019-06-30T08:32:01.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="byte-在golang和Java中的区别"><a href="#byte-在golang和Java中的区别" class="headerlink" title="byte 在golang和Java中的区别"></a>byte 在golang和Java中的区别</h1><p>最近做一个项目，想用到md5，做一次数据的校验。因为是两个系统，一个golang开发，一个java开发。首先用Java生成md5值，然后传给golang，发现原始数据一致，但是生成的md5值却不一致。</p><p>深究其原因，最终发现是golang和java中对于byte的定义一个是无符号的，一个是有符号的，所以两者最后生成的md5值不一致。现在我发现有的时候真的需要注意到一些比较基础的东西，不然就会成为面向api的工程师。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;byte-在golang和Java中的区别&quot;&gt;&lt;a href=&quot;#byte-在golang和Java中的区别&quot; class=&quot;headerlink&quot; title=&quot;byte 在golang和Java中的区别&quot;&gt;&lt;/a&gt;byte 在golang和Java中的区别&lt;/
      
    
    </summary>
    
      <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
      <category term="byte" scheme="http://chenzhijun.me/tags/byte/"/>
    
  </entry>
  
  <entry>
    <title>golang编译成Linux环境下的二进制文件</title>
    <link href="http://chenzhijun.me/2019/03/31/windows-compile-golang-to-linux-running-script/"/>
    <id>http://chenzhijun.me/2019/03/31/windows-compile-golang-to-linux-running-script/</id>
    <published>2019-03-31T13:38:08.000Z</published>
    <updated>2019-06-30T08:32:01.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang编译成Linux环境下的二进制文件"><a href="#golang编译成Linux环境下的二进制文件" class="headerlink" title="golang编译成Linux环境下的二进制文件"></a>golang编译成Linux环境下的二进制文件</h1><p>最近需要将golang项目编译成Linux下可执行的脚本，手中只有windows笔记本，服务器上又各种网络限制。<br>于是干脆就再本地打成Linux二进制文件，然后传到服务器直接启动。</p><p>在本地上（win10）打开控制台，然后进入到项目根路径。之后设置当前几个值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=linux </span><br><span class="line">SET GOARCH=amd64</span><br></pre></td></tr></table></figure><p>最后使用<code>go build .</code>就可以了。 也算是异常简单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;golang编译成Linux环境下的二进制文件&quot;&gt;&lt;a href=&quot;#golang编译成Linux环境下的二进制文件&quot; class=&quot;headerlink&quot; title=&quot;golang编译成Linux环境下的二进制文件&quot;&gt;&lt;/a&gt;golang编译成Linux环境下
      
    
    </summary>
    
      <category term="golang" scheme="http://chenzhijun.me/categories/golang/"/>
    
    
      <category term="golang" scheme="http://chenzhijun.me/tags/golang/"/>
    
  </entry>
  
</feed>
